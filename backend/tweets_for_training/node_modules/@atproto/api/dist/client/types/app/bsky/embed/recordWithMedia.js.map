{"version":3,"file":"recordWithMedia.js","sourceRoot":"","sources":["../../../../../../src/client/types/app/bsky/embed/recordWithMedia.ts"],"names":[],"mappings":";;AAgCA,wBAEC;AAED,oCAEC;AAcD,wBAEC;AAED,oCAEC;AArDD,mDAA4D;AAC5D,2CAIyB;AAMzB,MAAM,QAAQ,GAAG,eAAS,EACxB,QAAQ,GAAG,mBAAS,CAAA;AACtB,MAAM,EAAE,GAAG,gCAAgC,CAAA;AAY3C,MAAM,QAAQ,GAAG,MAAM,CAAA;AAEvB,SAAgB,MAAM,CAAI,CAAI;IAC5B,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAA;AAClC,CAAC;AAED,SAAgB,YAAY,CAAI,CAAI;IAClC,OAAO,QAAQ,CAAW,CAAC,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAA;AAC5C,CAAC;AAYD,MAAM,QAAQ,GAAG,MAAM,CAAA;AAEvB,SAAgB,MAAM,CAAI,CAAI;IAC5B,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAA;AAClC,CAAC;AAED,SAAgB,YAAY,CAAI,CAAI;IAClC,OAAO,QAAQ,CAAW,CAAC,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAA;AAC5C,CAAC","sourcesContent":["/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { type ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { CID } from 'multiformats/cid'\nimport { validate as _validate } from '../../../../lexicons'\nimport {\n  type $Typed,\n  is$typed as _is$typed,\n  type OmitKey,\n} from '../../../../util'\nimport type * as AppBskyEmbedRecord from './record.js'\nimport type * as AppBskyEmbedImages from './images.js'\nimport type * as AppBskyEmbedVideo from './video.js'\nimport type * as AppBskyEmbedExternal from './external.js'\n\nconst is$typed = _is$typed,\n  validate = _validate\nconst id = 'app.bsky.embed.recordWithMedia'\n\nexport interface Main {\n  $type?: 'app.bsky.embed.recordWithMedia'\n  record: AppBskyEmbedRecord.Main\n  media:\n    | $Typed<AppBskyEmbedImages.Main>\n    | $Typed<AppBskyEmbedVideo.Main>\n    | $Typed<AppBskyEmbedExternal.Main>\n    | { $type: string }\n}\n\nconst hashMain = 'main'\n\nexport function isMain<V>(v: V) {\n  return is$typed(v, id, hashMain)\n}\n\nexport function validateMain<V>(v: V) {\n  return validate<Main & V>(v, id, hashMain)\n}\n\nexport interface View {\n  $type?: 'app.bsky.embed.recordWithMedia#view'\n  record: AppBskyEmbedRecord.View\n  media:\n    | $Typed<AppBskyEmbedImages.View>\n    | $Typed<AppBskyEmbedVideo.View>\n    | $Typed<AppBskyEmbedExternal.View>\n    | { $type: string }\n}\n\nconst hashView = 'view'\n\nexport function isView<V>(v: V) {\n  return is$typed(v, id, hashView)\n}\n\nexport function validateView<V>(v: V) {\n  return validate<View & V>(v, id, hashView)\n}\n"]}