{"version":3,"file":"defs.js","sourceRoot":"","sources":["../../../../../../src/client/types/tools/ozone/signature/defs.ts"],"names":[],"mappings":";;AAwBA,kCAEC;AAED,8CAEC;AAzBD,mDAA4D;AAC5D,2CAIyB;AAEzB,MAAM,QAAQ,GAAG,eAAS,EACxB,QAAQ,GAAG,mBAAS,CAAA;AACtB,MAAM,EAAE,GAAG,4BAA4B,CAAA;AAQvC,MAAM,aAAa,GAAG,WAAW,CAAA;AAEjC,SAAgB,WAAW,CAAI,CAAI;IACjC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,aAAa,CAAC,CAAA;AACvC,CAAC;AAED,SAAgB,iBAAiB,CAAI,CAAI;IACvC,OAAO,QAAQ,CAAgB,CAAC,EAAE,EAAE,EAAE,aAAa,CAAC,CAAA;AACtD,CAAC","sourcesContent":["/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { type ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { CID } from 'multiformats/cid'\nimport { validate as _validate } from '../../../../lexicons'\nimport {\n  type $Typed,\n  is$typed as _is$typed,\n  type OmitKey,\n} from '../../../../util'\n\nconst is$typed = _is$typed,\n  validate = _validate\nconst id = 'tools.ozone.signature.defs'\n\nexport interface SigDetail {\n  $type?: 'tools.ozone.signature.defs#sigDetail'\n  property: string\n  value: string\n}\n\nconst hashSigDetail = 'sigDetail'\n\nexport function isSigDetail<V>(v: V) {\n  return is$typed(v, id, hashSigDetail)\n}\n\nexport function validateSigDetail<V>(v: V) {\n  return validate<SigDetail & V>(v, id, hashSigDetail)\n}\n"]}