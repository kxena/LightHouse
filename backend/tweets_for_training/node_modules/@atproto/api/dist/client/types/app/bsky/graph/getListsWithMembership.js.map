{"version":3,"file":"getListsWithMembership.js","sourceRoot":"","sources":["../../../../../../src/client/types/app/bsky/graph/getListsWithMembership.ts"],"names":[],"mappings":";;AA4CA,gCAEC;AAWD,oDAEC;AAED,gEAEC;AAzDD,mDAA4D;AAC5D,2CAIyB;AAGzB,MAAM,QAAQ,GAAG,eAAS,EACxB,QAAQ,GAAG,mBAAS,CAAA;AACtB,MAAM,EAAE,GAAG,uCAAuC,CAAA;AA4BlD,SAAgB,UAAU,CAAC,CAAM;IAC/B,OAAO,CAAC,CAAA;AACV,CAAC;AASD,MAAM,sBAAsB,GAAG,oBAAoB,CAAA;AAEnD,SAAgB,oBAAoB,CAAI,CAAI;IAC1C,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,sBAAsB,CAAC,CAAA;AAChD,CAAC;AAED,SAAgB,0BAA0B,CAAI,CAAI;IAChD,OAAO,QAAQ,CAAyB,CAAC,EAAE,EAAE,EAAE,sBAAsB,CAAC,CAAA;AACxE,CAAC","sourcesContent":["/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { HeadersMap, XRPCError } from '@atproto/xrpc'\nimport { type ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { CID } from 'multiformats/cid'\nimport { validate as _validate } from '../../../../lexicons'\nimport {\n  type $Typed,\n  is$typed as _is$typed,\n  type OmitKey,\n} from '../../../../util'\nimport type * as AppBskyGraphDefs from './defs.js'\n\nconst is$typed = _is$typed,\n  validate = _validate\nconst id = 'app.bsky.graph.getListsWithMembership'\n\nexport type QueryParams = {\n  /** The account (actor) to check for membership. */\n  actor: string\n  limit?: number\n  cursor?: string\n  /** Optional filter by list purpose. If not specified, all supported types are returned. */\n  purposes?: 'modlist' | 'curatelist' | (string & {})[]\n}\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  listsWithMembership: ListWithMembership[]\n}\n\nexport interface CallOptions {\n  signal?: AbortSignal\n  headers?: HeadersMap\n}\n\nexport interface Response {\n  success: boolean\n  headers: HeadersMap\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  return e\n}\n\n/** A list and an optional list item indicating membership of a target user to that list. */\nexport interface ListWithMembership {\n  $type?: 'app.bsky.graph.getListsWithMembership#listWithMembership'\n  list: AppBskyGraphDefs.ListView\n  listItem?: AppBskyGraphDefs.ListItemView\n}\n\nconst hashListWithMembership = 'listWithMembership'\n\nexport function isListWithMembership<V>(v: V) {\n  return is$typed(v, id, hashListWithMembership)\n}\n\nexport function validateListWithMembership<V>(v: V) {\n  return validate<ListWithMembership & V>(v, id, hashListWithMembership)\n}\n"]}