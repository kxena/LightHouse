{"version":3,"file":"defs.js","sourceRoot":"","sources":["../../../../../../src/client/types/com/atproto/label/defs.ts"],"names":[],"mappings":";;AAyCA,0BAEC;AAED,sCAEC;AAUD,oCAEC;AAED,gDAEC;AAWD,kCAEC;AAED,8CAEC;AAoBD,wDAEC;AAED,oEAEC;AAeD,sEAEC;AAED,kFAMC;AA9HD,mDAA4D;AAC5D,2CAIyB;AAEzB,MAAM,QAAQ,GAAG,eAAS,EACxB,QAAQ,GAAG,mBAAS,CAAA;AACtB,MAAM,EAAE,GAAG,wBAAwB,CAAA;AAyBnC,MAAM,SAAS,GAAG,OAAO,CAAA;AAEzB,SAAgB,OAAO,CAAI,CAAI;IAC7B,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,SAAS,CAAC,CAAA;AACnC,CAAC;AAED,SAAgB,aAAa,CAAI,CAAI;IACnC,OAAO,QAAQ,CAAY,CAAC,EAAE,EAAE,EAAE,SAAS,CAAC,CAAA;AAC9C,CAAC;AAQD,MAAM,cAAc,GAAG,YAAY,CAAA;AAEnC,SAAgB,YAAY,CAAI,CAAI;IAClC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,cAAc,CAAC,CAAA;AACxC,CAAC;AAED,SAAgB,kBAAkB,CAAI,CAAI;IACxC,OAAO,QAAQ,CAAiB,CAAC,EAAE,EAAE,EAAE,cAAc,CAAC,CAAA;AACxD,CAAC;AASD,MAAM,aAAa,GAAG,WAAW,CAAA;AAEjC,SAAgB,WAAW,CAAI,CAAI;IACjC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,aAAa,CAAC,CAAA;AACvC,CAAC;AAED,SAAgB,iBAAiB,CAAI,CAAI;IACvC,OAAO,QAAQ,CAAgB,CAAC,EAAE,EAAE,EAAE,aAAa,CAAC,CAAA;AACtD,CAAC;AAkBD,MAAM,wBAAwB,GAAG,sBAAsB,CAAA;AAEvD,SAAgB,sBAAsB,CAAI,CAAI;IAC5C,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,wBAAwB,CAAC,CAAA;AAClD,CAAC;AAED,SAAgB,4BAA4B,CAAI,CAAI;IAClD,OAAO,QAAQ,CAA2B,CAAC,EAAE,EAAE,EAAE,wBAAwB,CAAC,CAAA;AAC5E,CAAC;AAaD,MAAM,+BAA+B,GAAG,6BAA6B,CAAA;AAErE,SAAgB,6BAA6B,CAAI,CAAI;IACnD,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,+BAA+B,CAAC,CAAA;AACzD,CAAC;AAED,SAAgB,mCAAmC,CAAI,CAAI;IACzD,OAAO,QAAQ,CACb,CAAC,EACD,EAAE,EACF,+BAA+B,CAChC,CAAA;AACH,CAAC","sourcesContent":["/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { type ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { CID } from 'multiformats/cid'\nimport { validate as _validate } from '../../../../lexicons'\nimport {\n  type $Typed,\n  is$typed as _is$typed,\n  type OmitKey,\n} from '../../../../util'\n\nconst is$typed = _is$typed,\n  validate = _validate\nconst id = 'com.atproto.label.defs'\n\n/** Metadata tag on an atproto resource (eg, repo or record). */\nexport interface Label {\n  $type?: 'com.atproto.label.defs#label'\n  /** The AT Protocol version of the label object. */\n  ver?: number\n  /** DID of the actor who created this label. */\n  src: string\n  /** AT URI of the record, repository (account), or other resource that this label applies to. */\n  uri: string\n  /** Optionally, CID specifying the specific version of 'uri' resource this label applies to. */\n  cid?: string\n  /** The short string name of the value or type of this label. */\n  val: string\n  /** If true, this is a negation label, overwriting a previous label. */\n  neg?: boolean\n  /** Timestamp when this label was created. */\n  cts: string\n  /** Timestamp at which this label expires (no longer applies). */\n  exp?: string\n  /** Signature of dag-cbor encoded label. */\n  sig?: Uint8Array\n}\n\nconst hashLabel = 'label'\n\nexport function isLabel<V>(v: V) {\n  return is$typed(v, id, hashLabel)\n}\n\nexport function validateLabel<V>(v: V) {\n  return validate<Label & V>(v, id, hashLabel)\n}\n\n/** Metadata tags on an atproto record, published by the author within the record. */\nexport interface SelfLabels {\n  $type?: 'com.atproto.label.defs#selfLabels'\n  values: SelfLabel[]\n}\n\nconst hashSelfLabels = 'selfLabels'\n\nexport function isSelfLabels<V>(v: V) {\n  return is$typed(v, id, hashSelfLabels)\n}\n\nexport function validateSelfLabels<V>(v: V) {\n  return validate<SelfLabels & V>(v, id, hashSelfLabels)\n}\n\n/** Metadata tag on an atproto record, published by the author within the record. Note that schemas should use #selfLabels, not #selfLabel. */\nexport interface SelfLabel {\n  $type?: 'com.atproto.label.defs#selfLabel'\n  /** The short string name of the value or type of this label. */\n  val: string\n}\n\nconst hashSelfLabel = 'selfLabel'\n\nexport function isSelfLabel<V>(v: V) {\n  return is$typed(v, id, hashSelfLabel)\n}\n\nexport function validateSelfLabel<V>(v: V) {\n  return validate<SelfLabel & V>(v, id, hashSelfLabel)\n}\n\n/** Declares a label value and its expected interpretations and behaviors. */\nexport interface LabelValueDefinition {\n  $type?: 'com.atproto.label.defs#labelValueDefinition'\n  /** The value of the label being defined. Must only include lowercase ascii and the '-' character ([a-z-]+). */\n  identifier: string\n  /** How should a client visually convey this label? 'inform' means neutral and informational; 'alert' means negative and warning; 'none' means show nothing. */\n  severity: 'inform' | 'alert' | 'none' | (string & {})\n  /** What should this label hide in the UI, if applied? 'content' hides all of the target; 'media' hides the images/video/audio; 'none' hides nothing. */\n  blurs: 'content' | 'media' | 'none' | (string & {})\n  /** The default setting for this label. */\n  defaultSetting: 'ignore' | 'warn' | 'hide' | (string & {})\n  /** Does the user need to have adult content enabled in order to configure this label? */\n  adultOnly?: boolean\n  locales: LabelValueDefinitionStrings[]\n}\n\nconst hashLabelValueDefinition = 'labelValueDefinition'\n\nexport function isLabelValueDefinition<V>(v: V) {\n  return is$typed(v, id, hashLabelValueDefinition)\n}\n\nexport function validateLabelValueDefinition<V>(v: V) {\n  return validate<LabelValueDefinition & V>(v, id, hashLabelValueDefinition)\n}\n\n/** Strings which describe the label in the UI, localized into a specific language. */\nexport interface LabelValueDefinitionStrings {\n  $type?: 'com.atproto.label.defs#labelValueDefinitionStrings'\n  /** The code of the language these strings are written in. */\n  lang: string\n  /** A short human-readable name for the label. */\n  name: string\n  /** A longer description of what the label means and why it might be applied. */\n  description: string\n}\n\nconst hashLabelValueDefinitionStrings = 'labelValueDefinitionStrings'\n\nexport function isLabelValueDefinitionStrings<V>(v: V) {\n  return is$typed(v, id, hashLabelValueDefinitionStrings)\n}\n\nexport function validateLabelValueDefinitionStrings<V>(v: V) {\n  return validate<LabelValueDefinitionStrings & V>(\n    v,\n    id,\n    hashLabelValueDefinitionStrings,\n  )\n}\n\nexport type LabelValue =\n  | '!hide'\n  | '!no-promote'\n  | '!warn'\n  | '!no-unauthenticated'\n  | 'dmca-violation'\n  | 'doxxing'\n  | 'porn'\n  | 'sexual'\n  | 'nudity'\n  | 'nsfl'\n  | 'gore'\n  | (string & {})\n"]}