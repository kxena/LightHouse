{"version":3,"file":"getAccountHistory.js","sourceRoot":"","sources":["../../../../../../src/client/types/tools/ozone/hosting/getAccountHistory.ts"],"names":[],"mappings":";;AA+CA,gCAEC;AAiBD,0BAEC;AAED,sCAEC;AAUD,4CAEC;AAED,wDAEC;AASD,wCAEC;AAED,oDAEC;AASD,4CAEC;AAED,wDAEC;AAQD,8CAEC;AAED,0DAEC;AASD,0CAEC;AAED,sDAEC;AA7ID,mDAA4D;AAC5D,2CAIyB;AAEzB,MAAM,QAAQ,GAAG,eAAS,EACxB,QAAQ,GAAG,mBAAS,CAAA;AACtB,MAAM,EAAE,GAAG,uCAAuC,CAAA;AAgClD,SAAgB,UAAU,CAAC,CAAM;IAC/B,OAAO,CAAC,CAAA;AACV,CAAC;AAeD,MAAM,SAAS,GAAG,OAAO,CAAA;AAEzB,SAAgB,OAAO,CAAI,CAAI;IAC7B,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,SAAS,CAAC,CAAA;AACnC,CAAC;AAED,SAAgB,aAAa,CAAI,CAAI;IACnC,OAAO,QAAQ,CAAY,CAAC,EAAE,EAAE,EAAE,SAAS,CAAC,CAAA;AAC9C,CAAC;AAQD,MAAM,kBAAkB,GAAG,gBAAgB,CAAA;AAE3C,SAAgB,gBAAgB,CAAI,CAAI;IACtC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,kBAAkB,CAAC,CAAA;AAC5C,CAAC;AAED,SAAgB,sBAAsB,CAAI,CAAI;IAC5C,OAAO,QAAQ,CAAqB,CAAC,EAAE,EAAE,EAAE,kBAAkB,CAAC,CAAA;AAChE,CAAC;AAOD,MAAM,gBAAgB,GAAG,cAAc,CAAA;AAEvC,SAAgB,cAAc,CAAI,CAAI;IACpC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,gBAAgB,CAAC,CAAA;AAC1C,CAAC;AAED,SAAgB,oBAAoB,CAAI,CAAI;IAC1C,OAAO,QAAQ,CAAmB,CAAC,EAAE,EAAE,EAAE,gBAAgB,CAAC,CAAA;AAC5D,CAAC;AAOD,MAAM,kBAAkB,GAAG,gBAAgB,CAAA;AAE3C,SAAgB,gBAAgB,CAAI,CAAI;IACtC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,kBAAkB,CAAC,CAAA;AAC5C,CAAC;AAED,SAAgB,sBAAsB,CAAI,CAAI;IAC5C,OAAO,QAAQ,CAAqB,CAAC,EAAE,EAAE,EAAE,kBAAkB,CAAC,CAAA;AAChE,CAAC;AAMD,MAAM,mBAAmB,GAAG,iBAAiB,CAAA;AAE7C,SAAgB,iBAAiB,CAAI,CAAI;IACvC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,mBAAmB,CAAC,CAAA;AAC7C,CAAC;AAED,SAAgB,uBAAuB,CAAI,CAAI;IAC7C,OAAO,QAAQ,CAAsB,CAAC,EAAE,EAAE,EAAE,mBAAmB,CAAC,CAAA;AAClE,CAAC;AAOD,MAAM,iBAAiB,GAAG,eAAe,CAAA;AAEzC,SAAgB,eAAe,CAAI,CAAI;IACrC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAA;AAC3C,CAAC;AAED,SAAgB,qBAAqB,CAAI,CAAI;IAC3C,OAAO,QAAQ,CAAoB,CAAC,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAA;AAC9D,CAAC","sourcesContent":["/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { HeadersMap, XRPCError } from '@atproto/xrpc'\nimport { type ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { CID } from 'multiformats/cid'\nimport { validate as _validate } from '../../../../lexicons'\nimport {\n  type $Typed,\n  is$typed as _is$typed,\n  type OmitKey,\n} from '../../../../util'\n\nconst is$typed = _is$typed,\n  validate = _validate\nconst id = 'tools.ozone.hosting.getAccountHistory'\n\nexport type QueryParams = {\n  did: string\n  events?:\n    | 'accountCreated'\n    | 'emailUpdated'\n    | 'emailConfirmed'\n    | 'passwordUpdated'\n    | 'handleUpdated'\n    | (string & {})[]\n  cursor?: string\n  limit?: number\n}\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  events: Event[]\n}\n\nexport interface CallOptions {\n  signal?: AbortSignal\n  headers?: HeadersMap\n}\n\nexport interface Response {\n  success: boolean\n  headers: HeadersMap\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  return e\n}\n\nexport interface Event {\n  $type?: 'tools.ozone.hosting.getAccountHistory#event'\n  details:\n    | $Typed<AccountCreated>\n    | $Typed<EmailUpdated>\n    | $Typed<EmailConfirmed>\n    | $Typed<PasswordUpdated>\n    | $Typed<HandleUpdated>\n    | { $type: string }\n  createdBy: string\n  createdAt: string\n}\n\nconst hashEvent = 'event'\n\nexport function isEvent<V>(v: V) {\n  return is$typed(v, id, hashEvent)\n}\n\nexport function validateEvent<V>(v: V) {\n  return validate<Event & V>(v, id, hashEvent)\n}\n\nexport interface AccountCreated {\n  $type?: 'tools.ozone.hosting.getAccountHistory#accountCreated'\n  email?: string\n  handle?: string\n}\n\nconst hashAccountCreated = 'accountCreated'\n\nexport function isAccountCreated<V>(v: V) {\n  return is$typed(v, id, hashAccountCreated)\n}\n\nexport function validateAccountCreated<V>(v: V) {\n  return validate<AccountCreated & V>(v, id, hashAccountCreated)\n}\n\nexport interface EmailUpdated {\n  $type?: 'tools.ozone.hosting.getAccountHistory#emailUpdated'\n  email: string\n}\n\nconst hashEmailUpdated = 'emailUpdated'\n\nexport function isEmailUpdated<V>(v: V) {\n  return is$typed(v, id, hashEmailUpdated)\n}\n\nexport function validateEmailUpdated<V>(v: V) {\n  return validate<EmailUpdated & V>(v, id, hashEmailUpdated)\n}\n\nexport interface EmailConfirmed {\n  $type?: 'tools.ozone.hosting.getAccountHistory#emailConfirmed'\n  email: string\n}\n\nconst hashEmailConfirmed = 'emailConfirmed'\n\nexport function isEmailConfirmed<V>(v: V) {\n  return is$typed(v, id, hashEmailConfirmed)\n}\n\nexport function validateEmailConfirmed<V>(v: V) {\n  return validate<EmailConfirmed & V>(v, id, hashEmailConfirmed)\n}\n\nexport interface PasswordUpdated {\n  $type?: 'tools.ozone.hosting.getAccountHistory#passwordUpdated'\n}\n\nconst hashPasswordUpdated = 'passwordUpdated'\n\nexport function isPasswordUpdated<V>(v: V) {\n  return is$typed(v, id, hashPasswordUpdated)\n}\n\nexport function validatePasswordUpdated<V>(v: V) {\n  return validate<PasswordUpdated & V>(v, id, hashPasswordUpdated)\n}\n\nexport interface HandleUpdated {\n  $type?: 'tools.ozone.hosting.getAccountHistory#handleUpdated'\n  handle: string\n}\n\nconst hashHandleUpdated = 'handleUpdated'\n\nexport function isHandleUpdated<V>(v: V) {\n  return is$typed(v, id, hashHandleUpdated)\n}\n\nexport function validateHandleUpdated<V>(v: V) {\n  return validate<HandleUpdated & V>(v, id, hashHandleUpdated)\n}\n"]}