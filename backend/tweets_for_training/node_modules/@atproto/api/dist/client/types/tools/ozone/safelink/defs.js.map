{"version":3,"file":"defs.js","sourceRoot":"","sources":["../../../../../../src/client/types/tools/ozone/safelink/defs.ts"],"names":[],"mappings":";;AAoCA,0BAEC;AAED,sCAEC;AA2BD,8BAEC;AAED,0CAEC;AAtED,mDAA4D;AAC5D,2CAIyB;AAEzB,MAAM,QAAQ,GAAG,eAAS,EACxB,QAAQ,GAAG,mBAAS,CAAA;AACtB,MAAM,EAAE,GAAG,2BAA2B,CAAA;AAoBtC,MAAM,SAAS,GAAG,OAAO,CAAA;AAEzB,SAAgB,OAAO,CAAI,CAAI;IAC7B,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,SAAS,CAAC,CAAA;AACnC,CAAC;AAED,SAAgB,aAAa,CAAI,CAAI;IACnC,OAAO,QAAQ,CAAY,CAAC,EAAE,EAAE,EAAE,SAAS,CAAC,CAAA;AAC9C,CAAC;AAyBD,MAAM,WAAW,GAAG,SAAS,CAAA;AAE7B,SAAgB,SAAS,CAAI,CAAI;IAC/B,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,WAAW,CAAC,CAAA;AACrC,CAAC;AAED,SAAgB,eAAe,CAAI,CAAI;IACrC,OAAO,QAAQ,CAAc,CAAC,EAAE,EAAE,EAAE,WAAW,CAAC,CAAA;AAClD,CAAC","sourcesContent":["/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { type ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { CID } from 'multiformats/cid'\nimport { validate as _validate } from '../../../../lexicons'\nimport {\n  type $Typed,\n  is$typed as _is$typed,\n  type OmitKey,\n} from '../../../../util'\n\nconst is$typed = _is$typed,\n  validate = _validate\nconst id = 'tools.ozone.safelink.defs'\n\n/** An event for URL safety decisions */\nexport interface Event {\n  $type?: 'tools.ozone.safelink.defs#event'\n  /** Auto-incrementing row ID */\n  id: number\n  eventType: EventType\n  /** The URL that this rule applies to */\n  url: string\n  pattern: PatternType\n  action: ActionType\n  reason: ReasonType\n  /** DID of the user who created this rule */\n  createdBy: string\n  createdAt: string\n  /** Optional comment about the decision */\n  comment?: string\n}\n\nconst hashEvent = 'event'\n\nexport function isEvent<V>(v: V) {\n  return is$typed(v, id, hashEvent)\n}\n\nexport function validateEvent<V>(v: V) {\n  return validate<Event & V>(v, id, hashEvent)\n}\n\nexport type EventType = 'addRule' | 'updateRule' | 'removeRule' | (string & {})\nexport type PatternType = 'domain' | 'url' | (string & {})\nexport type ActionType = 'block' | 'warn' | 'whitelist' | (string & {})\nexport type ReasonType = 'csam' | 'spam' | 'phishing' | 'none' | (string & {})\n\n/** Input for creating a URL safety rule */\nexport interface UrlRule {\n  $type?: 'tools.ozone.safelink.defs#urlRule'\n  /** The URL or domain to apply the rule to */\n  url: string\n  pattern: PatternType\n  action: ActionType\n  reason: ReasonType\n  /** Optional comment about the decision */\n  comment?: string\n  /** DID of the user added the rule. */\n  createdBy: string\n  /** Timestamp when the rule was created */\n  createdAt: string\n  /** Timestamp when the rule was last updated */\n  updatedAt: string\n}\n\nconst hashUrlRule = 'urlRule'\n\nexport function isUrlRule<V>(v: V) {\n  return is$typed(v, id, hashUrlRule)\n}\n\nexport function validateUrlRule<V>(v: V) {\n  return validate<UrlRule & V>(v, id, hashUrlRule)\n}\n"]}