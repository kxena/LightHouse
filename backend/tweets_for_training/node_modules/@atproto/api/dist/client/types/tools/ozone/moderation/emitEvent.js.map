{"version":3,"file":"emitEvent.js","sourceRoot":"","sources":["../../../../../../src/client/types/tools/ozone/moderation/emitEvent.ts"],"names":[],"mappings":";;;AAuFA,gCAQC;AA/FD;;GAEG;AACH,wCAAqD;AAGrD,mDAA4D;AAC5D,2CAIyB;AAKzB,MAAM,QAAQ,GAAG,eAAS,EACxB,QAAQ,GAAG,mBAAS,CAAA;AACtB,MAAM,EAAE,GAAG,kCAAkC,CAAA;AAyD7C,MAAa,qBAAsB,SAAQ,gBAAS;IAClD,YAAY,GAAc;QACxB,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAA;IACxE,CAAC;CACF;AAJD,sDAIC;AAED,MAAa,wBAAyB,SAAQ,gBAAS;IACrD,YAAY,GAAc;QACxB,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAA;IACxE,CAAC;CACF;AAJD,4DAIC;AAED,SAAgB,UAAU,CAAC,CAAM;IAC/B,IAAI,CAAC,YAAY,gBAAS,EAAE,CAAC;QAC3B,IAAI,CAAC,CAAC,KAAK,KAAK,kBAAkB;YAAE,OAAO,IAAI,qBAAqB,CAAC,CAAC,CAAC,CAAA;QACvE,IAAI,CAAC,CAAC,KAAK,KAAK,qBAAqB;YACnC,OAAO,IAAI,wBAAwB,CAAC,CAAC,CAAC,CAAA;IAC1C,CAAC;IAED,OAAO,CAAC,CAAA;AACV,CAAC","sourcesContent":["/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { HeadersMap, XRPCError } from '@atproto/xrpc'\nimport { type ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { CID } from 'multiformats/cid'\nimport { validate as _validate } from '../../../../lexicons'\nimport {\n  type $Typed,\n  is$typed as _is$typed,\n  type OmitKey,\n} from '../../../../util'\nimport type * as ToolsOzoneModerationDefs from './defs.js'\nimport type * as ComAtprotoAdminDefs from '../../../com/atproto/admin/defs.js'\nimport type * as ComAtprotoRepoStrongRef from '../../../com/atproto/repo/strongRef.js'\n\nconst is$typed = _is$typed,\n  validate = _validate\nconst id = 'tools.ozone.moderation.emitEvent'\n\nexport type QueryParams = {}\n\nexport interface InputSchema {\n  event:\n    | $Typed<ToolsOzoneModerationDefs.ModEventTakedown>\n    | $Typed<ToolsOzoneModerationDefs.ModEventAcknowledge>\n    | $Typed<ToolsOzoneModerationDefs.ModEventEscalate>\n    | $Typed<ToolsOzoneModerationDefs.ModEventComment>\n    | $Typed<ToolsOzoneModerationDefs.ModEventLabel>\n    | $Typed<ToolsOzoneModerationDefs.ModEventReport>\n    | $Typed<ToolsOzoneModerationDefs.ModEventMute>\n    | $Typed<ToolsOzoneModerationDefs.ModEventUnmute>\n    | $Typed<ToolsOzoneModerationDefs.ModEventMuteReporter>\n    | $Typed<ToolsOzoneModerationDefs.ModEventUnmuteReporter>\n    | $Typed<ToolsOzoneModerationDefs.ModEventReverseTakedown>\n    | $Typed<ToolsOzoneModerationDefs.ModEventResolveAppeal>\n    | $Typed<ToolsOzoneModerationDefs.ModEventEmail>\n    | $Typed<ToolsOzoneModerationDefs.ModEventDivert>\n    | $Typed<ToolsOzoneModerationDefs.ModEventTag>\n    | $Typed<ToolsOzoneModerationDefs.AccountEvent>\n    | $Typed<ToolsOzoneModerationDefs.IdentityEvent>\n    | $Typed<ToolsOzoneModerationDefs.RecordEvent>\n    | $Typed<ToolsOzoneModerationDefs.ModEventPriorityScore>\n    | $Typed<ToolsOzoneModerationDefs.AgeAssuranceEvent>\n    | $Typed<ToolsOzoneModerationDefs.AgeAssuranceOverrideEvent>\n    | $Typed<ToolsOzoneModerationDefs.RevokeAccountCredentialsEvent>\n    | $Typed<ToolsOzoneModerationDefs.ScheduleTakedownEvent>\n    | $Typed<ToolsOzoneModerationDefs.CancelScheduledTakedownEvent>\n    | { $type: string }\n  subject:\n    | $Typed<ComAtprotoAdminDefs.RepoRef>\n    | $Typed<ComAtprotoRepoStrongRef.Main>\n    | { $type: string }\n  subjectBlobCids?: string[]\n  createdBy: string\n  modTool?: ToolsOzoneModerationDefs.ModTool\n  /** An optional external ID for the event, used to deduplicate events from external systems. Fails when an event of same type with the same external ID exists for the same subject. */\n  externalId?: string\n}\n\nexport type OutputSchema = ToolsOzoneModerationDefs.ModEventView\n\nexport interface CallOptions {\n  signal?: AbortSignal\n  headers?: HeadersMap\n  qp?: QueryParams\n  encoding?: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: HeadersMap\n  data: OutputSchema\n}\n\nexport class SubjectHasActionError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers, { cause: src })\n  }\n}\n\nexport class DuplicateExternalIdError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers, { cause: src })\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'SubjectHasAction') return new SubjectHasActionError(e)\n    if (e.error === 'DuplicateExternalId')\n      return new DuplicateExternalIdError(e)\n  }\n\n  return e\n}\n"]}