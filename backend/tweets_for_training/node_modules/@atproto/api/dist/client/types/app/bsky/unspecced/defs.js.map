{"version":3,"file":"defs.js","sourceRoot":"","sources":["../../../../../../src/client/types/app/bsky/unspecced/defs.ts"],"names":[],"mappings":";;AAyBA,oDAEC;AAED,gEAEC;AASD,sDAEC;AAED,kEAEC;AASD,kEAEC;AAED,8EAMC;AAYD,0CAEC;AAED,sDAEC;AAgBD,0CAEC;AAED,sDAEC;AAgBD,kCAEC;AAED,8CAEC;AAmBD,4CAEC;AAED,wDAEC;AAQD,sEAEC;AAED,kFAMC;AAQD,oDAEC;AAED,gEAEC;AASD,kDAEC;AAED,8DAEC;AAaD,kDAEC;AAED,8DAEC;AAyBD,kDAEC;AAED,8DAEC;AApPD,mDAA4D;AAC5D,2CAIyB;AAIzB,MAAM,QAAQ,GAAG,eAAS,EACxB,QAAQ,GAAG,mBAAS,CAAA;AACtB,MAAM,EAAE,GAAG,yBAAyB,CAAA;AAOpC,MAAM,sBAAsB,GAAG,oBAAoB,CAAA;AAEnD,SAAgB,oBAAoB,CAAI,CAAI;IAC1C,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,sBAAsB,CAAC,CAAA;AAChD,CAAC;AAED,SAAgB,0BAA0B,CAAI,CAAI;IAChD,OAAO,QAAQ,CAAyB,CAAC,EAAE,EAAE,EAAE,sBAAsB,CAAC,CAAA;AACxE,CAAC;AAOD,MAAM,uBAAuB,GAAG,qBAAqB,CAAA;AAErD,SAAgB,qBAAqB,CAAI,CAAI;IAC3C,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,uBAAuB,CAAC,CAAA;AACjD,CAAC;AAED,SAAgB,2BAA2B,CAAI,CAAI;IACjD,OAAO,QAAQ,CAA0B,CAAC,EAAE,EAAE,EAAE,uBAAuB,CAAC,CAAA;AAC1E,CAAC;AAOD,MAAM,6BAA6B,GAAG,2BAA2B,CAAA;AAEjE,SAAgB,2BAA2B,CAAI,CAAI;IACjD,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,6BAA6B,CAAC,CAAA;AACvD,CAAC;AAED,SAAgB,iCAAiC,CAAI,CAAI;IACvD,OAAO,QAAQ,CACb,CAAC,EACD,EAAE,EACF,6BAA6B,CAC9B,CAAA;AACH,CAAC;AAUD,MAAM,iBAAiB,GAAG,eAAe,CAAA;AAEzC,SAAgB,eAAe,CAAI,CAAI;IACrC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAA;AAC3C,CAAC;AAED,SAAgB,qBAAqB,CAAI,CAAI;IAC3C,OAAO,QAAQ,CAAoB,CAAC,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAA;AAC9D,CAAC;AAcD,MAAM,iBAAiB,GAAG,eAAe,CAAA;AAEzC,SAAgB,eAAe,CAAI,CAAI;IACrC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAA;AAC3C,CAAC;AAED,SAAgB,qBAAqB,CAAI,CAAI;IAC3C,OAAO,QAAQ,CAAoB,CAAC,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAA;AAC9D,CAAC;AAcD,MAAM,aAAa,GAAG,WAAW,CAAA;AAEjC,SAAgB,WAAW,CAAI,CAAI;IACjC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,aAAa,CAAC,CAAA;AACvC,CAAC;AAED,SAAgB,iBAAiB,CAAI,CAAI;IACvC,OAAO,QAAQ,CAAgB,CAAC,EAAE,EAAE,EAAE,aAAa,CAAC,CAAA;AACtD,CAAC;AAiBD,MAAM,kBAAkB,GAAG,gBAAgB,CAAA;AAE3C,SAAgB,gBAAgB,CAAI,CAAI;IACtC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,kBAAkB,CAAC,CAAA;AAC5C,CAAC;AAED,SAAgB,sBAAsB,CAAI,CAAI;IAC5C,OAAO,QAAQ,CAAqB,CAAC,EAAE,EAAE,EAAE,kBAAkB,CAAC,CAAA;AAChE,CAAC;AAMD,MAAM,+BAA+B,GAAG,6BAA6B,CAAA;AAErE,SAAgB,6BAA6B,CAAI,CAAI;IACnD,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,+BAA+B,CAAC,CAAA;AACzD,CAAC;AAED,SAAgB,mCAAmC,CAAI,CAAI;IACzD,OAAO,QAAQ,CACb,CAAC,EACD,EAAE,EACF,+BAA+B,CAChC,CAAA;AACH,CAAC;AAMD,MAAM,sBAAsB,GAAG,oBAAoB,CAAA;AAEnD,SAAgB,oBAAoB,CAAI,CAAI;IAC1C,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,sBAAsB,CAAC,CAAA;AAChD,CAAC;AAED,SAAgB,0BAA0B,CAAI,CAAI;IAChD,OAAO,QAAQ,CAAyB,CAAC,EAAE,EAAE,EAAE,sBAAsB,CAAC,CAAA;AACxE,CAAC;AAOD,MAAM,qBAAqB,GAAG,mBAAmB,CAAA;AAEjD,SAAgB,mBAAmB,CAAI,CAAI;IACzC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,qBAAqB,CAAC,CAAA;AAC/C,CAAC;AAED,SAAgB,yBAAyB,CAAI,CAAI;IAC/C,OAAO,QAAQ,CAAwB,CAAC,EAAE,EAAE,EAAE,qBAAqB,CAAC,CAAA;AACtE,CAAC;AAWD,MAAM,qBAAqB,GAAG,mBAAmB,CAAA;AAEjD,SAAgB,mBAAmB,CAAI,CAAI;IACzC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,qBAAqB,CAAC,CAAA;AAC/C,CAAC;AAED,SAAgB,yBAAyB,CAAI,CAAI;IAC/C,OAAO,QAAQ,CAAwB,CAAC,EAAE,EAAE,EAAE,qBAAqB,CAAC,CAAA;AACtE,CAAC;AAuBD,MAAM,qBAAqB,GAAG,mBAAmB,CAAA;AAEjD,SAAgB,mBAAmB,CAAI,CAAI;IACzC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,qBAAqB,CAAC,CAAA;AAC/C,CAAC;AAED,SAAgB,yBAAyB,CAAI,CAAI;IAC/C,OAAO,QAAQ,CAAwB,CAAC,EAAE,EAAE,EAAE,qBAAqB,CAAC,CAAA;AACtE,CAAC","sourcesContent":["/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { type ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { CID } from 'multiformats/cid'\nimport { validate as _validate } from '../../../../lexicons'\nimport {\n  type $Typed,\n  is$typed as _is$typed,\n  type OmitKey,\n} from '../../../../util'\nimport type * as AppBskyActorDefs from '../actor/defs.js'\nimport type * as AppBskyFeedDefs from '../feed/defs.js'\n\nconst is$typed = _is$typed,\n  validate = _validate\nconst id = 'app.bsky.unspecced.defs'\n\nexport interface SkeletonSearchPost {\n  $type?: 'app.bsky.unspecced.defs#skeletonSearchPost'\n  uri: string\n}\n\nconst hashSkeletonSearchPost = 'skeletonSearchPost'\n\nexport function isSkeletonSearchPost<V>(v: V) {\n  return is$typed(v, id, hashSkeletonSearchPost)\n}\n\nexport function validateSkeletonSearchPost<V>(v: V) {\n  return validate<SkeletonSearchPost & V>(v, id, hashSkeletonSearchPost)\n}\n\nexport interface SkeletonSearchActor {\n  $type?: 'app.bsky.unspecced.defs#skeletonSearchActor'\n  did: string\n}\n\nconst hashSkeletonSearchActor = 'skeletonSearchActor'\n\nexport function isSkeletonSearchActor<V>(v: V) {\n  return is$typed(v, id, hashSkeletonSearchActor)\n}\n\nexport function validateSkeletonSearchActor<V>(v: V) {\n  return validate<SkeletonSearchActor & V>(v, id, hashSkeletonSearchActor)\n}\n\nexport interface SkeletonSearchStarterPack {\n  $type?: 'app.bsky.unspecced.defs#skeletonSearchStarterPack'\n  uri: string\n}\n\nconst hashSkeletonSearchStarterPack = 'skeletonSearchStarterPack'\n\nexport function isSkeletonSearchStarterPack<V>(v: V) {\n  return is$typed(v, id, hashSkeletonSearchStarterPack)\n}\n\nexport function validateSkeletonSearchStarterPack<V>(v: V) {\n  return validate<SkeletonSearchStarterPack & V>(\n    v,\n    id,\n    hashSkeletonSearchStarterPack,\n  )\n}\n\nexport interface TrendingTopic {\n  $type?: 'app.bsky.unspecced.defs#trendingTopic'\n  topic: string\n  displayName?: string\n  description?: string\n  link: string\n}\n\nconst hashTrendingTopic = 'trendingTopic'\n\nexport function isTrendingTopic<V>(v: V) {\n  return is$typed(v, id, hashTrendingTopic)\n}\n\nexport function validateTrendingTopic<V>(v: V) {\n  return validate<TrendingTopic & V>(v, id, hashTrendingTopic)\n}\n\nexport interface SkeletonTrend {\n  $type?: 'app.bsky.unspecced.defs#skeletonTrend'\n  topic: string\n  displayName: string\n  link: string\n  startedAt: string\n  postCount: number\n  status?: 'hot' | (string & {})\n  category?: string\n  dids: string[]\n}\n\nconst hashSkeletonTrend = 'skeletonTrend'\n\nexport function isSkeletonTrend<V>(v: V) {\n  return is$typed(v, id, hashSkeletonTrend)\n}\n\nexport function validateSkeletonTrend<V>(v: V) {\n  return validate<SkeletonTrend & V>(v, id, hashSkeletonTrend)\n}\n\nexport interface TrendView {\n  $type?: 'app.bsky.unspecced.defs#trendView'\n  topic: string\n  displayName: string\n  link: string\n  startedAt: string\n  postCount: number\n  status?: 'hot' | (string & {})\n  category?: string\n  actors: AppBskyActorDefs.ProfileViewBasic[]\n}\n\nconst hashTrendView = 'trendView'\n\nexport function isTrendView<V>(v: V) {\n  return is$typed(v, id, hashTrendView)\n}\n\nexport function validateTrendView<V>(v: V) {\n  return validate<TrendView & V>(v, id, hashTrendView)\n}\n\nexport interface ThreadItemPost {\n  $type?: 'app.bsky.unspecced.defs#threadItemPost'\n  post: AppBskyFeedDefs.PostView\n  /** This post has more parents that were not present in the response. This is just a boolean, without the number of parents. */\n  moreParents: boolean\n  /** This post has more replies that were not present in the response. This is a numeric value, which is best-effort and might not be accurate. */\n  moreReplies: number\n  /** This post is part of a contiguous thread by the OP from the thread root. Many different OP threads can happen in the same thread. */\n  opThread: boolean\n  /** The threadgate created by the author indicates this post as a reply to be hidden for everyone consuming the thread. */\n  hiddenByThreadgate: boolean\n  /** This is by an account muted by the viewer requesting it. */\n  mutedByViewer: boolean\n}\n\nconst hashThreadItemPost = 'threadItemPost'\n\nexport function isThreadItemPost<V>(v: V) {\n  return is$typed(v, id, hashThreadItemPost)\n}\n\nexport function validateThreadItemPost<V>(v: V) {\n  return validate<ThreadItemPost & V>(v, id, hashThreadItemPost)\n}\n\nexport interface ThreadItemNoUnauthenticated {\n  $type?: 'app.bsky.unspecced.defs#threadItemNoUnauthenticated'\n}\n\nconst hashThreadItemNoUnauthenticated = 'threadItemNoUnauthenticated'\n\nexport function isThreadItemNoUnauthenticated<V>(v: V) {\n  return is$typed(v, id, hashThreadItemNoUnauthenticated)\n}\n\nexport function validateThreadItemNoUnauthenticated<V>(v: V) {\n  return validate<ThreadItemNoUnauthenticated & V>(\n    v,\n    id,\n    hashThreadItemNoUnauthenticated,\n  )\n}\n\nexport interface ThreadItemNotFound {\n  $type?: 'app.bsky.unspecced.defs#threadItemNotFound'\n}\n\nconst hashThreadItemNotFound = 'threadItemNotFound'\n\nexport function isThreadItemNotFound<V>(v: V) {\n  return is$typed(v, id, hashThreadItemNotFound)\n}\n\nexport function validateThreadItemNotFound<V>(v: V) {\n  return validate<ThreadItemNotFound & V>(v, id, hashThreadItemNotFound)\n}\n\nexport interface ThreadItemBlocked {\n  $type?: 'app.bsky.unspecced.defs#threadItemBlocked'\n  author: AppBskyFeedDefs.BlockedAuthor\n}\n\nconst hashThreadItemBlocked = 'threadItemBlocked'\n\nexport function isThreadItemBlocked<V>(v: V) {\n  return is$typed(v, id, hashThreadItemBlocked)\n}\n\nexport function validateThreadItemBlocked<V>(v: V) {\n  return validate<ThreadItemBlocked & V>(v, id, hashThreadItemBlocked)\n}\n\n/** The computed state of the age assurance process, returned to the user in question on certain authenticated requests. */\nexport interface AgeAssuranceState {\n  $type?: 'app.bsky.unspecced.defs#ageAssuranceState'\n  /** The timestamp when this state was last updated. */\n  lastInitiatedAt?: string\n  /** The status of the age assurance process. */\n  status: 'unknown' | 'pending' | 'assured' | 'blocked' | (string & {})\n}\n\nconst hashAgeAssuranceState = 'ageAssuranceState'\n\nexport function isAgeAssuranceState<V>(v: V) {\n  return is$typed(v, id, hashAgeAssuranceState)\n}\n\nexport function validateAgeAssuranceState<V>(v: V) {\n  return validate<AgeAssuranceState & V>(v, id, hashAgeAssuranceState)\n}\n\n/** Object used to store age assurance data in stash. */\nexport interface AgeAssuranceEvent {\n  $type?: 'app.bsky.unspecced.defs#ageAssuranceEvent'\n  /** The date and time of this write operation. */\n  createdAt: string\n  /** The status of the age assurance process. */\n  status: 'unknown' | 'pending' | 'assured' | (string & {})\n  /** The unique identifier for this instance of the age assurance flow, in UUID format. */\n  attemptId: string\n  /** The email used for AA. */\n  email?: string\n  /** The IP address used when initiating the AA flow. */\n  initIp?: string\n  /** The user agent used when initiating the AA flow. */\n  initUa?: string\n  /** The IP address used when completing the AA flow. */\n  completeIp?: string\n  /** The user agent used when completing the AA flow. */\n  completeUa?: string\n}\n\nconst hashAgeAssuranceEvent = 'ageAssuranceEvent'\n\nexport function isAgeAssuranceEvent<V>(v: V) {\n  return is$typed(v, id, hashAgeAssuranceEvent)\n}\n\nexport function validateAgeAssuranceEvent<V>(v: V) {\n  return validate<AgeAssuranceEvent & V>(v, id, hashAgeAssuranceEvent)\n}\n"]}