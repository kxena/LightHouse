{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":";;AAKA,oDAIC;AAID,sBAMC;AAED,8BAEC;AAED,sBAGC;AAGD,wCAGC;AAED,gDAQC;AAED,wCAGC;AA5CD,SAAgB,oBAAoB,CAClC,KAAQ;IAER,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAA;AACrD,CAAC;AAID,SAAgB,KAAK,CAAmB,KAAQ;IAC9C,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC;QAAE,OAAO,KAAK,CAAA;IAC3C,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC;QAAE,OAAO,KAAK,CAAA;IAClC,IAAI,KAAK,CAAC,MAAM,GAAG,IAAI;QAAE,OAAO,KAAK,CAAA;IACrC,MAAM,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC,CAAA;IACnC,OAAO,KAAK,GAAG,CAAC,IAAI,KAAK,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,CAAA;AAC9C,CAAC;AAED,SAAgB,SAAS,CAAC,KAAa;IACrC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;QAAE,MAAM,IAAI,SAAS,CAAC,gBAAgB,KAAK,EAAE,CAAC,CAAA;AACjE,CAAC;AAED,SAAgB,KAAK,CAAmB,KAAQ;IAC9C,SAAS,CAAC,KAAK,CAAC,CAAA;IAChB,OAAO,KAAK,CAAA;AACd,CAAC;AAGD,SAAgB,cAAc,CAAC,KAAa;IAC1C,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IAC3D,OAAO,MAAM,KAAK,CAAC,IAAI,KAAK,CAAC,GAAG,CAAC,IAAI,oBAAoB,CAAC,OAAO,CAAC,CAAA;AACpE,CAAC;AAED,SAAgB,kBAAkB,CAChC,KAAa;IAEb,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE,CAAC;QAC3B,MAAM,IAAI,SAAS,CACjB,0BAA0B,KAAK,kDAAkD,CAClF,CAAA;IACH,CAAC;AACH,CAAC;AAED,SAAgB,cAAc,CAAmB,KAAQ;IACvD,kBAAkB,CAAC,KAAK,CAAC,CAAA;IACzB,OAAO,KAAK,CAAA;AACd,CAAC","sourcesContent":["import { AppBskyActorDefs } from './client'\nimport { ModerationPrefs } from './moderation/types'\n\nexport type UnknownServiceType = string & NonNullable<unknown>\nexport type AtprotoServiceType = 'atproto_labeler' | UnknownServiceType\nexport function isAtprotoServiceType<T extends string>(\n  input: T,\n): input is T & AtprotoServiceType {\n  return !input.includes(' ') && !input.includes('#')\n}\n\n// @TODO use tools from @atproto/did\nexport type Did = `did:${string}:${string}`\nexport function isDid<T extends string>(input: T): input is T & Did {\n  if (!input.startsWith('did:')) return false\n  if (input.length < 8) return false\n  if (input.length > 2048) return false\n  const msidx = input.indexOf(':', 4)\n  return msidx > 4 && msidx < input.length - 1\n}\n\nexport function assertDid(input: string): asserts input is Did {\n  if (!isDid(input)) throw new TypeError(`Invalid DID: ${input}`)\n}\n\nexport function asDid<T extends string>(input: T) {\n  assertDid(input)\n  return input\n}\n\nexport type AtprotoProxy = `${Did}#${AtprotoServiceType}`\nexport function isAtprotoProxy(input: string): input is AtprotoProxy {\n  const { length, [0]: did, [1]: service } = input.split('#')\n  return length === 2 && isDid(did) && isAtprotoServiceType(service)\n}\n\nexport function assertAtprotoProxy(\n  input: string,\n): asserts input is AtprotoProxy {\n  if (!isAtprotoProxy(input)) {\n    throw new TypeError(\n      `Invalid DID reference: ${input} (must be of the form did:example:alice#service)`,\n    )\n  }\n}\n\nexport function asAtprotoProxy<T extends string>(input: T) {\n  assertAtprotoProxy(input)\n  return input\n}\n\n/**\n * Used by the PersistSessionHandler to indicate what change occurred\n */\nexport type AtpSessionEvent =\n  | 'create'\n  | 'create-failed'\n  | 'update'\n  | 'expired'\n  | 'network-error'\n\n/**\n * Used by AtpAgent to store active sessions\n */\nexport interface AtpSessionData {\n  refreshJwt: string\n  accessJwt: string\n  handle: string\n  did: string\n  email?: string\n  emailConfirmed?: boolean\n  emailAuthFactor?: boolean\n  active: boolean\n  status?: string\n}\n\n/**\n * Handler signature passed to AtpAgent to store session data\n */\nexport type AtpPersistSessionHandler = (\n  evt: AtpSessionEvent,\n  session: AtpSessionData | undefined,\n) => void | Promise<void>\n\n/**\n * AtpAgent login() opts\n */\nexport interface AtpAgentLoginOpts {\n  identifier: string\n  password: string\n  authFactorToken?: string | undefined\n  allowTakendown?: boolean\n}\n\n/**\n * AtpAgent global config opts\n */\nexport interface AtpAgentGlobalOpts {\n  appLabelers?: string[]\n}\n\n/**\n * Bluesky feed view preferences\n */\n\nexport interface BskyFeedViewPreference {\n  hideReplies: boolean\n  hideRepliesByUnfollowed: boolean\n  hideRepliesByLikeCount: number\n  hideReposts: boolean\n  hideQuotePosts: boolean\n  [key: string]: any\n}\n\n/**\n * Bluesky thread view preferences\n */\nexport interface BskyThreadViewPreference {\n  sort: string\n  prioritizeFollowedUsers: boolean\n  [key: string]: any\n}\n\n/**\n * Bluesky interests preferences\n */\nexport interface BskyInterestsPreference {\n  tags: string[]\n  [key: string]: any\n}\n\n/**\n * Bluesky preferences\n */\nexport interface BskyPreferences {\n  /**\n   * @deprecated use `savedFeeds`\n   */\n  feeds: {\n    saved?: string[]\n    pinned?: string[]\n  }\n  savedFeeds: AppBskyActorDefs.SavedFeed[]\n  feedViewPrefs: Record<string, BskyFeedViewPreference>\n  threadViewPrefs: BskyThreadViewPreference\n  moderationPrefs: ModerationPrefs\n  birthDate: Date | undefined\n  interests: BskyInterestsPreference\n  bskyAppState: {\n    queuedNudges: string[]\n    activeProgressGuide: AppBskyActorDefs.BskyAppProgressGuide | undefined\n    nuxs: AppBskyActorDefs.Nux[]\n  }\n  postInteractionSettings: AppBskyActorDefs.PostInteractionSettingsPref\n  verificationPrefs: AppBskyActorDefs.VerificationPrefs\n}\n"]}