{"version":3,"file":"mocker.js","sourceRoot":"","sources":["../src/mocker.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AppBskyActorDefs,\n  AppBskyEmbedRecord,\n  AppBskyFeedDefs,\n  AppBskyFeedPost,\n  AppBskyGraphDefs,\n  AppBskyNotificationListNotifications,\n  ComAtprotoLabelDefs,\n} from './client'\nimport { $Typed, Un$Typed } from './client/util'\n\nconst FAKE_CID = 'bafyreiclp443lavogvhj3d2ob2cxbfuscni2k5jk7bebjzg7khl3esabwq'\n\nexport const mock = {\n  post({\n    text,\n    facets,\n    reply,\n    embed,\n  }: {\n    text: string\n    facets?: AppBskyFeedPost.Record['facets']\n    reply?: AppBskyFeedPost.ReplyRef\n    embed?: AppBskyFeedPost.Record['embed']\n  }): $Typed<AppBskyFeedPost.Record> {\n    return {\n      $type: 'app.bsky.feed.post',\n      text,\n      facets,\n      reply,\n      embed,\n      langs: ['en'],\n      createdAt: new Date().toISOString(),\n    }\n  },\n\n  postView({\n    record,\n    author,\n    embed,\n    replyCount,\n    repostCount,\n    likeCount,\n    viewer,\n    labels,\n  }: {\n    record: AppBskyFeedPost.Record\n    author: AppBskyActorDefs.ProfileViewBasic\n    embed?: AppBskyFeedDefs.PostView['embed']\n    replyCount?: number\n    repostCount?: number\n    likeCount?: number\n    viewer?: AppBskyFeedDefs.ViewerState\n    labels?: ComAtprotoLabelDefs.Label[]\n  }): $Typed<AppBskyFeedDefs.PostView> {\n    return {\n      $type: 'app.bsky.feed.defs#postView',\n      uri: `at://${author.did}/app.bsky.feed.post/fake`,\n      cid: FAKE_CID,\n      author,\n      record,\n      embed,\n      replyCount,\n      repostCount,\n      likeCount,\n      indexedAt: new Date().toISOString(),\n      viewer,\n      labels,\n    }\n  },\n\n  embedRecordView({\n    record,\n    author,\n    labels,\n  }: {\n    record: AppBskyFeedPost.Record\n    author: AppBskyActorDefs.ProfileViewBasic\n    labels?: ComAtprotoLabelDefs.Label[]\n  }): $Typed<AppBskyEmbedRecord.View> {\n    return {\n      $type: 'app.bsky.embed.record#view',\n      record: {\n        $type: 'app.bsky.embed.record#viewRecord',\n        uri: `at://${author.did}/app.bsky.feed.post/fake`,\n        cid: FAKE_CID,\n        author,\n        value: record,\n        labels,\n        indexedAt: new Date().toISOString(),\n      },\n    }\n  },\n\n  profileViewBasic({\n    handle,\n    displayName,\n    description,\n    viewer,\n    labels,\n  }: {\n    handle: string\n    displayName?: string\n    description?: string\n    viewer?: AppBskyActorDefs.ViewerState\n    labels?: ComAtprotoLabelDefs.Label[]\n  }): AppBskyActorDefs.ProfileViewBasic {\n    return {\n      did: `did:web:${handle}`,\n      handle,\n      displayName,\n      // @ts-expect-error technically not in ProfileViewBasic but useful in some cases\n      description,\n      viewer,\n      labels,\n    }\n  },\n\n  actorViewerState({\n    muted,\n    mutedByList,\n    blockedBy,\n    blocking,\n    blockingByList,\n    following,\n    followedBy,\n  }: {\n    muted?: boolean\n    mutedByList?: AppBskyGraphDefs.ListViewBasic\n    blockedBy?: boolean\n    blocking?: string\n    blockingByList?: AppBskyGraphDefs.ListViewBasic\n    following?: string\n    followedBy?: string\n  }): AppBskyActorDefs.ViewerState {\n    return {\n      muted,\n      mutedByList,\n      blockedBy,\n      blocking,\n      blockingByList,\n      following,\n      followedBy,\n    }\n  },\n\n  listViewBasic({ name }: { name: string }): AppBskyGraphDefs.ListViewBasic {\n    return {\n      uri: 'at://did:plc:fake/app.bsky.graph.list/fake',\n      cid: FAKE_CID,\n      name,\n      purpose: 'app.bsky.graph.defs#modlist',\n      indexedAt: new Date().toISOString(),\n    }\n  },\n\n  replyNotification({\n    author,\n    record,\n    labels,\n  }: {\n    record: AppBskyFeedPost.Record\n    author: Un$Typed<AppBskyActorDefs.ProfileViewBasic>\n    labels?: ComAtprotoLabelDefs.Label[]\n  }): AppBskyNotificationListNotifications.Notification {\n    return {\n      uri: `at://${author.did}/app.bsky.feed.post/fake`,\n      cid: FAKE_CID,\n      author,\n      reason: 'reply',\n      reasonSubject: `at://${author.did}/app.bsky.feed.post/fake-parent`,\n      record,\n      isRead: false,\n      indexedAt: new Date().toISOString(),\n      labels,\n    }\n  },\n\n  followNotification({\n    author,\n    subjectDid,\n    labels,\n  }: {\n    author: Un$Typed<AppBskyActorDefs.ProfileViewBasic>\n    subjectDid: string\n    labels?: ComAtprotoLabelDefs.Label[]\n  }): AppBskyNotificationListNotifications.Notification {\n    return {\n      uri: `at://${author.did}/app.bsky.graph.follow/fake`,\n      cid: FAKE_CID,\n      author,\n      reason: 'follow',\n      record: {\n        $type: 'app.bsky.graph.follow',\n        createdAt: new Date().toISOString(),\n        subject: subjectDid,\n      },\n      isRead: false,\n      indexedAt: new Date().toISOString(),\n      labels,\n    }\n  },\n\n  label({\n    val,\n    uri,\n    src,\n  }: {\n    val: string\n    uri: string\n    src?: string\n  }): ComAtprotoLabelDefs.Label {\n    return {\n      src: src || 'did:plc:fake-labeler',\n      uri,\n      val,\n      cts: new Date().toISOString(),\n    }\n  },\n}\n"]}