{"version":3,"file":"unicode.js","sourceRoot":"","sources":["../../src/rich-text/unicode.ts"],"names":[],"mappings":";AAAA;;;;;;;GAOG;;;AAEH,oDAAiD;AAEjD,MAAM,OAAO,GAAG,IAAI,WAAW,EAAE,CAAA;AACjC,MAAM,OAAO,GAAG,IAAI,WAAW,EAAE,CAAA;AAEjC,MAAa,aAAa;IAKxB,YAAY,KAAa;QAJzB;;;;;WAAa;QACb;;;;;WAAgB;QACR;;;;;WAAiC;QAGvC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAA;QAClB,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;IACnC,CAAC;IAED,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,IAAI,CAAC,UAAU,CAAA;IAC7B,CAAC;IAED,IAAI,cAAc;QAChB,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;YACvB,IAAI,CAAC,YAAY,GAAG,IAAA,wBAAW,EAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QAC7C,CAAC;QACD,OAAO,IAAI,CAAC,YAAY,CAAA;IAC1B,CAAC;IAED,KAAK,CAAC,KAAc,EAAE,GAAY;QAChC,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAA;IACpD,CAAC;IAED,qBAAqB,CAAC,CAAS;QAC7B,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,UAAU,CAAA;IAC1D,CAAC;IAED,QAAQ;QACN,OAAO,IAAI,CAAC,KAAK,CAAA;IACnB,CAAC;CACF;AAhCD,sCAgCC","sourcesContent":["/**\n * Javascript uses utf16-encoded strings while most environments and specs\n * have standardized around utf8 (including JSON).\n *\n * After some lengthy debated we decided that richtext facets need to use\n * utf8 indices. This means we need tools to convert indices between utf8\n * and utf16, and that's precisely what this library handles.\n */\n\nimport { graphemeLen } from '@atproto/common-web'\n\nconst encoder = new TextEncoder()\nconst decoder = new TextDecoder()\n\nexport class UnicodeString {\n  utf16: string\n  utf8: Uint8Array\n  private _graphemeLen?: number | undefined\n\n  constructor(utf16: string) {\n    this.utf16 = utf16\n    this.utf8 = encoder.encode(utf16)\n  }\n\n  get length() {\n    return this.utf8.byteLength\n  }\n\n  get graphemeLength() {\n    if (!this._graphemeLen) {\n      this._graphemeLen = graphemeLen(this.utf16)\n    }\n    return this._graphemeLen\n  }\n\n  slice(start?: number, end?: number): string {\n    return decoder.decode(this.utf8.slice(start, end))\n  }\n\n  utf16IndexToUtf8Index(i: number) {\n    return encoder.encode(this.utf16.slice(0, i)).byteLength\n  }\n\n  toString() {\n    return this.utf16\n  }\n}\n"]}