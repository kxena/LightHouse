{"version":3,"file":"threadgate.js","sourceRoot":"","sources":["../../../../../../src/client/types/app/bsky/feed/threadgate.ts"],"names":[],"mappings":";;AAoCA,4BAEC;AAED,wCAEC;AASD,sCAEC;AAED,kDAEC;AASD,wCAEC;AAED,oDAEC;AASD,0CAEC;AAED,sDAEC;AAUD,gCAEC;AAED,4CAEC;AAlGD,mDAA4D;AAC5D,2CAIyB;AAEzB,MAAM,QAAQ,GAAG,eAAS,EACxB,QAAQ,GAAG,mBAAS,CAAA;AACtB,MAAM,EAAE,GAAG,0BAA0B,CAAA;AAoBrC,MAAM,UAAU,GAAG,MAAM,CAAA;AAEzB,SAAgB,QAAQ,CAAI,CAAI;IAC9B,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,UAAU,CAAC,CAAA;AACpC,CAAC;AAED,SAAgB,cAAc,CAAI,CAAI;IACpC,OAAO,QAAQ,CAAa,CAAC,EAAE,EAAE,EAAE,UAAU,EAAE,IAAI,CAAC,CAAA;AACtD,CAAC;AAOD,MAAM,eAAe,GAAG,aAAa,CAAA;AAErC,SAAgB,aAAa,CAAI,CAAI;IACnC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,eAAe,CAAC,CAAA;AACzC,CAAC;AAED,SAAgB,mBAAmB,CAAI,CAAI;IACzC,OAAO,QAAQ,CAAkB,CAAC,EAAE,EAAE,EAAE,eAAe,CAAC,CAAA;AAC1D,CAAC;AAOD,MAAM,gBAAgB,GAAG,cAAc,CAAA;AAEvC,SAAgB,cAAc,CAAI,CAAI;IACpC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,gBAAgB,CAAC,CAAA;AAC1C,CAAC;AAED,SAAgB,oBAAoB,CAAI,CAAI;IAC1C,OAAO,QAAQ,CAAmB,CAAC,EAAE,EAAE,EAAE,gBAAgB,CAAC,CAAA;AAC5D,CAAC;AAOD,MAAM,iBAAiB,GAAG,eAAe,CAAA;AAEzC,SAAgB,eAAe,CAAI,CAAI;IACrC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAA;AAC3C,CAAC;AAED,SAAgB,qBAAqB,CAAI,CAAI;IAC3C,OAAO,QAAQ,CAAoB,CAAC,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAA;AAC9D,CAAC;AAQD,MAAM,YAAY,GAAG,UAAU,CAAA;AAE/B,SAAgB,UAAU,CAAI,CAAI;IAChC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,YAAY,CAAC,CAAA;AACtC,CAAC;AAED,SAAgB,gBAAgB,CAAI,CAAI;IACtC,OAAO,QAAQ,CAAe,CAAC,EAAE,EAAE,EAAE,YAAY,CAAC,CAAA;AACpD,CAAC","sourcesContent":["/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { type ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { CID } from 'multiformats/cid'\nimport { validate as _validate } from '../../../../lexicons'\nimport {\n  type $Typed,\n  is$typed as _is$typed,\n  type OmitKey,\n} from '../../../../util'\n\nconst is$typed = _is$typed,\n  validate = _validate\nconst id = 'app.bsky.feed.threadgate'\n\nexport interface Record {\n  $type: 'app.bsky.feed.threadgate'\n  /** Reference (AT-URI) to the post record. */\n  post: string\n  /** List of rules defining who can reply to this post. If value is an empty array, no one can reply. If value is undefined, anyone can reply. */\n  allow?: (\n    | $Typed<MentionRule>\n    | $Typed<FollowerRule>\n    | $Typed<FollowingRule>\n    | $Typed<ListRule>\n    | { $type: string }\n  )[]\n  createdAt: string\n  /** List of hidden reply URIs. */\n  hiddenReplies?: string[]\n  [k: string]: unknown\n}\n\nconst hashRecord = 'main'\n\nexport function isRecord<V>(v: V) {\n  return is$typed(v, id, hashRecord)\n}\n\nexport function validateRecord<V>(v: V) {\n  return validate<Record & V>(v, id, hashRecord, true)\n}\n\n/** Allow replies from actors mentioned in your post. */\nexport interface MentionRule {\n  $type?: 'app.bsky.feed.threadgate#mentionRule'\n}\n\nconst hashMentionRule = 'mentionRule'\n\nexport function isMentionRule<V>(v: V) {\n  return is$typed(v, id, hashMentionRule)\n}\n\nexport function validateMentionRule<V>(v: V) {\n  return validate<MentionRule & V>(v, id, hashMentionRule)\n}\n\n/** Allow replies from actors who follow you. */\nexport interface FollowerRule {\n  $type?: 'app.bsky.feed.threadgate#followerRule'\n}\n\nconst hashFollowerRule = 'followerRule'\n\nexport function isFollowerRule<V>(v: V) {\n  return is$typed(v, id, hashFollowerRule)\n}\n\nexport function validateFollowerRule<V>(v: V) {\n  return validate<FollowerRule & V>(v, id, hashFollowerRule)\n}\n\n/** Allow replies from actors you follow. */\nexport interface FollowingRule {\n  $type?: 'app.bsky.feed.threadgate#followingRule'\n}\n\nconst hashFollowingRule = 'followingRule'\n\nexport function isFollowingRule<V>(v: V) {\n  return is$typed(v, id, hashFollowingRule)\n}\n\nexport function validateFollowingRule<V>(v: V) {\n  return validate<FollowingRule & V>(v, id, hashFollowingRule)\n}\n\n/** Allow replies from actors on a list. */\nexport interface ListRule {\n  $type?: 'app.bsky.feed.threadgate#listRule'\n  list: string\n}\n\nconst hashListRule = 'listRule'\n\nexport function isListRule<V>(v: V) {\n  return is$typed(v, id, hashListRule)\n}\n\nexport function validateListRule<V>(v: V) {\n  return validate<ListRule & V>(v, id, hashListRule)\n}\n"]}