{"version":3,"file":"postgate.js","sourceRoot":"","sources":["../../../../../../src/client/types/app/bsky/feed/postgate.ts"],"names":[],"mappings":";;AA8BA,4BAEC;AAED,wCAEC;AASD,sCAEC;AAED,kDAEC;AA9CD,mDAA4D;AAC5D,2CAIyB;AAEzB,MAAM,QAAQ,GAAG,eAAS,EACxB,QAAQ,GAAG,mBAAS,CAAA;AACtB,MAAM,EAAE,GAAG,wBAAwB,CAAA;AAcnC,MAAM,UAAU,GAAG,MAAM,CAAA;AAEzB,SAAgB,QAAQ,CAAI,CAAI;IAC9B,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,UAAU,CAAC,CAAA;AACpC,CAAC;AAED,SAAgB,cAAc,CAAI,CAAI;IACpC,OAAO,QAAQ,CAAa,CAAC,EAAE,EAAE,EAAE,UAAU,EAAE,IAAI,CAAC,CAAA;AACtD,CAAC;AAOD,MAAM,eAAe,GAAG,aAAa,CAAA;AAErC,SAAgB,aAAa,CAAI,CAAI;IACnC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,eAAe,CAAC,CAAA;AACzC,CAAC;AAED,SAAgB,mBAAmB,CAAI,CAAI;IACzC,OAAO,QAAQ,CAAkB,CAAC,EAAE,EAAE,EAAE,eAAe,CAAC,CAAA;AAC1D,CAAC","sourcesContent":["/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { type ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { CID } from 'multiformats/cid'\nimport { validate as _validate } from '../../../../lexicons'\nimport {\n  type $Typed,\n  is$typed as _is$typed,\n  type OmitKey,\n} from '../../../../util'\n\nconst is$typed = _is$typed,\n  validate = _validate\nconst id = 'app.bsky.feed.postgate'\n\nexport interface Record {\n  $type: 'app.bsky.feed.postgate'\n  createdAt: string\n  /** Reference (AT-URI) to the post record. */\n  post: string\n  /** List of AT-URIs embedding this post that the author has detached from. */\n  detachedEmbeddingUris?: string[]\n  /** List of rules defining who can embed this post. If value is an empty array or is undefined, no particular rules apply and anyone can embed. */\n  embeddingRules?: ($Typed<DisableRule> | { $type: string })[]\n  [k: string]: unknown\n}\n\nconst hashRecord = 'main'\n\nexport function isRecord<V>(v: V) {\n  return is$typed(v, id, hashRecord)\n}\n\nexport function validateRecord<V>(v: V) {\n  return validate<Record & V>(v, id, hashRecord, true)\n}\n\n/** Disables embedding of this post. */\nexport interface DisableRule {\n  $type?: 'app.bsky.feed.postgate#disableRule'\n}\n\nconst hashDisableRule = 'disableRule'\n\nexport function isDisableRule<V>(v: V) {\n  return is$typed(v, id, hashDisableRule)\n}\n\nexport function validateDisableRule<V>(v: V) {\n  return validate<DisableRule & V>(v, id, hashDisableRule)\n}\n"]}