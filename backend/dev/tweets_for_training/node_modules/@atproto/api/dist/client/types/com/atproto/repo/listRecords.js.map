{"version":3,"file":"listRecords.js","sourceRoot":"","sources":["../../../../../../src/client/types/com/atproto/repo/listRecords.ts"],"names":[],"mappings":";;AA8CA,gCAEC;AAWD,4BAEC;AAED,wCAEC;AA3DD,mDAA4D;AAC5D,2CAIyB;AAEzB,MAAM,QAAQ,GAAG,eAAS,EACxB,QAAQ,GAAG,mBAAS,CAAA;AACtB,MAAM,EAAE,GAAG,8BAA8B,CAAA;AA+BzC,SAAgB,UAAU,CAAC,CAAM;IAC/B,OAAO,CAAC,CAAA;AACV,CAAC;AASD,MAAM,UAAU,GAAG,QAAQ,CAAA;AAE3B,SAAgB,QAAQ,CAAI,CAAI;IAC9B,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,UAAU,CAAC,CAAA;AACpC,CAAC;AAED,SAAgB,cAAc,CAAI,CAAI;IACpC,OAAO,QAAQ,CAAa,CAAC,EAAE,EAAE,EAAE,UAAU,CAAC,CAAA;AAChD,CAAC","sourcesContent":["/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { HeadersMap, XRPCError } from '@atproto/xrpc'\nimport { type ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { CID } from 'multiformats/cid'\nimport { validate as _validate } from '../../../../lexicons'\nimport {\n  type $Typed,\n  is$typed as _is$typed,\n  type OmitKey,\n} from '../../../../util'\n\nconst is$typed = _is$typed,\n  validate = _validate\nconst id = 'com.atproto.repo.listRecords'\n\nexport type QueryParams = {\n  /** The handle or DID of the repo. */\n  repo: string\n  /** The NSID of the record type. */\n  collection: string\n  /** The number of records to return. */\n  limit?: number\n  cursor?: string\n  /** Flag to reverse the order of the returned records. */\n  reverse?: boolean\n}\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  records: Record[]\n}\n\nexport interface CallOptions {\n  signal?: AbortSignal\n  headers?: HeadersMap\n}\n\nexport interface Response {\n  success: boolean\n  headers: HeadersMap\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  return e\n}\n\nexport interface Record {\n  $type?: 'com.atproto.repo.listRecords#record'\n  uri: string\n  cid: string\n  value: { [_ in string]: unknown }\n}\n\nconst hashRecord = 'record'\n\nexport function isRecord<V>(v: V) {\n  return is$typed(v, id, hashRecord)\n}\n\nexport function validateRecord<V>(v: V) {\n  return validate<Record & V>(v, id, hashRecord)\n}\n"]}