{"version":3,"file":"putPreferencesV2.js","sourceRoot":"","sources":["../../../../../../src/client/types/app/bsky/notification/putPreferencesV2.ts"],"names":[],"mappings":";;AAqDA,gCAEC;AAjDD,mDAA4D;AAC5D,2CAIyB;AAGzB,MAAM,QAAQ,GAAG,eAAS,EACxB,QAAQ,GAAG,mBAAS,CAAA;AACtB,MAAM,EAAE,GAAG,wCAAwC,CAAA;AAqCnD,SAAgB,UAAU,CAAC,CAAM;IAC/B,OAAO,CAAC,CAAA;AACV,CAAC","sourcesContent":["/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { HeadersMap, XRPCError } from '@atproto/xrpc'\nimport { type ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { CID } from 'multiformats/cid'\nimport { validate as _validate } from '../../../../lexicons'\nimport {\n  type $Typed,\n  is$typed as _is$typed,\n  type OmitKey,\n} from '../../../../util'\nimport type * as AppBskyNotificationDefs from './defs.js'\n\nconst is$typed = _is$typed,\n  validate = _validate\nconst id = 'app.bsky.notification.putPreferencesV2'\n\nexport type QueryParams = {}\n\nexport interface InputSchema {\n  chat?: AppBskyNotificationDefs.ChatPreference\n  follow?: AppBskyNotificationDefs.FilterablePreference\n  like?: AppBskyNotificationDefs.FilterablePreference\n  likeViaRepost?: AppBskyNotificationDefs.FilterablePreference\n  mention?: AppBskyNotificationDefs.FilterablePreference\n  quote?: AppBskyNotificationDefs.FilterablePreference\n  reply?: AppBskyNotificationDefs.FilterablePreference\n  repost?: AppBskyNotificationDefs.FilterablePreference\n  repostViaRepost?: AppBskyNotificationDefs.FilterablePreference\n  starterpackJoined?: AppBskyNotificationDefs.Preference\n  subscribedPost?: AppBskyNotificationDefs.Preference\n  unverified?: AppBskyNotificationDefs.Preference\n  verified?: AppBskyNotificationDefs.Preference\n}\n\nexport interface OutputSchema {\n  preferences: AppBskyNotificationDefs.Preferences\n}\n\nexport interface CallOptions {\n  signal?: AbortSignal\n  headers?: HeadersMap\n  qp?: QueryParams\n  encoding?: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: HeadersMap\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  return e\n}\n"]}