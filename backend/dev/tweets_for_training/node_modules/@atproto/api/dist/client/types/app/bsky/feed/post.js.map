{"version":3,"file":"post.js","sourceRoot":"","sources":["../../../../../../src/client/types/app/bsky/feed/post.ts"],"names":[],"mappings":";;AAoDA,4BAEC;AAED,wCAEC;AAUD,gCAEC;AAED,4CAEC;AAaD,4BAEC;AAED,wCAEC;AAWD,kCAEC;AAED,8CAEC;AAzGD,mDAA4D;AAC5D,2CAIyB;AAUzB,MAAM,QAAQ,GAAG,eAAS,EACxB,QAAQ,GAAG,mBAAS,CAAA;AACtB,MAAM,EAAE,GAAG,oBAAoB,CAAA;AA4B/B,MAAM,UAAU,GAAG,MAAM,CAAA;AAEzB,SAAgB,QAAQ,CAAI,CAAI;IAC9B,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,UAAU,CAAC,CAAA;AACpC,CAAC;AAED,SAAgB,cAAc,CAAI,CAAI;IACpC,OAAO,QAAQ,CAAa,CAAC,EAAE,EAAE,EAAE,UAAU,EAAE,IAAI,CAAC,CAAA;AACtD,CAAC;AAQD,MAAM,YAAY,GAAG,UAAU,CAAA;AAE/B,SAAgB,UAAU,CAAI,CAAI;IAChC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,YAAY,CAAC,CAAA;AACtC,CAAC;AAED,SAAgB,gBAAgB,CAAI,CAAI;IACtC,OAAO,QAAQ,CAAe,CAAC,EAAE,EAAE,EAAE,YAAY,CAAC,CAAA;AACpD,CAAC;AAWD,MAAM,UAAU,GAAG,QAAQ,CAAA;AAE3B,SAAgB,QAAQ,CAAI,CAAI;IAC9B,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,UAAU,CAAC,CAAA;AACpC,CAAC;AAED,SAAgB,cAAc,CAAI,CAAI;IACpC,OAAO,QAAQ,CAAa,CAAC,EAAE,EAAE,EAAE,UAAU,CAAC,CAAA;AAChD,CAAC;AASD,MAAM,aAAa,GAAG,WAAW,CAAA;AAEjC,SAAgB,WAAW,CAAI,CAAI;IACjC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,aAAa,CAAC,CAAA;AACvC,CAAC;AAED,SAAgB,iBAAiB,CAAI,CAAI;IACvC,OAAO,QAAQ,CAAgB,CAAC,EAAE,EAAE,EAAE,aAAa,CAAC,CAAA;AACtD,CAAC","sourcesContent":["/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { type ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { CID } from 'multiformats/cid'\nimport { validate as _validate } from '../../../../lexicons'\nimport {\n  type $Typed,\n  is$typed as _is$typed,\n  type OmitKey,\n} from '../../../../util'\nimport type * as AppBskyRichtextFacet from '../richtext/facet.js'\nimport type * as AppBskyEmbedImages from '../embed/images.js'\nimport type * as AppBskyEmbedVideo from '../embed/video.js'\nimport type * as AppBskyEmbedExternal from '../embed/external.js'\nimport type * as AppBskyEmbedRecord from '../embed/record.js'\nimport type * as AppBskyEmbedRecordWithMedia from '../embed/recordWithMedia.js'\nimport type * as ComAtprotoLabelDefs from '../../../com/atproto/label/defs.js'\nimport type * as ComAtprotoRepoStrongRef from '../../../com/atproto/repo/strongRef.js'\n\nconst is$typed = _is$typed,\n  validate = _validate\nconst id = 'app.bsky.feed.post'\n\nexport interface Record {\n  $type: 'app.bsky.feed.post'\n  /** The primary post content. May be an empty string, if there are embeds. */\n  text: string\n  /** DEPRECATED: replaced by app.bsky.richtext.facet. */\n  entities?: Entity[]\n  /** Annotations of text (mentions, URLs, hashtags, etc) */\n  facets?: AppBskyRichtextFacet.Main[]\n  reply?: ReplyRef\n  embed?:\n    | $Typed<AppBskyEmbedImages.Main>\n    | $Typed<AppBskyEmbedVideo.Main>\n    | $Typed<AppBskyEmbedExternal.Main>\n    | $Typed<AppBskyEmbedRecord.Main>\n    | $Typed<AppBskyEmbedRecordWithMedia.Main>\n    | { $type: string }\n  /** Indicates human language of post primary text content. */\n  langs?: string[]\n  labels?: $Typed<ComAtprotoLabelDefs.SelfLabels> | { $type: string }\n  /** Additional hashtags, in addition to any included in post text and facets. */\n  tags?: string[]\n  /** Client-declared timestamp when this post was originally created. */\n  createdAt: string\n  [k: string]: unknown\n}\n\nconst hashRecord = 'main'\n\nexport function isRecord<V>(v: V) {\n  return is$typed(v, id, hashRecord)\n}\n\nexport function validateRecord<V>(v: V) {\n  return validate<Record & V>(v, id, hashRecord, true)\n}\n\nexport interface ReplyRef {\n  $type?: 'app.bsky.feed.post#replyRef'\n  root: ComAtprotoRepoStrongRef.Main\n  parent: ComAtprotoRepoStrongRef.Main\n}\n\nconst hashReplyRef = 'replyRef'\n\nexport function isReplyRef<V>(v: V) {\n  return is$typed(v, id, hashReplyRef)\n}\n\nexport function validateReplyRef<V>(v: V) {\n  return validate<ReplyRef & V>(v, id, hashReplyRef)\n}\n\n/** Deprecated: use facets instead. */\nexport interface Entity {\n  $type?: 'app.bsky.feed.post#entity'\n  index: TextSlice\n  /** Expected values are 'mention' and 'link'. */\n  type: string\n  value: string\n}\n\nconst hashEntity = 'entity'\n\nexport function isEntity<V>(v: V) {\n  return is$typed(v, id, hashEntity)\n}\n\nexport function validateEntity<V>(v: V) {\n  return validate<Entity & V>(v, id, hashEntity)\n}\n\n/** Deprecated. Use app.bsky.richtext instead -- A text segment. Start is inclusive, end is exclusive. Indices are for utf16-encoded strings. */\nexport interface TextSlice {\n  $type?: 'app.bsky.feed.post#textSlice'\n  start: number\n  end: number\n}\n\nconst hashTextSlice = 'textSlice'\n\nexport function isTextSlice<V>(v: V) {\n  return is$typed(v, id, hashTextSlice)\n}\n\nexport function validateTextSlice<V>(v: V) {\n  return validate<TextSlice & V>(v, id, hashTextSlice)\n}\n"]}