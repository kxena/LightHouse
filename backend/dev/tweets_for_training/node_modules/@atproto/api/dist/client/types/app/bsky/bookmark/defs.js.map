{"version":3,"file":"defs.js","sourceRoot":"","sources":["../../../../../../src/client/types/app/bsky/bookmark/defs.ts"],"names":[],"mappings":";;AA0BA,gCAEC;AAED,4CAEC;AAeD,wCAEC;AAED,oDAEC;AAhDD,mDAA4D;AAC5D,2CAIyB;AAIzB,MAAM,QAAQ,GAAG,eAAS,EACxB,QAAQ,GAAG,mBAAS,CAAA;AACtB,MAAM,EAAE,GAAG,wBAAwB,CAAA;AAQnC,MAAM,YAAY,GAAG,UAAU,CAAA;AAE/B,SAAgB,UAAU,CAAI,CAAI;IAChC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,YAAY,CAAC,CAAA;AACtC,CAAC;AAED,SAAgB,gBAAgB,CAAI,CAAI;IACtC,OAAO,QAAQ,CAAe,CAAC,EAAE,EAAE,EAAE,YAAY,CAAC,CAAA;AACpD,CAAC;AAaD,MAAM,gBAAgB,GAAG,cAAc,CAAA;AAEvC,SAAgB,cAAc,CAAI,CAAI;IACpC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,gBAAgB,CAAC,CAAA;AAC1C,CAAC;AAED,SAAgB,oBAAoB,CAAI,CAAI;IAC1C,OAAO,QAAQ,CAAmB,CAAC,EAAE,EAAE,EAAE,gBAAgB,CAAC,CAAA;AAC5D,CAAC","sourcesContent":["/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { type ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { CID } from 'multiformats/cid'\nimport { validate as _validate } from '../../../../lexicons'\nimport {\n  type $Typed,\n  is$typed as _is$typed,\n  type OmitKey,\n} from '../../../../util'\nimport type * as ComAtprotoRepoStrongRef from '../../../com/atproto/repo/strongRef.js'\nimport type * as AppBskyFeedDefs from '../feed/defs.js'\n\nconst is$typed = _is$typed,\n  validate = _validate\nconst id = 'app.bsky.bookmark.defs'\n\n/** Object used to store bookmark data in stash. */\nexport interface Bookmark {\n  $type?: 'app.bsky.bookmark.defs#bookmark'\n  subject: ComAtprotoRepoStrongRef.Main\n}\n\nconst hashBookmark = 'bookmark'\n\nexport function isBookmark<V>(v: V) {\n  return is$typed(v, id, hashBookmark)\n}\n\nexport function validateBookmark<V>(v: V) {\n  return validate<Bookmark & V>(v, id, hashBookmark)\n}\n\nexport interface BookmarkView {\n  $type?: 'app.bsky.bookmark.defs#bookmarkView'\n  subject: ComAtprotoRepoStrongRef.Main\n  createdAt?: string\n  item:\n    | $Typed<AppBskyFeedDefs.BlockedPost>\n    | $Typed<AppBskyFeedDefs.NotFoundPost>\n    | $Typed<AppBskyFeedDefs.PostView>\n    | { $type: string }\n}\n\nconst hashBookmarkView = 'bookmarkView'\n\nexport function isBookmarkView<V>(v: V) {\n  return is$typed(v, id, hashBookmarkView)\n}\n\nexport function validateBookmarkView<V>(v: V) {\n  return validate<BookmarkView & V>(v, id, hashBookmarkView)\n}\n"]}