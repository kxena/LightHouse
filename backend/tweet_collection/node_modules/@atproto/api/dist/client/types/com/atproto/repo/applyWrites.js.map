{"version":3,"file":"applyWrites.js","sourceRoot":"","sources":["../../../../../../src/client/types/com/atproto/repo/applyWrites.ts"],"names":[],"mappings":";;;AA0DA,gCAMC;AAaD,4BAEC;AAED,wCAEC;AAYD,4BAEC;AAED,wCAEC;AAWD,4BAEC;AAED,wCAEC;AAWD,wCAEC;AAED,oDAEC;AAWD,wCAEC;AAED,oDAEC;AAQD,wCAEC;AAED,oDAEC;AAtKD;;GAEG;AACH,wCAAqD;AAGrD,mDAA4D;AAC5D,2CAIyB;AAGzB,MAAM,QAAQ,GAAG,eAAS,EACxB,QAAQ,GAAG,mBAAS,CAAA;AACtB,MAAM,EAAE,GAAG,8BAA8B,CAAA;AAoCzC,MAAa,gBAAiB,SAAQ,gBAAS;IAC7C,YAAY,GAAc;QACxB,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAA;IACxE,CAAC;CACF;AAJD,4CAIC;AAED,SAAgB,UAAU,CAAC,CAAM;IAC/B,IAAI,CAAC,YAAY,gBAAS,EAAE,CAAC;QAC3B,IAAI,CAAC,CAAC,KAAK,KAAK,aAAa;YAAE,OAAO,IAAI,gBAAgB,CAAC,CAAC,CAAC,CAAA;IAC/D,CAAC;IAED,OAAO,CAAC,CAAA;AACV,CAAC;AAWD,MAAM,UAAU,GAAG,QAAQ,CAAA;AAE3B,SAAgB,QAAQ,CAAI,CAAI;IAC9B,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,UAAU,CAAC,CAAA;AACpC,CAAC;AAED,SAAgB,cAAc,CAAI,CAAI;IACpC,OAAO,QAAQ,CAAa,CAAC,EAAE,EAAE,EAAE,UAAU,CAAC,CAAA;AAChD,CAAC;AAUD,MAAM,UAAU,GAAG,QAAQ,CAAA;AAE3B,SAAgB,QAAQ,CAAI,CAAI;IAC9B,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,UAAU,CAAC,CAAA;AACpC,CAAC;AAED,SAAgB,cAAc,CAAI,CAAI;IACpC,OAAO,QAAQ,CAAa,CAAC,EAAE,EAAE,EAAE,UAAU,CAAC,CAAA;AAChD,CAAC;AASD,MAAM,UAAU,GAAG,QAAQ,CAAA;AAE3B,SAAgB,QAAQ,CAAI,CAAI;IAC9B,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,UAAU,CAAC,CAAA;AACpC,CAAC;AAED,SAAgB,cAAc,CAAI,CAAI;IACpC,OAAO,QAAQ,CAAa,CAAC,EAAE,EAAE,EAAE,UAAU,CAAC,CAAA;AAChD,CAAC;AASD,MAAM,gBAAgB,GAAG,cAAc,CAAA;AAEvC,SAAgB,cAAc,CAAI,CAAI;IACpC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,gBAAgB,CAAC,CAAA;AAC1C,CAAC;AAED,SAAgB,oBAAoB,CAAI,CAAI;IAC1C,OAAO,QAAQ,CAAmB,CAAC,EAAE,EAAE,EAAE,gBAAgB,CAAC,CAAA;AAC5D,CAAC;AASD,MAAM,gBAAgB,GAAG,cAAc,CAAA;AAEvC,SAAgB,cAAc,CAAI,CAAI;IACpC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,gBAAgB,CAAC,CAAA;AAC1C,CAAC;AAED,SAAgB,oBAAoB,CAAI,CAAI;IAC1C,OAAO,QAAQ,CAAmB,CAAC,EAAE,EAAE,EAAE,gBAAgB,CAAC,CAAA;AAC5D,CAAC;AAMD,MAAM,gBAAgB,GAAG,cAAc,CAAA;AAEvC,SAAgB,cAAc,CAAI,CAAI;IACpC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,gBAAgB,CAAC,CAAA;AAC1C,CAAC;AAED,SAAgB,oBAAoB,CAAI,CAAI;IAC1C,OAAO,QAAQ,CAAmB,CAAC,EAAE,EAAE,EAAE,gBAAgB,CAAC,CAAA;AAC5D,CAAC","sourcesContent":["/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { HeadersMap, XRPCError } from '@atproto/xrpc'\nimport { type ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { CID } from 'multiformats/cid'\nimport { validate as _validate } from '../../../../lexicons'\nimport {\n  type $Typed,\n  is$typed as _is$typed,\n  type OmitKey,\n} from '../../../../util'\nimport type * as ComAtprotoRepoDefs from './defs.js'\n\nconst is$typed = _is$typed,\n  validate = _validate\nconst id = 'com.atproto.repo.applyWrites'\n\nexport type QueryParams = {}\n\nexport interface InputSchema {\n  /** The handle or DID of the repo (aka, current account). */\n  repo: string\n  /** Can be set to 'false' to skip Lexicon schema validation of record data across all operations, 'true' to require it, or leave unset to validate only for known Lexicons. */\n  validate?: boolean\n  writes: ($Typed<Create> | $Typed<Update> | $Typed<Delete>)[]\n  /** If provided, the entire operation will fail if the current repo commit CID does not match this value. Used to prevent conflicting repo mutations. */\n  swapCommit?: string\n}\n\nexport interface OutputSchema {\n  commit?: ComAtprotoRepoDefs.CommitMeta\n  results?: (\n    | $Typed<CreateResult>\n    | $Typed<UpdateResult>\n    | $Typed<DeleteResult>\n  )[]\n}\n\nexport interface CallOptions {\n  signal?: AbortSignal\n  headers?: HeadersMap\n  qp?: QueryParams\n  encoding?: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: HeadersMap\n  data: OutputSchema\n}\n\nexport class InvalidSwapError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers, { cause: src })\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'InvalidSwap') return new InvalidSwapError(e)\n  }\n\n  return e\n}\n\n/** Operation which creates a new record. */\nexport interface Create {\n  $type?: 'com.atproto.repo.applyWrites#create'\n  collection: string\n  /** NOTE: maxLength is redundant with record-key format. Keeping it temporarily to ensure backwards compatibility. */\n  rkey?: string\n  value: { [_ in string]: unknown }\n}\n\nconst hashCreate = 'create'\n\nexport function isCreate<V>(v: V) {\n  return is$typed(v, id, hashCreate)\n}\n\nexport function validateCreate<V>(v: V) {\n  return validate<Create & V>(v, id, hashCreate)\n}\n\n/** Operation which updates an existing record. */\nexport interface Update {\n  $type?: 'com.atproto.repo.applyWrites#update'\n  collection: string\n  rkey: string\n  value: { [_ in string]: unknown }\n}\n\nconst hashUpdate = 'update'\n\nexport function isUpdate<V>(v: V) {\n  return is$typed(v, id, hashUpdate)\n}\n\nexport function validateUpdate<V>(v: V) {\n  return validate<Update & V>(v, id, hashUpdate)\n}\n\n/** Operation which deletes an existing record. */\nexport interface Delete {\n  $type?: 'com.atproto.repo.applyWrites#delete'\n  collection: string\n  rkey: string\n}\n\nconst hashDelete = 'delete'\n\nexport function isDelete<V>(v: V) {\n  return is$typed(v, id, hashDelete)\n}\n\nexport function validateDelete<V>(v: V) {\n  return validate<Delete & V>(v, id, hashDelete)\n}\n\nexport interface CreateResult {\n  $type?: 'com.atproto.repo.applyWrites#createResult'\n  uri: string\n  cid: string\n  validationStatus?: 'valid' | 'unknown' | (string & {})\n}\n\nconst hashCreateResult = 'createResult'\n\nexport function isCreateResult<V>(v: V) {\n  return is$typed(v, id, hashCreateResult)\n}\n\nexport function validateCreateResult<V>(v: V) {\n  return validate<CreateResult & V>(v, id, hashCreateResult)\n}\n\nexport interface UpdateResult {\n  $type?: 'com.atproto.repo.applyWrites#updateResult'\n  uri: string\n  cid: string\n  validationStatus?: 'valid' | 'unknown' | (string & {})\n}\n\nconst hashUpdateResult = 'updateResult'\n\nexport function isUpdateResult<V>(v: V) {\n  return is$typed(v, id, hashUpdateResult)\n}\n\nexport function validateUpdateResult<V>(v: V) {\n  return validate<UpdateResult & V>(v, id, hashUpdateResult)\n}\n\nexport interface DeleteResult {\n  $type?: 'com.atproto.repo.applyWrites#deleteResult'\n}\n\nconst hashDeleteResult = 'deleteResult'\n\nexport function isDeleteResult<V>(v: V) {\n  return is$typed(v, id, hashDeleteResult)\n}\n\nexport function validateDeleteResult<V>(v: V) {\n  return validate<DeleteResult & V>(v, id, hashDeleteResult)\n}\n"]}