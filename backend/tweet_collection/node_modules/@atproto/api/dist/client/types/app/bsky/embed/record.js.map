{"version":3,"file":"record.js","sourceRoot":"","sources":["../../../../../../src/client/types/app/bsky/embed/record.ts"],"names":[],"mappings":";;AAiCA,wBAEC;AAED,oCAEC;AAkBD,wBAEC;AAED,oCAEC;AA2BD,oCAEC;AAED,gDAEC;AAUD,wCAEC;AAED,oDAEC;AAWD,sCAEC;AAED,kDAEC;AAUD,wCAEC;AAED,oDAEC;AA5ID,mDAA4D;AAC5D,2CAIyB;AAYzB,MAAM,QAAQ,GAAG,eAAS,EACxB,QAAQ,GAAG,mBAAS,CAAA;AACtB,MAAM,EAAE,GAAG,uBAAuB,CAAA;AAOlC,MAAM,QAAQ,GAAG,MAAM,CAAA;AAEvB,SAAgB,MAAM,CAAI,CAAI;IAC5B,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAA;AAClC,CAAC;AAED,SAAgB,YAAY,CAAI,CAAI;IAClC,OAAO,QAAQ,CAAW,CAAC,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAA;AAC5C,CAAC;AAgBD,MAAM,QAAQ,GAAG,MAAM,CAAA;AAEvB,SAAgB,MAAM,CAAI,CAAI;IAC5B,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAA;AAClC,CAAC;AAED,SAAgB,YAAY,CAAI,CAAI;IAClC,OAAO,QAAQ,CAAW,CAAC,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAA;AAC5C,CAAC;AAyBD,MAAM,cAAc,GAAG,YAAY,CAAA;AAEnC,SAAgB,YAAY,CAAI,CAAI;IAClC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,cAAc,CAAC,CAAA;AACxC,CAAC;AAED,SAAgB,kBAAkB,CAAI,CAAI;IACxC,OAAO,QAAQ,CAAiB,CAAC,EAAE,EAAE,EAAE,cAAc,CAAC,CAAA;AACxD,CAAC;AAQD,MAAM,gBAAgB,GAAG,cAAc,CAAA;AAEvC,SAAgB,cAAc,CAAI,CAAI;IACpC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,gBAAgB,CAAC,CAAA;AAC1C,CAAC;AAED,SAAgB,oBAAoB,CAAI,CAAI;IAC1C,OAAO,QAAQ,CAAmB,CAAC,EAAE,EAAE,EAAE,gBAAgB,CAAC,CAAA;AAC5D,CAAC;AASD,MAAM,eAAe,GAAG,aAAa,CAAA;AAErC,SAAgB,aAAa,CAAI,CAAI;IACnC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,eAAe,CAAC,CAAA;AACzC,CAAC;AAED,SAAgB,mBAAmB,CAAI,CAAI;IACzC,OAAO,QAAQ,CAAkB,CAAC,EAAE,EAAE,EAAE,eAAe,CAAC,CAAA;AAC1D,CAAC;AAQD,MAAM,gBAAgB,GAAG,cAAc,CAAA;AAEvC,SAAgB,cAAc,CAAI,CAAI;IACpC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,gBAAgB,CAAC,CAAA;AAC1C,CAAC;AAED,SAAgB,oBAAoB,CAAI,CAAI;IAC1C,OAAO,QAAQ,CAAmB,CAAC,EAAE,EAAE,EAAE,gBAAgB,CAAC,CAAA;AAC5D,CAAC","sourcesContent":["/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { type ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { CID } from 'multiformats/cid'\nimport { validate as _validate } from '../../../../lexicons'\nimport {\n  type $Typed,\n  is$typed as _is$typed,\n  type OmitKey,\n} from '../../../../util'\nimport type * as ComAtprotoRepoStrongRef from '../../../com/atproto/repo/strongRef.js'\nimport type * as AppBskyFeedDefs from '../feed/defs.js'\nimport type * as AppBskyGraphDefs from '../graph/defs.js'\nimport type * as AppBskyLabelerDefs from '../labeler/defs.js'\nimport type * as AppBskyActorDefs from '../actor/defs.js'\nimport type * as ComAtprotoLabelDefs from '../../../com/atproto/label/defs.js'\nimport type * as AppBskyEmbedImages from './images.js'\nimport type * as AppBskyEmbedVideo from './video.js'\nimport type * as AppBskyEmbedExternal from './external.js'\nimport type * as AppBskyEmbedRecordWithMedia from './recordWithMedia.js'\n\nconst is$typed = _is$typed,\n  validate = _validate\nconst id = 'app.bsky.embed.record'\n\nexport interface Main {\n  $type?: 'app.bsky.embed.record'\n  record: ComAtprotoRepoStrongRef.Main\n}\n\nconst hashMain = 'main'\n\nexport function isMain<V>(v: V) {\n  return is$typed(v, id, hashMain)\n}\n\nexport function validateMain<V>(v: V) {\n  return validate<Main & V>(v, id, hashMain)\n}\n\nexport interface View {\n  $type?: 'app.bsky.embed.record#view'\n  record:\n    | $Typed<ViewRecord>\n    | $Typed<ViewNotFound>\n    | $Typed<ViewBlocked>\n    | $Typed<ViewDetached>\n    | $Typed<AppBskyFeedDefs.GeneratorView>\n    | $Typed<AppBskyGraphDefs.ListView>\n    | $Typed<AppBskyLabelerDefs.LabelerView>\n    | $Typed<AppBskyGraphDefs.StarterPackViewBasic>\n    | { $type: string }\n}\n\nconst hashView = 'view'\n\nexport function isView<V>(v: V) {\n  return is$typed(v, id, hashView)\n}\n\nexport function validateView<V>(v: V) {\n  return validate<View & V>(v, id, hashView)\n}\n\nexport interface ViewRecord {\n  $type?: 'app.bsky.embed.record#viewRecord'\n  uri: string\n  cid: string\n  author: AppBskyActorDefs.ProfileViewBasic\n  /** The record data itself. */\n  value: { [_ in string]: unknown }\n  labels?: ComAtprotoLabelDefs.Label[]\n  replyCount?: number\n  repostCount?: number\n  likeCount?: number\n  quoteCount?: number\n  embeds?: (\n    | $Typed<AppBskyEmbedImages.View>\n    | $Typed<AppBskyEmbedVideo.View>\n    | $Typed<AppBskyEmbedExternal.View>\n    | $Typed<View>\n    | $Typed<AppBskyEmbedRecordWithMedia.View>\n    | { $type: string }\n  )[]\n  indexedAt: string\n}\n\nconst hashViewRecord = 'viewRecord'\n\nexport function isViewRecord<V>(v: V) {\n  return is$typed(v, id, hashViewRecord)\n}\n\nexport function validateViewRecord<V>(v: V) {\n  return validate<ViewRecord & V>(v, id, hashViewRecord)\n}\n\nexport interface ViewNotFound {\n  $type?: 'app.bsky.embed.record#viewNotFound'\n  uri: string\n  notFound: true\n}\n\nconst hashViewNotFound = 'viewNotFound'\n\nexport function isViewNotFound<V>(v: V) {\n  return is$typed(v, id, hashViewNotFound)\n}\n\nexport function validateViewNotFound<V>(v: V) {\n  return validate<ViewNotFound & V>(v, id, hashViewNotFound)\n}\n\nexport interface ViewBlocked {\n  $type?: 'app.bsky.embed.record#viewBlocked'\n  uri: string\n  blocked: true\n  author: AppBskyFeedDefs.BlockedAuthor\n}\n\nconst hashViewBlocked = 'viewBlocked'\n\nexport function isViewBlocked<V>(v: V) {\n  return is$typed(v, id, hashViewBlocked)\n}\n\nexport function validateViewBlocked<V>(v: V) {\n  return validate<ViewBlocked & V>(v, id, hashViewBlocked)\n}\n\nexport interface ViewDetached {\n  $type?: 'app.bsky.embed.record#viewDetached'\n  uri: string\n  detached: true\n}\n\nconst hashViewDetached = 'viewDetached'\n\nexport function isViewDetached<V>(v: V) {\n  return is$typed(v, id, hashViewDetached)\n}\n\nexport function validateViewDetached<V>(v: V) {\n  return validate<ViewDetached & V>(v, id, hashViewDetached)\n}\n"]}