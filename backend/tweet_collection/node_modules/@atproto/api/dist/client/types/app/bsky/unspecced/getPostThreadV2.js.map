{"version":3,"file":"getPostThreadV2.js","sourceRoot":"","sources":["../../../../../../src/client/types/app/bsky/unspecced/getPostThreadV2.ts"],"names":[],"mappings":";;AAsDA,gCAEC;AAiBD,oCAEC;AAED,gDAEC;AAzED,mDAA4D;AAC5D,2CAIyB;AAIzB,MAAM,QAAQ,GAAG,eAAS,EACxB,QAAQ,GAAG,mBAAS,CAAA;AACtB,MAAM,EAAE,GAAG,oCAAoC,CAAA;AAqC/C,SAAgB,UAAU,CAAC,CAAM;IAC/B,OAAO,CAAC,CAAA;AACV,CAAC;AAeD,MAAM,cAAc,GAAG,YAAY,CAAA;AAEnC,SAAgB,YAAY,CAAI,CAAI;IAClC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,cAAc,CAAC,CAAA;AACxC,CAAC;AAED,SAAgB,kBAAkB,CAAI,CAAI;IACxC,OAAO,QAAQ,CAAiB,CAAC,EAAE,EAAE,EAAE,cAAc,CAAC,CAAA;AACxD,CAAC","sourcesContent":["/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { HeadersMap, XRPCError } from '@atproto/xrpc'\nimport { type ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { CID } from 'multiformats/cid'\nimport { validate as _validate } from '../../../../lexicons'\nimport {\n  type $Typed,\n  is$typed as _is$typed,\n  type OmitKey,\n} from '../../../../util'\nimport type * as AppBskyFeedDefs from '../feed/defs.js'\nimport type * as AppBskyUnspeccedDefs from './defs.js'\n\nconst is$typed = _is$typed,\n  validate = _validate\nconst id = 'app.bsky.unspecced.getPostThreadV2'\n\nexport type QueryParams = {\n  /** Reference (AT-URI) to post record. This is the anchor post, and the thread will be built around it. It can be any post in the tree, not necessarily a root post. */\n  anchor: string\n  /** Whether to include parents above the anchor. */\n  above?: boolean\n  /** How many levels of replies to include below the anchor. */\n  below?: number\n  /** Maximum of replies to include at each level of the thread, except for the direct replies to the anchor, which are (NOTE: currently, during unspecced phase) all returned (NOTE: later they might be paginated). */\n  branchingFactor?: number\n  /** Whether to prioritize posts from followed users. It only has effect when the user is authenticated. */\n  prioritizeFollowedUsers?: boolean\n  /** Sorting for the thread replies. */\n  sort?: 'newest' | 'oldest' | 'top' | (string & {})\n}\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  /** A flat list of thread items. The depth of each item is indicated by the depth property inside the item. */\n  thread: ThreadItem[]\n  threadgate?: AppBskyFeedDefs.ThreadgateView\n  /** Whether this thread has additional replies. If true, a call can be made to the `getPostThreadOtherV2` endpoint to retrieve them. */\n  hasOtherReplies: boolean\n}\n\nexport interface CallOptions {\n  signal?: AbortSignal\n  headers?: HeadersMap\n}\n\nexport interface Response {\n  success: boolean\n  headers: HeadersMap\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  return e\n}\n\nexport interface ThreadItem {\n  $type?: 'app.bsky.unspecced.getPostThreadV2#threadItem'\n  uri: string\n  /** The nesting level of this item in the thread. Depth 0 means the anchor item. Items above have negative depths, items below have positive depths. */\n  depth: number\n  value:\n    | $Typed<AppBskyUnspeccedDefs.ThreadItemPost>\n    | $Typed<AppBskyUnspeccedDefs.ThreadItemNoUnauthenticated>\n    | $Typed<AppBskyUnspeccedDefs.ThreadItemNotFound>\n    | $Typed<AppBskyUnspeccedDefs.ThreadItemBlocked>\n    | { $type: string }\n}\n\nconst hashThreadItem = 'threadItem'\n\nexport function isThreadItem<V>(v: V) {\n  return is$typed(v, id, hashThreadItem)\n}\n\nexport function validateThreadItem<V>(v: V) {\n  return validate<ThreadItem & V>(v, id, hashThreadItem)\n}\n"]}