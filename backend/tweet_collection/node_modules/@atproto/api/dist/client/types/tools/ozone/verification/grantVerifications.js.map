{"version":3,"file":"grantVerifications.js","sourceRoot":"","sources":["../../../../../../src/client/types/tools/ozone/verification/grantVerifications.ts"],"names":[],"mappings":";;AA2CA,gCAEC;AAgBD,kDAEC;AAED,8DAEC;AAaD,oCAEC;AAED,gDAEC;AAhFD,mDAA4D;AAC5D,2CAIyB;AAGzB,MAAM,QAAQ,GAAG,eAAS,EACxB,QAAQ,GAAG,mBAAS,CAAA;AACtB,MAAM,EAAE,GAAG,6CAA6C,CAAA;AA2BxD,SAAgB,UAAU,CAAC,CAAM;IAC/B,OAAO,CAAC,CAAA;AACV,CAAC;AAcD,MAAM,qBAAqB,GAAG,mBAAmB,CAAA;AAEjD,SAAgB,mBAAmB,CAAI,CAAI;IACzC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,qBAAqB,CAAC,CAAA;AAC/C,CAAC;AAED,SAAgB,yBAAyB,CAAI,CAAI;IAC/C,OAAO,QAAQ,CAAwB,CAAC,EAAE,EAAE,EAAE,qBAAqB,CAAC,CAAA;AACtE,CAAC;AAWD,MAAM,cAAc,GAAG,YAAY,CAAA;AAEnC,SAAgB,YAAY,CAAI,CAAI;IAClC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,cAAc,CAAC,CAAA;AACxC,CAAC;AAED,SAAgB,kBAAkB,CAAI,CAAI;IACxC,OAAO,QAAQ,CAAiB,CAAC,EAAE,EAAE,EAAE,cAAc,CAAC,CAAA;AACxD,CAAC","sourcesContent":["/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { HeadersMap, XRPCError } from '@atproto/xrpc'\nimport { type ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { CID } from 'multiformats/cid'\nimport { validate as _validate } from '../../../../lexicons'\nimport {\n  type $Typed,\n  is$typed as _is$typed,\n  type OmitKey,\n} from '../../../../util'\nimport type * as ToolsOzoneVerificationDefs from './defs.js'\n\nconst is$typed = _is$typed,\n  validate = _validate\nconst id = 'tools.ozone.verification.grantVerifications'\n\nexport type QueryParams = {}\n\nexport interface InputSchema {\n  /** Array of verification requests to process */\n  verifications: VerificationInput[]\n}\n\nexport interface OutputSchema {\n  verifications: ToolsOzoneVerificationDefs.VerificationView[]\n  failedVerifications: GrantError[]\n}\n\nexport interface CallOptions {\n  signal?: AbortSignal\n  headers?: HeadersMap\n  qp?: QueryParams\n  encoding?: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: HeadersMap\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  return e\n}\n\nexport interface VerificationInput {\n  $type?: 'tools.ozone.verification.grantVerifications#verificationInput'\n  /** The did of the subject being verified */\n  subject: string\n  /** Handle of the subject the verification applies to at the moment of verifying. */\n  handle: string\n  /** Display name of the subject the verification applies to at the moment of verifying. */\n  displayName: string\n  /** Timestamp for verification record. Defaults to current time when not specified. */\n  createdAt?: string\n}\n\nconst hashVerificationInput = 'verificationInput'\n\nexport function isVerificationInput<V>(v: V) {\n  return is$typed(v, id, hashVerificationInput)\n}\n\nexport function validateVerificationInput<V>(v: V) {\n  return validate<VerificationInput & V>(v, id, hashVerificationInput)\n}\n\n/** Error object for failed verifications. */\nexport interface GrantError {\n  $type?: 'tools.ozone.verification.grantVerifications#grantError'\n  /** Error message describing the reason for failure. */\n  error: string\n  /** The did of the subject being verified */\n  subject: string\n}\n\nconst hashGrantError = 'grantError'\n\nexport function isGrantError<V>(v: V) {\n  return is$typed(v, id, hashGrantError)\n}\n\nexport function validateGrantError<V>(v: V) {\n  return validate<GrantError & V>(v, id, hashGrantError)\n}\n"]}