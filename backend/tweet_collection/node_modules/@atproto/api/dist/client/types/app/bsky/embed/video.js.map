{"version":3,"file":"video.js","sourceRoot":"","sources":["../../../../../../src/client/types/app/bsky/embed/video.ts"],"names":[],"mappings":";;AA6BA,wBAEC;AAED,oCAEC;AAUD,8BAEC;AAED,0CAEC;AAaD,wBAEC;AAED,oCAEC;AAjED,mDAA4D;AAC5D,2CAIyB;AAGzB,MAAM,QAAQ,GAAG,eAAS,EACxB,QAAQ,GAAG,mBAAS,CAAA;AACtB,MAAM,EAAE,GAAG,sBAAsB,CAAA;AAYjC,MAAM,QAAQ,GAAG,MAAM,CAAA;AAEvB,SAAgB,MAAM,CAAI,CAAI;IAC5B,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAA;AAClC,CAAC;AAED,SAAgB,YAAY,CAAI,CAAI;IAClC,OAAO,QAAQ,CAAW,CAAC,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAA;AAC5C,CAAC;AAQD,MAAM,WAAW,GAAG,SAAS,CAAA;AAE7B,SAAgB,SAAS,CAAI,CAAI;IAC/B,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,WAAW,CAAC,CAAA;AACrC,CAAC;AAED,SAAgB,eAAe,CAAI,CAAI;IACrC,OAAO,QAAQ,CAAc,CAAC,EAAE,EAAE,EAAE,WAAW,CAAC,CAAA;AAClD,CAAC;AAWD,MAAM,QAAQ,GAAG,MAAM,CAAA;AAEvB,SAAgB,MAAM,CAAI,CAAI;IAC5B,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAA;AAClC,CAAC;AAED,SAAgB,YAAY,CAAI,CAAI;IAClC,OAAO,QAAQ,CAAW,CAAC,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAA;AAC5C,CAAC","sourcesContent":["/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { type ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { CID } from 'multiformats/cid'\nimport { validate as _validate } from '../../../../lexicons'\nimport {\n  type $Typed,\n  is$typed as _is$typed,\n  type OmitKey,\n} from '../../../../util'\nimport type * as AppBskyEmbedDefs from './defs.js'\n\nconst is$typed = _is$typed,\n  validate = _validate\nconst id = 'app.bsky.embed.video'\n\nexport interface Main {\n  $type?: 'app.bsky.embed.video'\n  /** The mp4 video file. May be up to 100mb, formerly limited to 50mb. */\n  video: BlobRef\n  captions?: Caption[]\n  /** Alt text description of the video, for accessibility. */\n  alt?: string\n  aspectRatio?: AppBskyEmbedDefs.AspectRatio\n}\n\nconst hashMain = 'main'\n\nexport function isMain<V>(v: V) {\n  return is$typed(v, id, hashMain)\n}\n\nexport function validateMain<V>(v: V) {\n  return validate<Main & V>(v, id, hashMain)\n}\n\nexport interface Caption {\n  $type?: 'app.bsky.embed.video#caption'\n  lang: string\n  file: BlobRef\n}\n\nconst hashCaption = 'caption'\n\nexport function isCaption<V>(v: V) {\n  return is$typed(v, id, hashCaption)\n}\n\nexport function validateCaption<V>(v: V) {\n  return validate<Caption & V>(v, id, hashCaption)\n}\n\nexport interface View {\n  $type?: 'app.bsky.embed.video#view'\n  cid: string\n  playlist: string\n  thumbnail?: string\n  alt?: string\n  aspectRatio?: AppBskyEmbedDefs.AspectRatio\n}\n\nconst hashView = 'view'\n\nexport function isView<V>(v: V) {\n  return is$typed(v, id, hashView)\n}\n\nexport function validateView<V>(v: V) {\n  return validate<View & V>(v, id, hashView)\n}\n"]}