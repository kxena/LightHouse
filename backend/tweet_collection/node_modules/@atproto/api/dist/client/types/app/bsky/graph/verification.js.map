{"version":3,"file":"verification.js","sourceRoot":"","sources":["../../../../../../src/client/types/app/bsky/graph/verification.ts"],"names":[],"mappings":";;AA+BA,4BAEC;AAED,wCAEC;AAhCD,mDAA4D;AAC5D,2CAIyB;AAEzB,MAAM,QAAQ,GAAG,eAAS,EACxB,QAAQ,GAAG,mBAAS,CAAA;AACtB,MAAM,EAAE,GAAG,6BAA6B,CAAA;AAexC,MAAM,UAAU,GAAG,MAAM,CAAA;AAEzB,SAAgB,QAAQ,CAAI,CAAI;IAC9B,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,UAAU,CAAC,CAAA;AACpC,CAAC;AAED,SAAgB,cAAc,CAAI,CAAI;IACpC,OAAO,QAAQ,CAAa,CAAC,EAAE,EAAE,EAAE,UAAU,EAAE,IAAI,CAAC,CAAA;AACtD,CAAC","sourcesContent":["/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { type ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { CID } from 'multiformats/cid'\nimport { validate as _validate } from '../../../../lexicons'\nimport {\n  type $Typed,\n  is$typed as _is$typed,\n  type OmitKey,\n} from '../../../../util'\n\nconst is$typed = _is$typed,\n  validate = _validate\nconst id = 'app.bsky.graph.verification'\n\nexport interface Record {\n  $type: 'app.bsky.graph.verification'\n  /** DID of the subject the verification applies to. */\n  subject: string\n  /** Handle of the subject the verification applies to at the moment of verifying, which might not be the same at the time of viewing. The verification is only valid if the current handle matches the one at the time of verifying. */\n  handle: string\n  /** Display name of the subject the verification applies to at the moment of verifying, which might not be the same at the time of viewing. The verification is only valid if the current displayName matches the one at the time of verifying. */\n  displayName: string\n  /** Date of when the verification was created. */\n  createdAt: string\n  [k: string]: unknown\n}\n\nconst hashRecord = 'main'\n\nexport function isRecord<V>(v: V) {\n  return is$typed(v, id, hashRecord)\n}\n\nexport function validateRecord<V>(v: V) {\n  return validate<Record & V>(v, id, hashRecord, true)\n}\n"]}