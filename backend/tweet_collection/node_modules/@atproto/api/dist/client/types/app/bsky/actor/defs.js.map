{"version":3,"file":"defs.js","sourceRoot":"","sources":["../../../../../../src/client/types/app/bsky/actor/defs.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { type ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { CID } from 'multiformats/cid'\nimport { validate as _validate } from '../../../../lexicons'\nimport {\n  type $Typed,\n  is$typed as _is$typed,\n  type OmitKey,\n} from '../../../../util'\nimport type * as ComAtprotoLabelDefs from '../../../com/atproto/label/defs.js'\nimport type * as AppBskyGraphDefs from '../graph/defs.js'\nimport type * as ComAtprotoRepoStrongRef from '../../../com/atproto/repo/strongRef.js'\nimport type * as AppBskyNotificationDefs from '../notification/defs.js'\nimport type * as AppBskyFeedThreadgate from '../feed/threadgate.js'\nimport type * as AppBskyFeedPostgate from '../feed/postgate.js'\nimport type * as AppBskyEmbedExternal from '../embed/external.js'\n\nconst is$typed = _is$typed,\n  validate = _validate\nconst id = 'app.bsky.actor.defs'\n\nexport interface ProfileViewBasic {\n  $type?: 'app.bsky.actor.defs#profileViewBasic'\n  did: string\n  handle: string\n  displayName?: string\n  pronouns?: string\n  avatar?: string\n  associated?: ProfileAssociated\n  viewer?: ViewerState\n  labels?: ComAtprotoLabelDefs.Label[]\n  createdAt?: string\n  verification?: VerificationState\n  status?: StatusView\n}\n\nconst hashProfileViewBasic = 'profileViewBasic'\n\nexport function isProfileViewBasic<V>(v: V) {\n  return is$typed(v, id, hashProfileViewBasic)\n}\n\nexport function validateProfileViewBasic<V>(v: V) {\n  return validate<ProfileViewBasic & V>(v, id, hashProfileViewBasic)\n}\n\nexport interface ProfileView {\n  $type?: 'app.bsky.actor.defs#profileView'\n  did: string\n  handle: string\n  displayName?: string\n  pronouns?: string\n  description?: string\n  avatar?: string\n  associated?: ProfileAssociated\n  indexedAt?: string\n  createdAt?: string\n  viewer?: ViewerState\n  labels?: ComAtprotoLabelDefs.Label[]\n  verification?: VerificationState\n  status?: StatusView\n}\n\nconst hashProfileView = 'profileView'\n\nexport function isProfileView<V>(v: V) {\n  return is$typed(v, id, hashProfileView)\n}\n\nexport function validateProfileView<V>(v: V) {\n  return validate<ProfileView & V>(v, id, hashProfileView)\n}\n\nexport interface ProfileViewDetailed {\n  $type?: 'app.bsky.actor.defs#profileViewDetailed'\n  did: string\n  handle: string\n  displayName?: string\n  description?: string\n  pronouns?: string\n  website?: string\n  avatar?: string\n  banner?: string\n  followersCount?: number\n  followsCount?: number\n  postsCount?: number\n  associated?: ProfileAssociated\n  joinedViaStarterPack?: AppBskyGraphDefs.StarterPackViewBasic\n  indexedAt?: string\n  createdAt?: string\n  viewer?: ViewerState\n  labels?: ComAtprotoLabelDefs.Label[]\n  pinnedPost?: ComAtprotoRepoStrongRef.Main\n  verification?: VerificationState\n  status?: StatusView\n}\n\nconst hashProfileViewDetailed = 'profileViewDetailed'\n\nexport function isProfileViewDetailed<V>(v: V) {\n  return is$typed(v, id, hashProfileViewDetailed)\n}\n\nexport function validateProfileViewDetailed<V>(v: V) {\n  return validate<ProfileViewDetailed & V>(v, id, hashProfileViewDetailed)\n}\n\nexport interface ProfileAssociated {\n  $type?: 'app.bsky.actor.defs#profileAssociated'\n  lists?: number\n  feedgens?: number\n  starterPacks?: number\n  labeler?: boolean\n  chat?: ProfileAssociatedChat\n  activitySubscription?: ProfileAssociatedActivitySubscription\n}\n\nconst hashProfileAssociated = 'profileAssociated'\n\nexport function isProfileAssociated<V>(v: V) {\n  return is$typed(v, id, hashProfileAssociated)\n}\n\nexport function validateProfileAssociated<V>(v: V) {\n  return validate<ProfileAssociated & V>(v, id, hashProfileAssociated)\n}\n\nexport interface ProfileAssociatedChat {\n  $type?: 'app.bsky.actor.defs#profileAssociatedChat'\n  allowIncoming: 'all' | 'none' | 'following' | (string & {})\n}\n\nconst hashProfileAssociatedChat = 'profileAssociatedChat'\n\nexport function isProfileAssociatedChat<V>(v: V) {\n  return is$typed(v, id, hashProfileAssociatedChat)\n}\n\nexport function validateProfileAssociatedChat<V>(v: V) {\n  return validate<ProfileAssociatedChat & V>(v, id, hashProfileAssociatedChat)\n}\n\nexport interface ProfileAssociatedActivitySubscription {\n  $type?: 'app.bsky.actor.defs#profileAssociatedActivitySubscription'\n  allowSubscriptions: 'followers' | 'mutuals' | 'none' | (string & {})\n}\n\nconst hashProfileAssociatedActivitySubscription =\n  'profileAssociatedActivitySubscription'\n\nexport function isProfileAssociatedActivitySubscription<V>(v: V) {\n  return is$typed(v, id, hashProfileAssociatedActivitySubscription)\n}\n\nexport function validateProfileAssociatedActivitySubscription<V>(v: V) {\n  return validate<ProfileAssociatedActivitySubscription & V>(\n    v,\n    id,\n    hashProfileAssociatedActivitySubscription,\n  )\n}\n\n/** Metadata about the requesting account's relationship with the subject account. Only has meaningful content for authed requests. */\nexport interface ViewerState {\n  $type?: 'app.bsky.actor.defs#viewerState'\n  muted?: boolean\n  mutedByList?: AppBskyGraphDefs.ListViewBasic\n  blockedBy?: boolean\n  blocking?: string\n  blockingByList?: AppBskyGraphDefs.ListViewBasic\n  following?: string\n  followedBy?: string\n  knownFollowers?: KnownFollowers\n  activitySubscription?: AppBskyNotificationDefs.ActivitySubscription\n}\n\nconst hashViewerState = 'viewerState'\n\nexport function isViewerState<V>(v: V) {\n  return is$typed(v, id, hashViewerState)\n}\n\nexport function validateViewerState<V>(v: V) {\n  return validate<ViewerState & V>(v, id, hashViewerState)\n}\n\n/** The subject's followers whom you also follow */\nexport interface KnownFollowers {\n  $type?: 'app.bsky.actor.defs#knownFollowers'\n  count: number\n  followers: ProfileViewBasic[]\n}\n\nconst hashKnownFollowers = 'knownFollowers'\n\nexport function isKnownFollowers<V>(v: V) {\n  return is$typed(v, id, hashKnownFollowers)\n}\n\nexport function validateKnownFollowers<V>(v: V) {\n  return validate<KnownFollowers & V>(v, id, hashKnownFollowers)\n}\n\n/** Represents the verification information about the user this object is attached to. */\nexport interface VerificationState {\n  $type?: 'app.bsky.actor.defs#verificationState'\n  /** All verifications issued by trusted verifiers on behalf of this user. Verifications by untrusted verifiers are not included. */\n  verifications: VerificationView[]\n  /** The user's status as a verified account. */\n  verifiedStatus: 'valid' | 'invalid' | 'none' | (string & {})\n  /** The user's status as a trusted verifier. */\n  trustedVerifierStatus: 'valid' | 'invalid' | 'none' | (string & {})\n}\n\nconst hashVerificationState = 'verificationState'\n\nexport function isVerificationState<V>(v: V) {\n  return is$typed(v, id, hashVerificationState)\n}\n\nexport function validateVerificationState<V>(v: V) {\n  return validate<VerificationState & V>(v, id, hashVerificationState)\n}\n\n/** An individual verification for an associated subject. */\nexport interface VerificationView {\n  $type?: 'app.bsky.actor.defs#verificationView'\n  /** The user who issued this verification. */\n  issuer: string\n  /** The AT-URI of the verification record. */\n  uri: string\n  /** True if the verification passes validation, otherwise false. */\n  isValid: boolean\n  /** Timestamp when the verification was created. */\n  createdAt: string\n}\n\nconst hashVerificationView = 'verificationView'\n\nexport function isVerificationView<V>(v: V) {\n  return is$typed(v, id, hashVerificationView)\n}\n\nexport function validateVerificationView<V>(v: V) {\n  return validate<VerificationView & V>(v, id, hashVerificationView)\n}\n\nexport type Preferences = (\n  | $Typed<AdultContentPref>\n  | $Typed<ContentLabelPref>\n  | $Typed<SavedFeedsPref>\n  | $Typed<SavedFeedsPrefV2>\n  | $Typed<PersonalDetailsPref>\n  | $Typed<FeedViewPref>\n  | $Typed<ThreadViewPref>\n  | $Typed<InterestsPref>\n  | $Typed<MutedWordsPref>\n  | $Typed<HiddenPostsPref>\n  | $Typed<BskyAppStatePref>\n  | $Typed<LabelersPref>\n  | $Typed<PostInteractionSettingsPref>\n  | $Typed<VerificationPrefs>\n  | { $type: string }\n)[]\n\nexport interface AdultContentPref {\n  $type?: 'app.bsky.actor.defs#adultContentPref'\n  enabled: boolean\n}\n\nconst hashAdultContentPref = 'adultContentPref'\n\nexport function isAdultContentPref<V>(v: V) {\n  return is$typed(v, id, hashAdultContentPref)\n}\n\nexport function validateAdultContentPref<V>(v: V) {\n  return validate<AdultContentPref & V>(v, id, hashAdultContentPref)\n}\n\nexport interface ContentLabelPref {\n  $type?: 'app.bsky.actor.defs#contentLabelPref'\n  /** Which labeler does this preference apply to? If undefined, applies globally. */\n  labelerDid?: string\n  label: string\n  visibility: 'ignore' | 'show' | 'warn' | 'hide' | (string & {})\n}\n\nconst hashContentLabelPref = 'contentLabelPref'\n\nexport function isContentLabelPref<V>(v: V) {\n  return is$typed(v, id, hashContentLabelPref)\n}\n\nexport function validateContentLabelPref<V>(v: V) {\n  return validate<ContentLabelPref & V>(v, id, hashContentLabelPref)\n}\n\nexport interface SavedFeed {\n  $type?: 'app.bsky.actor.defs#savedFeed'\n  id: string\n  type: 'feed' | 'list' | 'timeline' | (string & {})\n  value: string\n  pinned: boolean\n}\n\nconst hashSavedFeed = 'savedFeed'\n\nexport function isSavedFeed<V>(v: V) {\n  return is$typed(v, id, hashSavedFeed)\n}\n\nexport function validateSavedFeed<V>(v: V) {\n  return validate<SavedFeed & V>(v, id, hashSavedFeed)\n}\n\nexport interface SavedFeedsPrefV2 {\n  $type?: 'app.bsky.actor.defs#savedFeedsPrefV2'\n  items: SavedFeed[]\n}\n\nconst hashSavedFeedsPrefV2 = 'savedFeedsPrefV2'\n\nexport function isSavedFeedsPrefV2<V>(v: V) {\n  return is$typed(v, id, hashSavedFeedsPrefV2)\n}\n\nexport function validateSavedFeedsPrefV2<V>(v: V) {\n  return validate<SavedFeedsPrefV2 & V>(v, id, hashSavedFeedsPrefV2)\n}\n\nexport interface SavedFeedsPref {\n  $type?: 'app.bsky.actor.defs#savedFeedsPref'\n  pinned: string[]\n  saved: string[]\n  timelineIndex?: number\n}\n\nconst hashSavedFeedsPref = 'savedFeedsPref'\n\nexport function isSavedFeedsPref<V>(v: V) {\n  return is$typed(v, id, hashSavedFeedsPref)\n}\n\nexport function validateSavedFeedsPref<V>(v: V) {\n  return validate<SavedFeedsPref & V>(v, id, hashSavedFeedsPref)\n}\n\nexport interface PersonalDetailsPref {\n  $type?: 'app.bsky.actor.defs#personalDetailsPref'\n  /** The birth date of account owner. */\n  birthDate?: string\n}\n\nconst hashPersonalDetailsPref = 'personalDetailsPref'\n\nexport function isPersonalDetailsPref<V>(v: V) {\n  return is$typed(v, id, hashPersonalDetailsPref)\n}\n\nexport function validatePersonalDetailsPref<V>(v: V) {\n  return validate<PersonalDetailsPref & V>(v, id, hashPersonalDetailsPref)\n}\n\nexport interface FeedViewPref {\n  $type?: 'app.bsky.actor.defs#feedViewPref'\n  /** The URI of the feed, or an identifier which describes the feed. */\n  feed: string\n  /** Hide replies in the feed. */\n  hideReplies?: boolean\n  /** Hide replies in the feed if they are not by followed users. */\n  hideRepliesByUnfollowed: boolean\n  /** Hide replies in the feed if they do not have this number of likes. */\n  hideRepliesByLikeCount?: number\n  /** Hide reposts in the feed. */\n  hideReposts?: boolean\n  /** Hide quote posts in the feed. */\n  hideQuotePosts?: boolean\n}\n\nconst hashFeedViewPref = 'feedViewPref'\n\nexport function isFeedViewPref<V>(v: V) {\n  return is$typed(v, id, hashFeedViewPref)\n}\n\nexport function validateFeedViewPref<V>(v: V) {\n  return validate<FeedViewPref & V>(v, id, hashFeedViewPref)\n}\n\nexport interface ThreadViewPref {\n  $type?: 'app.bsky.actor.defs#threadViewPref'\n  /** Sorting mode for threads. */\n  sort?:\n    | 'oldest'\n    | 'newest'\n    | 'most-likes'\n    | 'random'\n    | 'hotness'\n    | (string & {})\n  /** Show followed users at the top of all replies. */\n  prioritizeFollowedUsers?: boolean\n}\n\nconst hashThreadViewPref = 'threadViewPref'\n\nexport function isThreadViewPref<V>(v: V) {\n  return is$typed(v, id, hashThreadViewPref)\n}\n\nexport function validateThreadViewPref<V>(v: V) {\n  return validate<ThreadViewPref & V>(v, id, hashThreadViewPref)\n}\n\nexport interface InterestsPref {\n  $type?: 'app.bsky.actor.defs#interestsPref'\n  /** A list of tags which describe the account owner's interests gathered during onboarding. */\n  tags: string[]\n}\n\nconst hashInterestsPref = 'interestsPref'\n\nexport function isInterestsPref<V>(v: V) {\n  return is$typed(v, id, hashInterestsPref)\n}\n\nexport function validateInterestsPref<V>(v: V) {\n  return validate<InterestsPref & V>(v, id, hashInterestsPref)\n}\n\nexport type MutedWordTarget = 'content' | 'tag' | (string & {})\n\n/** A word that the account owner has muted. */\nexport interface MutedWord {\n  $type?: 'app.bsky.actor.defs#mutedWord'\n  id?: string\n  /** The muted word itself. */\n  value: string\n  /** The intended targets of the muted word. */\n  targets: MutedWordTarget[]\n  /** Groups of users to apply the muted word to. If undefined, applies to all users. */\n  actorTarget: 'all' | 'exclude-following' | (string & {})\n  /** The date and time at which the muted word will expire and no longer be applied. */\n  expiresAt?: string\n}\n\nconst hashMutedWord = 'mutedWord'\n\nexport function isMutedWord<V>(v: V) {\n  return is$typed(v, id, hashMutedWord)\n}\n\nexport function validateMutedWord<V>(v: V) {\n  return validate<MutedWord & V>(v, id, hashMutedWord)\n}\n\nexport interface MutedWordsPref {\n  $type?: 'app.bsky.actor.defs#mutedWordsPref'\n  /** A list of words the account owner has muted. */\n  items: MutedWord[]\n}\n\nconst hashMutedWordsPref = 'mutedWordsPref'\n\nexport function isMutedWordsPref<V>(v: V) {\n  return is$typed(v, id, hashMutedWordsPref)\n}\n\nexport function validateMutedWordsPref<V>(v: V) {\n  return validate<MutedWordsPref & V>(v, id, hashMutedWordsPref)\n}\n\nexport interface HiddenPostsPref {\n  $type?: 'app.bsky.actor.defs#hiddenPostsPref'\n  /** A list of URIs of posts the account owner has hidden. */\n  items: string[]\n}\n\nconst hashHiddenPostsPref = 'hiddenPostsPref'\n\nexport function isHiddenPostsPref<V>(v: V) {\n  return is$typed(v, id, hashHiddenPostsPref)\n}\n\nexport function validateHiddenPostsPref<V>(v: V) {\n  return validate<HiddenPostsPref & V>(v, id, hashHiddenPostsPref)\n}\n\nexport interface LabelersPref {\n  $type?: 'app.bsky.actor.defs#labelersPref'\n  labelers: LabelerPrefItem[]\n}\n\nconst hashLabelersPref = 'labelersPref'\n\nexport function isLabelersPref<V>(v: V) {\n  return is$typed(v, id, hashLabelersPref)\n}\n\nexport function validateLabelersPref<V>(v: V) {\n  return validate<LabelersPref & V>(v, id, hashLabelersPref)\n}\n\nexport interface LabelerPrefItem {\n  $type?: 'app.bsky.actor.defs#labelerPrefItem'\n  did: string\n}\n\nconst hashLabelerPrefItem = 'labelerPrefItem'\n\nexport function isLabelerPrefItem<V>(v: V) {\n  return is$typed(v, id, hashLabelerPrefItem)\n}\n\nexport function validateLabelerPrefItem<V>(v: V) {\n  return validate<LabelerPrefItem & V>(v, id, hashLabelerPrefItem)\n}\n\n/** A grab bag of state that's specific to the bsky.app program. Third-party apps shouldn't use this. */\nexport interface BskyAppStatePref {\n  $type?: 'app.bsky.actor.defs#bskyAppStatePref'\n  activeProgressGuide?: BskyAppProgressGuide\n  /** An array of tokens which identify nudges (modals, popups, tours, highlight dots) that should be shown to the user. */\n  queuedNudges?: string[]\n  /** Storage for NUXs the user has encountered. */\n  nuxs?: Nux[]\n}\n\nconst hashBskyAppStatePref = 'bskyAppStatePref'\n\nexport function isBskyAppStatePref<V>(v: V) {\n  return is$typed(v, id, hashBskyAppStatePref)\n}\n\nexport function validateBskyAppStatePref<V>(v: V) {\n  return validate<BskyAppStatePref & V>(v, id, hashBskyAppStatePref)\n}\n\n/** If set, an active progress guide. Once completed, can be set to undefined. Should have unspecced fields tracking progress. */\nexport interface BskyAppProgressGuide {\n  $type?: 'app.bsky.actor.defs#bskyAppProgressGuide'\n  guide: string\n}\n\nconst hashBskyAppProgressGuide = 'bskyAppProgressGuide'\n\nexport function isBskyAppProgressGuide<V>(v: V) {\n  return is$typed(v, id, hashBskyAppProgressGuide)\n}\n\nexport function validateBskyAppProgressGuide<V>(v: V) {\n  return validate<BskyAppProgressGuide & V>(v, id, hashBskyAppProgressGuide)\n}\n\n/** A new user experiences (NUX) storage object */\nexport interface Nux {\n  $type?: 'app.bsky.actor.defs#nux'\n  id: string\n  completed: boolean\n  /** Arbitrary data for the NUX. The structure is defined by the NUX itself. Limited to 300 characters. */\n  data?: string\n  /** The date and time at which the NUX will expire and should be considered completed. */\n  expiresAt?: string\n}\n\nconst hashNux = 'nux'\n\nexport function isNux<V>(v: V) {\n  return is$typed(v, id, hashNux)\n}\n\nexport function validateNux<V>(v: V) {\n  return validate<Nux & V>(v, id, hashNux)\n}\n\n/** Preferences for how verified accounts appear in the app. */\nexport interface VerificationPrefs {\n  $type?: 'app.bsky.actor.defs#verificationPrefs'\n  /** Hide the blue check badges for verified accounts and trusted verifiers. */\n  hideBadges: boolean\n}\n\nconst hashVerificationPrefs = 'verificationPrefs'\n\nexport function isVerificationPrefs<V>(v: V) {\n  return is$typed(v, id, hashVerificationPrefs)\n}\n\nexport function validateVerificationPrefs<V>(v: V) {\n  return validate<VerificationPrefs & V>(v, id, hashVerificationPrefs)\n}\n\n/** Default post interaction settings for the account. These values should be applied as default values when creating new posts. These refs should mirror the threadgate and postgate records exactly. */\nexport interface PostInteractionSettingsPref {\n  $type?: 'app.bsky.actor.defs#postInteractionSettingsPref'\n  /** Matches threadgate record. List of rules defining who can reply to this users posts. If value is an empty array, no one can reply. If value is undefined, anyone can reply. */\n  threadgateAllowRules?: (\n    | $Typed<AppBskyFeedThreadgate.MentionRule>\n    | $Typed<AppBskyFeedThreadgate.FollowerRule>\n    | $Typed<AppBskyFeedThreadgate.FollowingRule>\n    | $Typed<AppBskyFeedThreadgate.ListRule>\n    | { $type: string }\n  )[]\n  /** Matches postgate record. List of rules defining who can embed this users posts. If value is an empty array or is undefined, no particular rules apply and anyone can embed. */\n  postgateEmbeddingRules?: (\n    | $Typed<AppBskyFeedPostgate.DisableRule>\n    | { $type: string }\n  )[]\n}\n\nconst hashPostInteractionSettingsPref = 'postInteractionSettingsPref'\n\nexport function isPostInteractionSettingsPref<V>(v: V) {\n  return is$typed(v, id, hashPostInteractionSettingsPref)\n}\n\nexport function validatePostInteractionSettingsPref<V>(v: V) {\n  return validate<PostInteractionSettingsPref & V>(\n    v,\n    id,\n    hashPostInteractionSettingsPref,\n  )\n}\n\nexport interface StatusView {\n  $type?: 'app.bsky.actor.defs#statusView'\n  /** The status for the account. */\n  status: 'app.bsky.actor.status#live' | (string & {})\n  record: { [_ in string]: unknown }\n  embed?: $Typed<AppBskyEmbedExternal.View> | { $type: string }\n  /** The date when this status will expire. The application might choose to no longer return the status after expiration. */\n  expiresAt?: string\n  /** True if the status is not expired, false if it is expired. Only present if expiration was set. */\n  isActive?: boolean\n}\n\nconst hashStatusView = 'statusView'\n\nexport function isStatusView<V>(v: V) {\n  return is$typed(v, id, hashStatusView)\n}\n\nexport function validateStatusView<V>(v: V) {\n  return validate<StatusView & V>(v, id, hashStatusView)\n}\n"]}