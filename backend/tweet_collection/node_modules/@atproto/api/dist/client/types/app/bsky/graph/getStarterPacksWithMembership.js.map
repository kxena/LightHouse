{"version":3,"file":"getStarterPacksWithMembership.js","sourceRoot":"","sources":["../../../../../../src/client/types/app/bsky/graph/getStarterPacksWithMembership.ts"],"names":[],"mappings":";;AA0CA,gCAEC;AAWD,kEAEC;AAED,8EAMC;AA3DD,mDAA4D;AAC5D,2CAIyB;AAGzB,MAAM,QAAQ,GAAG,eAAS,EACxB,QAAQ,GAAG,mBAAS,CAAA;AACtB,MAAM,EAAE,GAAG,8CAA8C,CAAA;AA0BzD,SAAgB,UAAU,CAAC,CAAM;IAC/B,OAAO,CAAC,CAAA;AACV,CAAC;AASD,MAAM,6BAA6B,GAAG,2BAA2B,CAAA;AAEjE,SAAgB,2BAA2B,CAAI,CAAI;IACjD,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,6BAA6B,CAAC,CAAA;AACvD,CAAC;AAED,SAAgB,iCAAiC,CAAI,CAAI;IACvD,OAAO,QAAQ,CACb,CAAC,EACD,EAAE,EACF,6BAA6B,CAC9B,CAAA;AACH,CAAC","sourcesContent":["/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { HeadersMap, XRPCError } from '@atproto/xrpc'\nimport { type ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { CID } from 'multiformats/cid'\nimport { validate as _validate } from '../../../../lexicons'\nimport {\n  type $Typed,\n  is$typed as _is$typed,\n  type OmitKey,\n} from '../../../../util'\nimport type * as AppBskyGraphDefs from './defs.js'\n\nconst is$typed = _is$typed,\n  validate = _validate\nconst id = 'app.bsky.graph.getStarterPacksWithMembership'\n\nexport type QueryParams = {\n  /** The account (actor) to check for membership. */\n  actor: string\n  limit?: number\n  cursor?: string\n}\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  starterPacksWithMembership: StarterPackWithMembership[]\n}\n\nexport interface CallOptions {\n  signal?: AbortSignal\n  headers?: HeadersMap\n}\n\nexport interface Response {\n  success: boolean\n  headers: HeadersMap\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  return e\n}\n\n/** A starter pack and an optional list item indicating membership of a target user to that starter pack. */\nexport interface StarterPackWithMembership {\n  $type?: 'app.bsky.graph.getStarterPacksWithMembership#starterPackWithMembership'\n  starterPack: AppBskyGraphDefs.StarterPackView\n  listItem?: AppBskyGraphDefs.ListItemView\n}\n\nconst hashStarterPackWithMembership = 'starterPackWithMembership'\n\nexport function isStarterPackWithMembership<V>(v: V) {\n  return is$typed(v, id, hashStarterPackWithMembership)\n}\n\nexport function validateStarterPackWithMembership<V>(v: V) {\n  return validate<StarterPackWithMembership & V>(\n    v,\n    id,\n    hashStarterPackWithMembership,\n  )\n}\n"]}