{"version":3,"file":"defs.js","sourceRoot":"","sources":["../../../../../../src/client/types/app/bsky/graph/defs.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { type ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { CID } from 'multiformats/cid'\nimport { validate as _validate } from '../../../../lexicons'\nimport {\n  type $Typed,\n  is$typed as _is$typed,\n  type OmitKey,\n} from '../../../../util'\nimport type * as ComAtprotoLabelDefs from '../../../com/atproto/label/defs.js'\nimport type * as AppBskyActorDefs from '../actor/defs.js'\nimport type * as AppBskyRichtextFacet from '../richtext/facet.js'\nimport type * as AppBskyFeedDefs from '../feed/defs.js'\n\nconst is$typed = _is$typed,\n  validate = _validate\nconst id = 'app.bsky.graph.defs'\n\nexport interface ListViewBasic {\n  $type?: 'app.bsky.graph.defs#listViewBasic'\n  uri: string\n  cid: string\n  name: string\n  purpose: ListPurpose\n  avatar?: string\n  listItemCount?: number\n  labels?: ComAtprotoLabelDefs.Label[]\n  viewer?: ListViewerState\n  indexedAt?: string\n}\n\nconst hashListViewBasic = 'listViewBasic'\n\nexport function isListViewBasic<V>(v: V) {\n  return is$typed(v, id, hashListViewBasic)\n}\n\nexport function validateListViewBasic<V>(v: V) {\n  return validate<ListViewBasic & V>(v, id, hashListViewBasic)\n}\n\nexport interface ListView {\n  $type?: 'app.bsky.graph.defs#listView'\n  uri: string\n  cid: string\n  creator: AppBskyActorDefs.ProfileView\n  name: string\n  purpose: ListPurpose\n  description?: string\n  descriptionFacets?: AppBskyRichtextFacet.Main[]\n  avatar?: string\n  listItemCount?: number\n  labels?: ComAtprotoLabelDefs.Label[]\n  viewer?: ListViewerState\n  indexedAt: string\n}\n\nconst hashListView = 'listView'\n\nexport function isListView<V>(v: V) {\n  return is$typed(v, id, hashListView)\n}\n\nexport function validateListView<V>(v: V) {\n  return validate<ListView & V>(v, id, hashListView)\n}\n\nexport interface ListItemView {\n  $type?: 'app.bsky.graph.defs#listItemView'\n  uri: string\n  subject: AppBskyActorDefs.ProfileView\n}\n\nconst hashListItemView = 'listItemView'\n\nexport function isListItemView<V>(v: V) {\n  return is$typed(v, id, hashListItemView)\n}\n\nexport function validateListItemView<V>(v: V) {\n  return validate<ListItemView & V>(v, id, hashListItemView)\n}\n\nexport interface StarterPackView {\n  $type?: 'app.bsky.graph.defs#starterPackView'\n  uri: string\n  cid: string\n  record: { [_ in string]: unknown }\n  creator: AppBskyActorDefs.ProfileViewBasic\n  list?: ListViewBasic\n  listItemsSample?: ListItemView[]\n  feeds?: AppBskyFeedDefs.GeneratorView[]\n  joinedWeekCount?: number\n  joinedAllTimeCount?: number\n  labels?: ComAtprotoLabelDefs.Label[]\n  indexedAt: string\n}\n\nconst hashStarterPackView = 'starterPackView'\n\nexport function isStarterPackView<V>(v: V) {\n  return is$typed(v, id, hashStarterPackView)\n}\n\nexport function validateStarterPackView<V>(v: V) {\n  return validate<StarterPackView & V>(v, id, hashStarterPackView)\n}\n\nexport interface StarterPackViewBasic {\n  $type?: 'app.bsky.graph.defs#starterPackViewBasic'\n  uri: string\n  cid: string\n  record: { [_ in string]: unknown }\n  creator: AppBskyActorDefs.ProfileViewBasic\n  listItemCount?: number\n  joinedWeekCount?: number\n  joinedAllTimeCount?: number\n  labels?: ComAtprotoLabelDefs.Label[]\n  indexedAt: string\n}\n\nconst hashStarterPackViewBasic = 'starterPackViewBasic'\n\nexport function isStarterPackViewBasic<V>(v: V) {\n  return is$typed(v, id, hashStarterPackViewBasic)\n}\n\nexport function validateStarterPackViewBasic<V>(v: V) {\n  return validate<StarterPackViewBasic & V>(v, id, hashStarterPackViewBasic)\n}\n\nexport type ListPurpose =\n  | 'app.bsky.graph.defs#modlist'\n  | 'app.bsky.graph.defs#curatelist'\n  | 'app.bsky.graph.defs#referencelist'\n  | (string & {})\n\n/** A list of actors to apply an aggregate moderation action (mute/block) on. */\nexport const MODLIST = `${id}#modlist`\n/** A list of actors used for curation purposes such as list feeds or interaction gating. */\nexport const CURATELIST = `${id}#curatelist`\n/** A list of actors used for only for reference purposes such as within a starter pack. */\nexport const REFERENCELIST = `${id}#referencelist`\n\nexport interface ListViewerState {\n  $type?: 'app.bsky.graph.defs#listViewerState'\n  muted?: boolean\n  blocked?: string\n}\n\nconst hashListViewerState = 'listViewerState'\n\nexport function isListViewerState<V>(v: V) {\n  return is$typed(v, id, hashListViewerState)\n}\n\nexport function validateListViewerState<V>(v: V) {\n  return validate<ListViewerState & V>(v, id, hashListViewerState)\n}\n\n/** indicates that a handle or DID could not be resolved */\nexport interface NotFoundActor {\n  $type?: 'app.bsky.graph.defs#notFoundActor'\n  actor: string\n  notFound: true\n}\n\nconst hashNotFoundActor = 'notFoundActor'\n\nexport function isNotFoundActor<V>(v: V) {\n  return is$typed(v, id, hashNotFoundActor)\n}\n\nexport function validateNotFoundActor<V>(v: V) {\n  return validate<NotFoundActor & V>(v, id, hashNotFoundActor)\n}\n\n/** lists the bi-directional graph relationships between one actor (not indicated in the object), and the target actors (the DID included in the object) */\nexport interface Relationship {\n  $type?: 'app.bsky.graph.defs#relationship'\n  did: string\n  /** if the actor follows this DID, this is the AT-URI of the follow record */\n  following?: string\n  /** if the actor is followed by this DID, contains the AT-URI of the follow record */\n  followedBy?: string\n}\n\nconst hashRelationship = 'relationship'\n\nexport function isRelationship<V>(v: V) {\n  return is$typed(v, id, hashRelationship)\n}\n\nexport function validateRelationship<V>(v: V) {\n  return validate<Relationship & V>(v, id, hashRelationship)\n}\n"]}