{"version":3,"file":"deleteRecord.js","sourceRoot":"","sources":["../../../../../../src/client/types/com/atproto/repo/deleteRecord.ts"],"names":[],"mappings":";;;AAwDA,gCAMC;AA9DD;;GAEG;AACH,wCAAqD;AAGrD,mDAA4D;AAC5D,2CAIyB;AAGzB,MAAM,QAAQ,GAAG,eAAS,EACxB,QAAQ,GAAG,mBAAS,CAAA;AACtB,MAAM,EAAE,GAAG,+BAA+B,CAAA;AAkC1C,MAAa,gBAAiB,SAAQ,gBAAS;IAC7C,YAAY,GAAc;QACxB,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAA;IACxE,CAAC;CACF;AAJD,4CAIC;AAED,SAAgB,UAAU,CAAC,CAAM;IAC/B,IAAI,CAAC,YAAY,gBAAS,EAAE,CAAC;QAC3B,IAAI,CAAC,CAAC,KAAK,KAAK,aAAa;YAAE,OAAO,IAAI,gBAAgB,CAAC,CAAC,CAAC,CAAA;IAC/D,CAAC;IAED,OAAO,CAAC,CAAA;AACV,CAAC","sourcesContent":["/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { HeadersMap, XRPCError } from '@atproto/xrpc'\nimport { type ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { CID } from 'multiformats/cid'\nimport { validate as _validate } from '../../../../lexicons'\nimport {\n  type $Typed,\n  is$typed as _is$typed,\n  type OmitKey,\n} from '../../../../util'\nimport type * as ComAtprotoRepoDefs from './defs.js'\n\nconst is$typed = _is$typed,\n  validate = _validate\nconst id = 'com.atproto.repo.deleteRecord'\n\nexport type QueryParams = {}\n\nexport interface InputSchema {\n  /** The handle or DID of the repo (aka, current account). */\n  repo: string\n  /** The NSID of the record collection. */\n  collection: string\n  /** The Record Key. */\n  rkey: string\n  /** Compare and swap with the previous record by CID. */\n  swapRecord?: string\n  /** Compare and swap with the previous commit by CID. */\n  swapCommit?: string\n}\n\nexport interface OutputSchema {\n  commit?: ComAtprotoRepoDefs.CommitMeta\n}\n\nexport interface CallOptions {\n  signal?: AbortSignal\n  headers?: HeadersMap\n  qp?: QueryParams\n  encoding?: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: HeadersMap\n  data: OutputSchema\n}\n\nexport class InvalidSwapError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers, { cause: src })\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'InvalidSwap') return new InvalidSwapError(e)\n  }\n\n  return e\n}\n"]}