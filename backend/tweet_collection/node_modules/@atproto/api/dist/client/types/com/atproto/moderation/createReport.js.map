{"version":3,"file":"createReport.js","sourceRoot":"","sources":["../../../../../../src/client/types/com/atproto/moderation/createReport.ts"],"names":[],"mappings":";;AA0DA,gCAEC;AAaD,8BAEC;AAED,0CAEC;AAzED,mDAA4D;AAC5D,2CAIyB;AAKzB,MAAM,QAAQ,GAAG,eAAS,EACxB,QAAQ,GAAG,mBAAS,CAAA;AACtB,MAAM,EAAE,GAAG,qCAAqC,CAAA;AAwChD,SAAgB,UAAU,CAAC,CAAM;IAC/B,OAAO,CAAC,CAAA;AACV,CAAC;AAWD,MAAM,WAAW,GAAG,SAAS,CAAA;AAE7B,SAAgB,SAAS,CAAI,CAAI;IAC/B,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,WAAW,CAAC,CAAA;AACrC,CAAC;AAED,SAAgB,eAAe,CAAI,CAAI;IACrC,OAAO,QAAQ,CAAc,CAAC,EAAE,EAAE,EAAE,WAAW,CAAC,CAAA;AAClD,CAAC","sourcesContent":["/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { HeadersMap, XRPCError } from '@atproto/xrpc'\nimport { type ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { CID } from 'multiformats/cid'\nimport { validate as _validate } from '../../../../lexicons'\nimport {\n  type $Typed,\n  is$typed as _is$typed,\n  type OmitKey,\n} from '../../../../util'\nimport type * as ComAtprotoModerationDefs from './defs.js'\nimport type * as ComAtprotoAdminDefs from '../admin/defs.js'\nimport type * as ComAtprotoRepoStrongRef from '../repo/strongRef.js'\n\nconst is$typed = _is$typed,\n  validate = _validate\nconst id = 'com.atproto.moderation.createReport'\n\nexport type QueryParams = {}\n\nexport interface InputSchema {\n  reasonType: ComAtprotoModerationDefs.ReasonType\n  /** Additional context about the content and violation. */\n  reason?: string\n  subject:\n    | $Typed<ComAtprotoAdminDefs.RepoRef>\n    | $Typed<ComAtprotoRepoStrongRef.Main>\n    | { $type: string }\n  modTool?: ModTool\n}\n\nexport interface OutputSchema {\n  id: number\n  reasonType: ComAtprotoModerationDefs.ReasonType\n  reason?: string\n  subject:\n    | $Typed<ComAtprotoAdminDefs.RepoRef>\n    | $Typed<ComAtprotoRepoStrongRef.Main>\n    | { $type: string }\n  reportedBy: string\n  createdAt: string\n}\n\nexport interface CallOptions {\n  signal?: AbortSignal\n  headers?: HeadersMap\n  qp?: QueryParams\n  encoding?: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: HeadersMap\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  return e\n}\n\n/** Moderation tool information for tracing the source of the action */\nexport interface ModTool {\n  $type?: 'com.atproto.moderation.createReport#modTool'\n  /** Name/identifier of the source (e.g., 'bsky-app/android', 'bsky-web/chrome') */\n  name: string\n  /** Additional arbitrary metadata about the source */\n  meta?: { [_ in string]: unknown }\n}\n\nconst hashModTool = 'modTool'\n\nexport function isModTool<V>(v: V) {\n  return is$typed(v, id, hashModTool)\n}\n\nexport function validateModTool<V>(v: V) {\n  return validate<ModTool & V>(v, id, hashModTool)\n}\n"]}