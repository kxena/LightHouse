{"version":3,"file":"scheduleAction.js","sourceRoot":"","sources":["../../../../../../src/client/types/tools/ozone/moderation/scheduleAction.ts"],"names":[],"mappings":";;AA4CA,gCAEC;AAgBD,gCAEC;AAED,4CAEC;AAeD,gDAEC;AAED,4DAEC;AAUD,4DAEC;AAED,wEAEC;AAWD,gDAEC;AAED,4DAEC;AApHD,mDAA4D;AAC5D,2CAIyB;AAGzB,MAAM,QAAQ,GAAG,eAAS,EACxB,QAAQ,GAAG,mBAAS,CAAA;AACtB,MAAM,EAAE,GAAG,uCAAuC,CAAA;AA4BlD,SAAgB,UAAU,CAAC,CAAM;IAC/B,OAAO,CAAC,CAAA;AACV,CAAC;AAcD,MAAM,YAAY,GAAG,UAAU,CAAA;AAE/B,SAAgB,UAAU,CAAI,CAAI;IAChC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,YAAY,CAAC,CAAA;AACtC,CAAC;AAED,SAAgB,gBAAgB,CAAI,CAAI;IACtC,OAAO,QAAQ,CAAe,CAAC,EAAE,EAAE,EAAE,YAAY,CAAC,CAAA;AACpD,CAAC;AAaD,MAAM,oBAAoB,GAAG,kBAAkB,CAAA;AAE/C,SAAgB,kBAAkB,CAAI,CAAI;IACxC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,oBAAoB,CAAC,CAAA;AAC9C,CAAC;AAED,SAAgB,wBAAwB,CAAI,CAAI;IAC9C,OAAO,QAAQ,CAAuB,CAAC,EAAE,EAAE,EAAE,oBAAoB,CAAC,CAAA;AACpE,CAAC;AAQD,MAAM,0BAA0B,GAAG,wBAAwB,CAAA;AAE3D,SAAgB,wBAAwB,CAAI,CAAI;IAC9C,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,0BAA0B,CAAC,CAAA;AACpD,CAAC;AAED,SAAgB,8BAA8B,CAAI,CAAI;IACpD,OAAO,QAAQ,CAA6B,CAAC,EAAE,EAAE,EAAE,0BAA0B,CAAC,CAAA;AAChF,CAAC;AASD,MAAM,oBAAoB,GAAG,kBAAkB,CAAA;AAE/C,SAAgB,kBAAkB,CAAI,CAAI;IACxC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,oBAAoB,CAAC,CAAA;AAC9C,CAAC;AAED,SAAgB,wBAAwB,CAAI,CAAI;IAC9C,OAAO,QAAQ,CAAuB,CAAC,EAAE,EAAE,EAAE,oBAAoB,CAAC,CAAA;AACpE,CAAC","sourcesContent":["/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { HeadersMap, XRPCError } from '@atproto/xrpc'\nimport { type ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { CID } from 'multiformats/cid'\nimport { validate as _validate } from '../../../../lexicons'\nimport {\n  type $Typed,\n  is$typed as _is$typed,\n  type OmitKey,\n} from '../../../../util'\nimport type * as ToolsOzoneModerationDefs from './defs.js'\n\nconst is$typed = _is$typed,\n  validate = _validate\nconst id = 'tools.ozone.moderation.scheduleAction'\n\nexport type QueryParams = {}\n\nexport interface InputSchema {\n  action: $Typed<Takedown> | { $type: string }\n  /** Array of DID subjects to schedule the action for */\n  subjects: string[]\n  createdBy: string\n  scheduling: SchedulingConfig\n  modTool?: ToolsOzoneModerationDefs.ModTool\n}\n\nexport type OutputSchema = ScheduledActionResults\n\nexport interface CallOptions {\n  signal?: AbortSignal\n  headers?: HeadersMap\n  qp?: QueryParams\n  encoding?: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: HeadersMap\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  return e\n}\n\n/** Schedule a takedown action */\nexport interface Takedown {\n  $type?: 'tools.ozone.moderation.scheduleAction#takedown'\n  comment?: string\n  /** Indicates how long the takedown should be in effect before automatically expiring. */\n  durationInHours?: number\n  /** If true, all other reports on content authored by this account will be resolved (acknowledged). */\n  acknowledgeAccountSubjects?: boolean\n  /** Names/Keywords of the policies that drove the decision. */\n  policies?: string[]\n}\n\nconst hashTakedown = 'takedown'\n\nexport function isTakedown<V>(v: V) {\n  return is$typed(v, id, hashTakedown)\n}\n\nexport function validateTakedown<V>(v: V) {\n  return validate<Takedown & V>(v, id, hashTakedown)\n}\n\n/** Configuration for when the action should be executed */\nexport interface SchedulingConfig {\n  $type?: 'tools.ozone.moderation.scheduleAction#schedulingConfig'\n  /** Exact time to execute the action */\n  executeAt?: string\n  /** Earliest time to execute the action (for randomized scheduling) */\n  executeAfter?: string\n  /** Latest time to execute the action (for randomized scheduling) */\n  executeUntil?: string\n}\n\nconst hashSchedulingConfig = 'schedulingConfig'\n\nexport function isSchedulingConfig<V>(v: V) {\n  return is$typed(v, id, hashSchedulingConfig)\n}\n\nexport function validateSchedulingConfig<V>(v: V) {\n  return validate<SchedulingConfig & V>(v, id, hashSchedulingConfig)\n}\n\nexport interface ScheduledActionResults {\n  $type?: 'tools.ozone.moderation.scheduleAction#scheduledActionResults'\n  succeeded: string[]\n  failed: FailedScheduling[]\n}\n\nconst hashScheduledActionResults = 'scheduledActionResults'\n\nexport function isScheduledActionResults<V>(v: V) {\n  return is$typed(v, id, hashScheduledActionResults)\n}\n\nexport function validateScheduledActionResults<V>(v: V) {\n  return validate<ScheduledActionResults & V>(v, id, hashScheduledActionResults)\n}\n\nexport interface FailedScheduling {\n  $type?: 'tools.ozone.moderation.scheduleAction#failedScheduling'\n  subject: string\n  error: string\n  errorCode?: string\n}\n\nconst hashFailedScheduling = 'failedScheduling'\n\nexport function isFailedScheduling<V>(v: V) {\n  return is$typed(v, id, hashFailedScheduling)\n}\n\nexport function validateFailedScheduling<V>(v: V) {\n  return validate<FailedScheduling & V>(v, id, hashFailedScheduling)\n}\n"]}