{"version":3,"file":"createTemplate.js","sourceRoot":"","sources":["../../../../../../src/client/types/tools/ozone/communication/createTemplate.ts"],"names":[],"mappings":";;;AAsDA,gCAOC;AA7DD;;GAEG;AACH,wCAAqD;AAGrD,mDAA4D;AAC5D,2CAIyB;AAGzB,MAAM,QAAQ,GAAG,eAAS,EACxB,QAAQ,GAAG,mBAAS,CAAA;AACtB,MAAM,EAAE,GAAG,0CAA0C,CAAA;AAgCrD,MAAa,0BAA2B,SAAQ,gBAAS;IACvD,YAAY,GAAc;QACxB,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAA;IACxE,CAAC;CACF;AAJD,gEAIC;AAED,SAAgB,UAAU,CAAC,CAAM;IAC/B,IAAI,CAAC,YAAY,gBAAS,EAAE,CAAC;QAC3B,IAAI,CAAC,CAAC,KAAK,KAAK,uBAAuB;YACrC,OAAO,IAAI,0BAA0B,CAAC,CAAC,CAAC,CAAA;IAC5C,CAAC;IAED,OAAO,CAAC,CAAA;AACV,CAAC","sourcesContent":["/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { HeadersMap, XRPCError } from '@atproto/xrpc'\nimport { type ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { CID } from 'multiformats/cid'\nimport { validate as _validate } from '../../../../lexicons'\nimport {\n  type $Typed,\n  is$typed as _is$typed,\n  type OmitKey,\n} from '../../../../util'\nimport type * as ToolsOzoneCommunicationDefs from './defs.js'\n\nconst is$typed = _is$typed,\n  validate = _validate\nconst id = 'tools.ozone.communication.createTemplate'\n\nexport type QueryParams = {}\n\nexport interface InputSchema {\n  /** Name of the template. */\n  name: string\n  /** Content of the template, markdown supported, can contain variable placeholders. */\n  contentMarkdown: string\n  /** Subject of the message, used in emails. */\n  subject: string\n  /** Message language. */\n  lang?: string\n  /** DID of the user who is creating the template. */\n  createdBy?: string\n}\n\nexport type OutputSchema = ToolsOzoneCommunicationDefs.TemplateView\n\nexport interface CallOptions {\n  signal?: AbortSignal\n  headers?: HeadersMap\n  qp?: QueryParams\n  encoding?: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: HeadersMap\n  data: OutputSchema\n}\n\nexport class DuplicateTemplateNameError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers, { cause: src })\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'DuplicateTemplateName')\n      return new DuplicateTemplateNameError(e)\n  }\n\n  return e\n}\n"]}