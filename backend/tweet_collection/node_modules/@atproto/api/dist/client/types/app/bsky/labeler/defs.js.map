{"version":3,"file":"defs.js","sourceRoot":"","sources":["../../../../../../src/client/types/app/bsky/labeler/defs.ts"],"names":[],"mappings":";;AAgCA,sCAEC;AAED,kDAEC;AAsBD,sDAEC;AAED,kEAEC;AASD,oDAEC;AAED,gEAEC;AAYD,8CAEC;AAED,0DAEC;AA9FD,mDAA4D;AAC5D,2CAIyB;AAKzB,MAAM,QAAQ,GAAG,eAAS,EACxB,QAAQ,GAAG,mBAAS,CAAA;AACtB,MAAM,EAAE,GAAG,uBAAuB,CAAA;AAalC,MAAM,eAAe,GAAG,aAAa,CAAA;AAErC,SAAgB,aAAa,CAAI,CAAI;IACnC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,eAAe,CAAC,CAAA;AACzC,CAAC;AAED,SAAgB,mBAAmB,CAAI,CAAI;IACzC,OAAO,QAAQ,CAAkB,CAAC,EAAE,EAAE,EAAE,eAAe,CAAC,CAAA;AAC1D,CAAC;AAoBD,MAAM,uBAAuB,GAAG,qBAAqB,CAAA;AAErD,SAAgB,qBAAqB,CAAI,CAAI;IAC3C,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,uBAAuB,CAAC,CAAA;AACjD,CAAC;AAED,SAAgB,2BAA2B,CAAI,CAAI;IACjD,OAAO,QAAQ,CAA0B,CAAC,EAAE,EAAE,EAAE,uBAAuB,CAAC,CAAA;AAC1E,CAAC;AAOD,MAAM,sBAAsB,GAAG,oBAAoB,CAAA;AAEnD,SAAgB,oBAAoB,CAAI,CAAI;IAC1C,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,sBAAsB,CAAC,CAAA;AAChD,CAAC;AAED,SAAgB,0BAA0B,CAAI,CAAI;IAChD,OAAO,QAAQ,CAAyB,CAAC,EAAE,EAAE,EAAE,sBAAsB,CAAC,CAAA;AACxE,CAAC;AAUD,MAAM,mBAAmB,GAAG,iBAAiB,CAAA;AAE7C,SAAgB,iBAAiB,CAAI,CAAI;IACvC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,mBAAmB,CAAC,CAAA;AAC7C,CAAC;AAED,SAAgB,uBAAuB,CAAI,CAAI;IAC7C,OAAO,QAAQ,CAAsB,CAAC,EAAE,EAAE,EAAE,mBAAmB,CAAC,CAAA;AAClE,CAAC","sourcesContent":["/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { type ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { CID } from 'multiformats/cid'\nimport { validate as _validate } from '../../../../lexicons'\nimport {\n  type $Typed,\n  is$typed as _is$typed,\n  type OmitKey,\n} from '../../../../util'\nimport type * as AppBskyActorDefs from '../actor/defs.js'\nimport type * as ComAtprotoLabelDefs from '../../../com/atproto/label/defs.js'\nimport type * as ComAtprotoModerationDefs from '../../../com/atproto/moderation/defs.js'\n\nconst is$typed = _is$typed,\n  validate = _validate\nconst id = 'app.bsky.labeler.defs'\n\nexport interface LabelerView {\n  $type?: 'app.bsky.labeler.defs#labelerView'\n  uri: string\n  cid: string\n  creator: AppBskyActorDefs.ProfileView\n  likeCount?: number\n  viewer?: LabelerViewerState\n  indexedAt: string\n  labels?: ComAtprotoLabelDefs.Label[]\n}\n\nconst hashLabelerView = 'labelerView'\n\nexport function isLabelerView<V>(v: V) {\n  return is$typed(v, id, hashLabelerView)\n}\n\nexport function validateLabelerView<V>(v: V) {\n  return validate<LabelerView & V>(v, id, hashLabelerView)\n}\n\nexport interface LabelerViewDetailed {\n  $type?: 'app.bsky.labeler.defs#labelerViewDetailed'\n  uri: string\n  cid: string\n  creator: AppBskyActorDefs.ProfileView\n  policies: LabelerPolicies\n  likeCount?: number\n  viewer?: LabelerViewerState\n  indexedAt: string\n  labels?: ComAtprotoLabelDefs.Label[]\n  /** The set of report reason 'codes' which are in-scope for this service to review and action. These usually align to policy categories. If not defined (distinct from empty array), all reason types are allowed. */\n  reasonTypes?: ComAtprotoModerationDefs.ReasonType[]\n  /** The set of subject types (account, record, etc) this service accepts reports on. */\n  subjectTypes?: ComAtprotoModerationDefs.SubjectType[]\n  /** Set of record types (collection NSIDs) which can be reported to this service. If not defined (distinct from empty array), default is any record type. */\n  subjectCollections?: string[]\n}\n\nconst hashLabelerViewDetailed = 'labelerViewDetailed'\n\nexport function isLabelerViewDetailed<V>(v: V) {\n  return is$typed(v, id, hashLabelerViewDetailed)\n}\n\nexport function validateLabelerViewDetailed<V>(v: V) {\n  return validate<LabelerViewDetailed & V>(v, id, hashLabelerViewDetailed)\n}\n\nexport interface LabelerViewerState {\n  $type?: 'app.bsky.labeler.defs#labelerViewerState'\n  like?: string\n}\n\nconst hashLabelerViewerState = 'labelerViewerState'\n\nexport function isLabelerViewerState<V>(v: V) {\n  return is$typed(v, id, hashLabelerViewerState)\n}\n\nexport function validateLabelerViewerState<V>(v: V) {\n  return validate<LabelerViewerState & V>(v, id, hashLabelerViewerState)\n}\n\nexport interface LabelerPolicies {\n  $type?: 'app.bsky.labeler.defs#labelerPolicies'\n  /** The label values which this labeler publishes. May include global or custom labels. */\n  labelValues: ComAtprotoLabelDefs.LabelValue[]\n  /** Label values created by this labeler and scoped exclusively to it. Labels defined here will override global label definitions for this labeler. */\n  labelValueDefinitions?: ComAtprotoLabelDefs.LabelValueDefinition[]\n}\n\nconst hashLabelerPolicies = 'labelerPolicies'\n\nexport function isLabelerPolicies<V>(v: V) {\n  return is$typed(v, id, hashLabelerPolicies)\n}\n\nexport function validateLabelerPolicies<V>(v: V) {\n  return validate<LabelerPolicies & V>(v, id, hashLabelerPolicies)\n}\n"]}