{"version":3,"file":"defs.js","sourceRoot":"","sources":["../../../../../../src/client/types/app/bsky/notification/defs.ts"],"names":[],"mappings":";;AAsBA,0CAEC;AAED,sDAEC;AAUD,4CAEC;AAED,wDAEC;AAWD,wDAEC;AAED,oEAEC;AAUD,oCAEC;AAED,gDAEC;AAqBD,sCAEC;AAED,kDAEC;AAUD,wDAEC;AAED,oEAEC;AAWD,sEAEC;AAED,kFAMC;AAxID,mDAA4D;AAC5D,2CAIyB;AAEzB,MAAM,QAAQ,GAAG,eAAS,EACxB,QAAQ,GAAG,mBAAS,CAAA;AACtB,MAAM,EAAE,GAAG,4BAA4B,CAAA;AAMvC,MAAM,iBAAiB,GAAG,eAAe,CAAA;AAEzC,SAAgB,eAAe,CAAI,CAAI;IACrC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAA;AAC3C,CAAC;AAED,SAAgB,qBAAqB,CAAI,CAAI;IAC3C,OAAO,QAAQ,CAAoB,CAAC,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAA;AAC9D,CAAC;AAQD,MAAM,kBAAkB,GAAG,gBAAgB,CAAA;AAE3C,SAAgB,gBAAgB,CAAI,CAAI;IACtC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,kBAAkB,CAAC,CAAA;AAC5C,CAAC;AAED,SAAgB,sBAAsB,CAAI,CAAI;IAC5C,OAAO,QAAQ,CAAqB,CAAC,EAAE,EAAE,EAAE,kBAAkB,CAAC,CAAA;AAChE,CAAC;AASD,MAAM,wBAAwB,GAAG,sBAAsB,CAAA;AAEvD,SAAgB,sBAAsB,CAAI,CAAI;IAC5C,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,wBAAwB,CAAC,CAAA;AAClD,CAAC;AAED,SAAgB,4BAA4B,CAAI,CAAI;IAClD,OAAO,QAAQ,CAA2B,CAAC,EAAE,EAAE,EAAE,wBAAwB,CAAC,CAAA;AAC5E,CAAC;AAQD,MAAM,cAAc,GAAG,YAAY,CAAA;AAEnC,SAAgB,YAAY,CAAI,CAAI;IAClC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,cAAc,CAAC,CAAA;AACxC,CAAC;AAED,SAAgB,kBAAkB,CAAI,CAAI;IACxC,OAAO,QAAQ,CAAiB,CAAC,EAAE,EAAE,EAAE,cAAc,CAAC,CAAA;AACxD,CAAC;AAmBD,MAAM,eAAe,GAAG,aAAa,CAAA;AAErC,SAAgB,aAAa,CAAI,CAAI;IACnC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,eAAe,CAAC,CAAA;AACzC,CAAC;AAED,SAAgB,mBAAmB,CAAI,CAAI;IACzC,OAAO,QAAQ,CAAkB,CAAC,EAAE,EAAE,EAAE,eAAe,CAAC,CAAA;AAC1D,CAAC;AAQD,MAAM,wBAAwB,GAAG,sBAAsB,CAAA;AAEvD,SAAgB,sBAAsB,CAAI,CAAI;IAC5C,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,wBAAwB,CAAC,CAAA;AAClD,CAAC;AAED,SAAgB,4BAA4B,CAAI,CAAI;IAClD,OAAO,QAAQ,CAA2B,CAAC,EAAE,EAAE,EAAE,wBAAwB,CAAC,CAAA;AAC5E,CAAC;AASD,MAAM,+BAA+B,GAAG,6BAA6B,CAAA;AAErE,SAAgB,6BAA6B,CAAI,CAAI;IACnD,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,+BAA+B,CAAC,CAAA;AACzD,CAAC;AAED,SAAgB,mCAAmC,CAAI,CAAI;IACzD,OAAO,QAAQ,CACb,CAAC,EACD,EAAE,EACF,+BAA+B,CAChC,CAAA;AACH,CAAC","sourcesContent":["/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { type ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { CID } from 'multiformats/cid'\nimport { validate as _validate } from '../../../../lexicons'\nimport {\n  type $Typed,\n  is$typed as _is$typed,\n  type OmitKey,\n} from '../../../../util'\n\nconst is$typed = _is$typed,\n  validate = _validate\nconst id = 'app.bsky.notification.defs'\n\nexport interface RecordDeleted {\n  $type?: 'app.bsky.notification.defs#recordDeleted'\n}\n\nconst hashRecordDeleted = 'recordDeleted'\n\nexport function isRecordDeleted<V>(v: V) {\n  return is$typed(v, id, hashRecordDeleted)\n}\n\nexport function validateRecordDeleted<V>(v: V) {\n  return validate<RecordDeleted & V>(v, id, hashRecordDeleted)\n}\n\nexport interface ChatPreference {\n  $type?: 'app.bsky.notification.defs#chatPreference'\n  include: 'all' | 'accepted' | (string & {})\n  push: boolean\n}\n\nconst hashChatPreference = 'chatPreference'\n\nexport function isChatPreference<V>(v: V) {\n  return is$typed(v, id, hashChatPreference)\n}\n\nexport function validateChatPreference<V>(v: V) {\n  return validate<ChatPreference & V>(v, id, hashChatPreference)\n}\n\nexport interface FilterablePreference {\n  $type?: 'app.bsky.notification.defs#filterablePreference'\n  include: 'all' | 'follows' | (string & {})\n  list: boolean\n  push: boolean\n}\n\nconst hashFilterablePreference = 'filterablePreference'\n\nexport function isFilterablePreference<V>(v: V) {\n  return is$typed(v, id, hashFilterablePreference)\n}\n\nexport function validateFilterablePreference<V>(v: V) {\n  return validate<FilterablePreference & V>(v, id, hashFilterablePreference)\n}\n\nexport interface Preference {\n  $type?: 'app.bsky.notification.defs#preference'\n  list: boolean\n  push: boolean\n}\n\nconst hashPreference = 'preference'\n\nexport function isPreference<V>(v: V) {\n  return is$typed(v, id, hashPreference)\n}\n\nexport function validatePreference<V>(v: V) {\n  return validate<Preference & V>(v, id, hashPreference)\n}\n\nexport interface Preferences {\n  $type?: 'app.bsky.notification.defs#preferences'\n  chat: ChatPreference\n  follow: FilterablePreference\n  like: FilterablePreference\n  likeViaRepost: FilterablePreference\n  mention: FilterablePreference\n  quote: FilterablePreference\n  reply: FilterablePreference\n  repost: FilterablePreference\n  repostViaRepost: FilterablePreference\n  starterpackJoined: Preference\n  subscribedPost: Preference\n  unverified: Preference\n  verified: Preference\n}\n\nconst hashPreferences = 'preferences'\n\nexport function isPreferences<V>(v: V) {\n  return is$typed(v, id, hashPreferences)\n}\n\nexport function validatePreferences<V>(v: V) {\n  return validate<Preferences & V>(v, id, hashPreferences)\n}\n\nexport interface ActivitySubscription {\n  $type?: 'app.bsky.notification.defs#activitySubscription'\n  post: boolean\n  reply: boolean\n}\n\nconst hashActivitySubscription = 'activitySubscription'\n\nexport function isActivitySubscription<V>(v: V) {\n  return is$typed(v, id, hashActivitySubscription)\n}\n\nexport function validateActivitySubscription<V>(v: V) {\n  return validate<ActivitySubscription & V>(v, id, hashActivitySubscription)\n}\n\n/** Object used to store activity subscription data in stash. */\nexport interface SubjectActivitySubscription {\n  $type?: 'app.bsky.notification.defs#subjectActivitySubscription'\n  subject: string\n  activitySubscription: ActivitySubscription\n}\n\nconst hashSubjectActivitySubscription = 'subjectActivitySubscription'\n\nexport function isSubjectActivitySubscription<V>(v: V) {\n  return is$typed(v, id, hashSubjectActivitySubscription)\n}\n\nexport function validateSubjectActivitySubscription<V>(v: V) {\n  return validate<SubjectActivitySubscription & V>(\n    v,\n    id,\n    hashSubjectActivitySubscription,\n  )\n}\n"]}