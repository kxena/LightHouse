{"version":3,"file":"defs.js","sourceRoot":"","sources":["../../../../../../src/client/types/chat/bsky/convo/defs.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { type ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { CID } from 'multiformats/cid'\nimport { validate as _validate } from '../../../../lexicons'\nimport {\n  type $Typed,\n  is$typed as _is$typed,\n  type OmitKey,\n} from '../../../../util'\nimport type * as AppBskyRichtextFacet from '../../../app/bsky/richtext/facet.js'\nimport type * as AppBskyEmbedRecord from '../../../app/bsky/embed/record.js'\nimport type * as ChatBskyActorDefs from '../actor/defs.js'\n\nconst is$typed = _is$typed,\n  validate = _validate\nconst id = 'chat.bsky.convo.defs'\n\nexport interface MessageRef {\n  $type?: 'chat.bsky.convo.defs#messageRef'\n  did: string\n  convoId: string\n  messageId: string\n}\n\nconst hashMessageRef = 'messageRef'\n\nexport function isMessageRef<V>(v: V) {\n  return is$typed(v, id, hashMessageRef)\n}\n\nexport function validateMessageRef<V>(v: V) {\n  return validate<MessageRef & V>(v, id, hashMessageRef)\n}\n\nexport interface MessageInput {\n  $type?: 'chat.bsky.convo.defs#messageInput'\n  text: string\n  /** Annotations of text (mentions, URLs, hashtags, etc) */\n  facets?: AppBskyRichtextFacet.Main[]\n  embed?: $Typed<AppBskyEmbedRecord.Main> | { $type: string }\n}\n\nconst hashMessageInput = 'messageInput'\n\nexport function isMessageInput<V>(v: V) {\n  return is$typed(v, id, hashMessageInput)\n}\n\nexport function validateMessageInput<V>(v: V) {\n  return validate<MessageInput & V>(v, id, hashMessageInput)\n}\n\nexport interface MessageView {\n  $type?: 'chat.bsky.convo.defs#messageView'\n  id: string\n  rev: string\n  text: string\n  /** Annotations of text (mentions, URLs, hashtags, etc) */\n  facets?: AppBskyRichtextFacet.Main[]\n  embed?: $Typed<AppBskyEmbedRecord.View> | { $type: string }\n  /** Reactions to this message, in ascending order of creation time. */\n  reactions?: ReactionView[]\n  sender: MessageViewSender\n  sentAt: string\n}\n\nconst hashMessageView = 'messageView'\n\nexport function isMessageView<V>(v: V) {\n  return is$typed(v, id, hashMessageView)\n}\n\nexport function validateMessageView<V>(v: V) {\n  return validate<MessageView & V>(v, id, hashMessageView)\n}\n\nexport interface DeletedMessageView {\n  $type?: 'chat.bsky.convo.defs#deletedMessageView'\n  id: string\n  rev: string\n  sender: MessageViewSender\n  sentAt: string\n}\n\nconst hashDeletedMessageView = 'deletedMessageView'\n\nexport function isDeletedMessageView<V>(v: V) {\n  return is$typed(v, id, hashDeletedMessageView)\n}\n\nexport function validateDeletedMessageView<V>(v: V) {\n  return validate<DeletedMessageView & V>(v, id, hashDeletedMessageView)\n}\n\nexport interface MessageViewSender {\n  $type?: 'chat.bsky.convo.defs#messageViewSender'\n  did: string\n}\n\nconst hashMessageViewSender = 'messageViewSender'\n\nexport function isMessageViewSender<V>(v: V) {\n  return is$typed(v, id, hashMessageViewSender)\n}\n\nexport function validateMessageViewSender<V>(v: V) {\n  return validate<MessageViewSender & V>(v, id, hashMessageViewSender)\n}\n\nexport interface ReactionView {\n  $type?: 'chat.bsky.convo.defs#reactionView'\n  value: string\n  sender: ReactionViewSender\n  createdAt: string\n}\n\nconst hashReactionView = 'reactionView'\n\nexport function isReactionView<V>(v: V) {\n  return is$typed(v, id, hashReactionView)\n}\n\nexport function validateReactionView<V>(v: V) {\n  return validate<ReactionView & V>(v, id, hashReactionView)\n}\n\nexport interface ReactionViewSender {\n  $type?: 'chat.bsky.convo.defs#reactionViewSender'\n  did: string\n}\n\nconst hashReactionViewSender = 'reactionViewSender'\n\nexport function isReactionViewSender<V>(v: V) {\n  return is$typed(v, id, hashReactionViewSender)\n}\n\nexport function validateReactionViewSender<V>(v: V) {\n  return validate<ReactionViewSender & V>(v, id, hashReactionViewSender)\n}\n\nexport interface MessageAndReactionView {\n  $type?: 'chat.bsky.convo.defs#messageAndReactionView'\n  message: MessageView\n  reaction: ReactionView\n}\n\nconst hashMessageAndReactionView = 'messageAndReactionView'\n\nexport function isMessageAndReactionView<V>(v: V) {\n  return is$typed(v, id, hashMessageAndReactionView)\n}\n\nexport function validateMessageAndReactionView<V>(v: V) {\n  return validate<MessageAndReactionView & V>(v, id, hashMessageAndReactionView)\n}\n\nexport interface ConvoView {\n  $type?: 'chat.bsky.convo.defs#convoView'\n  id: string\n  rev: string\n  members: ChatBskyActorDefs.ProfileViewBasic[]\n  lastMessage?:\n    | $Typed<MessageView>\n    | $Typed<DeletedMessageView>\n    | { $type: string }\n  lastReaction?: $Typed<MessageAndReactionView> | { $type: string }\n  muted: boolean\n  status?: 'request' | 'accepted' | (string & {})\n  unreadCount: number\n}\n\nconst hashConvoView = 'convoView'\n\nexport function isConvoView<V>(v: V) {\n  return is$typed(v, id, hashConvoView)\n}\n\nexport function validateConvoView<V>(v: V) {\n  return validate<ConvoView & V>(v, id, hashConvoView)\n}\n\nexport interface LogBeginConvo {\n  $type?: 'chat.bsky.convo.defs#logBeginConvo'\n  rev: string\n  convoId: string\n}\n\nconst hashLogBeginConvo = 'logBeginConvo'\n\nexport function isLogBeginConvo<V>(v: V) {\n  return is$typed(v, id, hashLogBeginConvo)\n}\n\nexport function validateLogBeginConvo<V>(v: V) {\n  return validate<LogBeginConvo & V>(v, id, hashLogBeginConvo)\n}\n\nexport interface LogAcceptConvo {\n  $type?: 'chat.bsky.convo.defs#logAcceptConvo'\n  rev: string\n  convoId: string\n}\n\nconst hashLogAcceptConvo = 'logAcceptConvo'\n\nexport function isLogAcceptConvo<V>(v: V) {\n  return is$typed(v, id, hashLogAcceptConvo)\n}\n\nexport function validateLogAcceptConvo<V>(v: V) {\n  return validate<LogAcceptConvo & V>(v, id, hashLogAcceptConvo)\n}\n\nexport interface LogLeaveConvo {\n  $type?: 'chat.bsky.convo.defs#logLeaveConvo'\n  rev: string\n  convoId: string\n}\n\nconst hashLogLeaveConvo = 'logLeaveConvo'\n\nexport function isLogLeaveConvo<V>(v: V) {\n  return is$typed(v, id, hashLogLeaveConvo)\n}\n\nexport function validateLogLeaveConvo<V>(v: V) {\n  return validate<LogLeaveConvo & V>(v, id, hashLogLeaveConvo)\n}\n\nexport interface LogMuteConvo {\n  $type?: 'chat.bsky.convo.defs#logMuteConvo'\n  rev: string\n  convoId: string\n}\n\nconst hashLogMuteConvo = 'logMuteConvo'\n\nexport function isLogMuteConvo<V>(v: V) {\n  return is$typed(v, id, hashLogMuteConvo)\n}\n\nexport function validateLogMuteConvo<V>(v: V) {\n  return validate<LogMuteConvo & V>(v, id, hashLogMuteConvo)\n}\n\nexport interface LogUnmuteConvo {\n  $type?: 'chat.bsky.convo.defs#logUnmuteConvo'\n  rev: string\n  convoId: string\n}\n\nconst hashLogUnmuteConvo = 'logUnmuteConvo'\n\nexport function isLogUnmuteConvo<V>(v: V) {\n  return is$typed(v, id, hashLogUnmuteConvo)\n}\n\nexport function validateLogUnmuteConvo<V>(v: V) {\n  return validate<LogUnmuteConvo & V>(v, id, hashLogUnmuteConvo)\n}\n\nexport interface LogCreateMessage {\n  $type?: 'chat.bsky.convo.defs#logCreateMessage'\n  rev: string\n  convoId: string\n  message: $Typed<MessageView> | $Typed<DeletedMessageView> | { $type: string }\n}\n\nconst hashLogCreateMessage = 'logCreateMessage'\n\nexport function isLogCreateMessage<V>(v: V) {\n  return is$typed(v, id, hashLogCreateMessage)\n}\n\nexport function validateLogCreateMessage<V>(v: V) {\n  return validate<LogCreateMessage & V>(v, id, hashLogCreateMessage)\n}\n\nexport interface LogDeleteMessage {\n  $type?: 'chat.bsky.convo.defs#logDeleteMessage'\n  rev: string\n  convoId: string\n  message: $Typed<MessageView> | $Typed<DeletedMessageView> | { $type: string }\n}\n\nconst hashLogDeleteMessage = 'logDeleteMessage'\n\nexport function isLogDeleteMessage<V>(v: V) {\n  return is$typed(v, id, hashLogDeleteMessage)\n}\n\nexport function validateLogDeleteMessage<V>(v: V) {\n  return validate<LogDeleteMessage & V>(v, id, hashLogDeleteMessage)\n}\n\nexport interface LogReadMessage {\n  $type?: 'chat.bsky.convo.defs#logReadMessage'\n  rev: string\n  convoId: string\n  message: $Typed<MessageView> | $Typed<DeletedMessageView> | { $type: string }\n}\n\nconst hashLogReadMessage = 'logReadMessage'\n\nexport function isLogReadMessage<V>(v: V) {\n  return is$typed(v, id, hashLogReadMessage)\n}\n\nexport function validateLogReadMessage<V>(v: V) {\n  return validate<LogReadMessage & V>(v, id, hashLogReadMessage)\n}\n\nexport interface LogAddReaction {\n  $type?: 'chat.bsky.convo.defs#logAddReaction'\n  rev: string\n  convoId: string\n  message: $Typed<MessageView> | $Typed<DeletedMessageView> | { $type: string }\n  reaction: ReactionView\n}\n\nconst hashLogAddReaction = 'logAddReaction'\n\nexport function isLogAddReaction<V>(v: V) {\n  return is$typed(v, id, hashLogAddReaction)\n}\n\nexport function validateLogAddReaction<V>(v: V) {\n  return validate<LogAddReaction & V>(v, id, hashLogAddReaction)\n}\n\nexport interface LogRemoveReaction {\n  $type?: 'chat.bsky.convo.defs#logRemoveReaction'\n  rev: string\n  convoId: string\n  message: $Typed<MessageView> | $Typed<DeletedMessageView> | { $type: string }\n  reaction: ReactionView\n}\n\nconst hashLogRemoveReaction = 'logRemoveReaction'\n\nexport function isLogRemoveReaction<V>(v: V) {\n  return is$typed(v, id, hashLogRemoveReaction)\n}\n\nexport function validateLogRemoveReaction<V>(v: V) {\n  return validate<LogRemoveReaction & V>(v, id, hashLogRemoveReaction)\n}\n"]}