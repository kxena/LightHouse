{"version":3,"file":"checkHandleAvailability.js","sourceRoot":"","sources":["../../../../../../src/client/types/com/atproto/temp/checkHandleAvailability.ts"],"names":[],"mappings":";;;AAqDA,gCAMC;AASD,8CAEC;AAED,0DAEC;AAWD,kDAEC;AAED,8DAEC;AAWD,oCAEC;AAED,gDAEC;AA5GD;;GAEG;AACH,wCAAqD;AAGrD,mDAA4D;AAC5D,2CAIyB;AAEzB,MAAM,QAAQ,GAAG,eAAS,EACxB,QAAQ,GAAG,mBAAS,CAAA;AACtB,MAAM,EAAE,GAAG,0CAA0C,CAAA;AAgCrD,MAAa,iBAAkB,SAAQ,gBAAS;IAC9C,YAAY,GAAc;QACxB,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAA;IACxE,CAAC;CACF;AAJD,8CAIC;AAED,SAAgB,UAAU,CAAC,CAAM;IAC/B,IAAI,CAAC,YAAY,gBAAS,EAAE,CAAC;QAC3B,IAAI,CAAC,CAAC,KAAK,KAAK,cAAc;YAAE,OAAO,IAAI,iBAAiB,CAAC,CAAC,CAAC,CAAA;IACjE,CAAC;IAED,OAAO,CAAC,CAAA;AACV,CAAC;AAOD,MAAM,mBAAmB,GAAG,iBAAiB,CAAA;AAE7C,SAAgB,iBAAiB,CAAI,CAAI;IACvC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,mBAAmB,CAAC,CAAA;AAC7C,CAAC;AAED,SAAgB,uBAAuB,CAAI,CAAI;IAC7C,OAAO,QAAQ,CAAsB,CAAC,EAAE,EAAE,EAAE,mBAAmB,CAAC,CAAA;AAClE,CAAC;AASD,MAAM,qBAAqB,GAAG,mBAAmB,CAAA;AAEjD,SAAgB,mBAAmB,CAAI,CAAI;IACzC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,qBAAqB,CAAC,CAAA;AAC/C,CAAC;AAED,SAAgB,yBAAyB,CAAI,CAAI;IAC/C,OAAO,QAAQ,CAAwB,CAAC,EAAE,EAAE,EAAE,qBAAqB,CAAC,CAAA;AACtE,CAAC;AASD,MAAM,cAAc,GAAG,YAAY,CAAA;AAEnC,SAAgB,YAAY,CAAI,CAAI;IAClC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,cAAc,CAAC,CAAA;AACxC,CAAC;AAED,SAAgB,kBAAkB,CAAI,CAAI;IACxC,OAAO,QAAQ,CAAiB,CAAC,EAAE,EAAE,EAAE,cAAc,CAAC,CAAA;AACxD,CAAC","sourcesContent":["/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { HeadersMap, XRPCError } from '@atproto/xrpc'\nimport { type ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { CID } from 'multiformats/cid'\nimport { validate as _validate } from '../../../../lexicons'\nimport {\n  type $Typed,\n  is$typed as _is$typed,\n  type OmitKey,\n} from '../../../../util'\n\nconst is$typed = _is$typed,\n  validate = _validate\nconst id = 'com.atproto.temp.checkHandleAvailability'\n\nexport type QueryParams = {\n  /** Tentative handle. Will be checked for availability or used to build handle suggestions. */\n  handle: string\n  /** User-provided email. Might be used to build handle suggestions. */\n  email?: string\n  /** User-provided birth date. Might be used to build handle suggestions. */\n  birthDate?: string\n}\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  /** Echo of the input handle. */\n  handle: string\n  result:\n    | $Typed<ResultAvailable>\n    | $Typed<ResultUnavailable>\n    | { $type: string }\n}\n\nexport interface CallOptions {\n  signal?: AbortSignal\n  headers?: HeadersMap\n}\n\nexport interface Response {\n  success: boolean\n  headers: HeadersMap\n  data: OutputSchema\n}\n\nexport class InvalidEmailError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers, { cause: src })\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'InvalidEmail') return new InvalidEmailError(e)\n  }\n\n  return e\n}\n\n/** Indicates the provided handle is available. */\nexport interface ResultAvailable {\n  $type?: 'com.atproto.temp.checkHandleAvailability#resultAvailable'\n}\n\nconst hashResultAvailable = 'resultAvailable'\n\nexport function isResultAvailable<V>(v: V) {\n  return is$typed(v, id, hashResultAvailable)\n}\n\nexport function validateResultAvailable<V>(v: V) {\n  return validate<ResultAvailable & V>(v, id, hashResultAvailable)\n}\n\n/** Indicates the provided handle is unavailable and gives suggestions of available handles. */\nexport interface ResultUnavailable {\n  $type?: 'com.atproto.temp.checkHandleAvailability#resultUnavailable'\n  /** List of suggested handles based on the provided inputs. */\n  suggestions: Suggestion[]\n}\n\nconst hashResultUnavailable = 'resultUnavailable'\n\nexport function isResultUnavailable<V>(v: V) {\n  return is$typed(v, id, hashResultUnavailable)\n}\n\nexport function validateResultUnavailable<V>(v: V) {\n  return validate<ResultUnavailable & V>(v, id, hashResultUnavailable)\n}\n\nexport interface Suggestion {\n  $type?: 'com.atproto.temp.checkHandleAvailability#suggestion'\n  handle: string\n  /** Method used to build this suggestion. Should be considered opaque to clients. Can be used for metrics. */\n  method: string\n}\n\nconst hashSuggestion = 'suggestion'\n\nexport function isSuggestion<V>(v: V) {\n  return is$typed(v, id, hashSuggestion)\n}\n\nexport function validateSuggestion<V>(v: V) {\n  return validate<Suggestion & V>(v, id, hashSuggestion)\n}\n"]}