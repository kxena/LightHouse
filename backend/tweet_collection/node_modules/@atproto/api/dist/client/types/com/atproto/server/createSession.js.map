{"version":3,"file":"createSession.js","sourceRoot":"","sources":["../../../../../../src/client/types/com/atproto/server/createSession.ts"],"names":[],"mappings":";;;AAmEA,gCAQC;AA3ED;;GAEG;AACH,wCAAqD;AAGrD,mDAA4D;AAC5D,2CAIyB;AAEzB,MAAM,QAAQ,GAAG,eAAS,EACxB,QAAQ,GAAG,mBAAS,CAAA;AACtB,MAAM,EAAE,GAAG,kCAAkC,CAAA;AAwC7C,MAAa,oBAAqB,SAAQ,gBAAS;IACjD,YAAY,GAAc;QACxB,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAA;IACxE,CAAC;CACF;AAJD,oDAIC;AAED,MAAa,4BAA6B,SAAQ,gBAAS;IACzD,YAAY,GAAc;QACxB,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAA;IACxE,CAAC;CACF;AAJD,oEAIC;AAED,SAAgB,UAAU,CAAC,CAAM;IAC/B,IAAI,CAAC,YAAY,gBAAS,EAAE,CAAC;QAC3B,IAAI,CAAC,CAAC,KAAK,KAAK,iBAAiB;YAAE,OAAO,IAAI,oBAAoB,CAAC,CAAC,CAAC,CAAA;QACrE,IAAI,CAAC,CAAC,KAAK,KAAK,yBAAyB;YACvC,OAAO,IAAI,4BAA4B,CAAC,CAAC,CAAC,CAAA;IAC9C,CAAC;IAED,OAAO,CAAC,CAAA;AACV,CAAC","sourcesContent":["/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { HeadersMap, XRPCError } from '@atproto/xrpc'\nimport { type ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { CID } from 'multiformats/cid'\nimport { validate as _validate } from '../../../../lexicons'\nimport {\n  type $Typed,\n  is$typed as _is$typed,\n  type OmitKey,\n} from '../../../../util'\n\nconst is$typed = _is$typed,\n  validate = _validate\nconst id = 'com.atproto.server.createSession'\n\nexport type QueryParams = {}\n\nexport interface InputSchema {\n  /** Handle or other identifier supported by the server for the authenticating user. */\n  identifier: string\n  password: string\n  authFactorToken?: string\n  /** When true, instead of throwing error for takendown accounts, a valid response with a narrow scoped token will be returned */\n  allowTakendown?: boolean\n}\n\nexport interface OutputSchema {\n  accessJwt: string\n  refreshJwt: string\n  handle: string\n  did: string\n  didDoc?: { [_ in string]: unknown }\n  email?: string\n  emailConfirmed?: boolean\n  emailAuthFactor?: boolean\n  active?: boolean\n  /** If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted. */\n  status?: 'takendown' | 'suspended' | 'deactivated' | (string & {})\n}\n\nexport interface CallOptions {\n  signal?: AbortSignal\n  headers?: HeadersMap\n  qp?: QueryParams\n  encoding?: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: HeadersMap\n  data: OutputSchema\n}\n\nexport class AccountTakedownError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers, { cause: src })\n  }\n}\n\nexport class AuthFactorTokenRequiredError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers, { cause: src })\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'AccountTakedown') return new AccountTakedownError(e)\n    if (e.error === 'AuthFactorTokenRequired')\n      return new AuthFactorTokenRequiredError(e)\n  }\n\n  return e\n}\n"]}