{"version":3,"file":"getConfig.js","sourceRoot":"","sources":["../../../../../../src/client/types/tools/ozone/server/getConfig.ts"],"names":[],"mappings":";;AAyCA,gCAEC;AASD,0CAEC;AAED,sDAEC;AAcD,wCAEC;AAED,oDAEC;AAxED,mDAA4D;AAC5D,2CAIyB;AAEzB,MAAM,QAAQ,GAAG,eAAS,EACxB,QAAQ,GAAG,mBAAS,CAAA;AACtB,MAAM,EAAE,GAAG,8BAA8B,CAAA;AA0BzC,SAAgB,UAAU,CAAC,CAAM;IAC/B,OAAO,CAAC,CAAA;AACV,CAAC;AAOD,MAAM,iBAAiB,GAAG,eAAe,CAAA;AAEzC,SAAgB,eAAe,CAAI,CAAI;IACrC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAA;AAC3C,CAAC;AAED,SAAgB,qBAAqB,CAAI,CAAI;IAC3C,OAAO,QAAQ,CAAoB,CAAC,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAA;AAC9D,CAAC;AAYD,MAAM,gBAAgB,GAAG,cAAc,CAAA;AAEvC,SAAgB,cAAc,CAAI,CAAI;IACpC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,gBAAgB,CAAC,CAAA;AAC1C,CAAC;AAED,SAAgB,oBAAoB,CAAI,CAAI;IAC1C,OAAO,QAAQ,CAAmB,CAAC,EAAE,EAAE,EAAE,gBAAgB,CAAC,CAAA;AAC5D,CAAC","sourcesContent":["/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { HeadersMap, XRPCError } from '@atproto/xrpc'\nimport { type ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { CID } from 'multiformats/cid'\nimport { validate as _validate } from '../../../../lexicons'\nimport {\n  type $Typed,\n  is$typed as _is$typed,\n  type OmitKey,\n} from '../../../../util'\n\nconst is$typed = _is$typed,\n  validate = _validate\nconst id = 'tools.ozone.server.getConfig'\n\nexport type QueryParams = {}\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  appview?: ServiceConfig\n  pds?: ServiceConfig\n  blobDivert?: ServiceConfig\n  chat?: ServiceConfig\n  viewer?: ViewerConfig\n  /** The did of the verifier used for verification. */\n  verifierDid?: string\n}\n\nexport interface CallOptions {\n  signal?: AbortSignal\n  headers?: HeadersMap\n}\n\nexport interface Response {\n  success: boolean\n  headers: HeadersMap\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  return e\n}\n\nexport interface ServiceConfig {\n  $type?: 'tools.ozone.server.getConfig#serviceConfig'\n  url?: string\n}\n\nconst hashServiceConfig = 'serviceConfig'\n\nexport function isServiceConfig<V>(v: V) {\n  return is$typed(v, id, hashServiceConfig)\n}\n\nexport function validateServiceConfig<V>(v: V) {\n  return validate<ServiceConfig & V>(v, id, hashServiceConfig)\n}\n\nexport interface ViewerConfig {\n  $type?: 'tools.ozone.server.getConfig#viewerConfig'\n  role?:\n    | 'tools.ozone.team.defs#roleAdmin'\n    | 'tools.ozone.team.defs#roleModerator'\n    | 'tools.ozone.team.defs#roleTriage'\n    | 'tools.ozone.team.defs#roleVerifier'\n    | (string & {})\n}\n\nconst hashViewerConfig = 'viewerConfig'\n\nexport function isViewerConfig<V>(v: V) {\n  return is$typed(v, id, hashViewerConfig)\n}\n\nexport function validateViewerConfig<V>(v: V) {\n  return validate<ViewerConfig & V>(v, id, hashViewerConfig)\n}\n"]}