{"version":3,"file":"external.js","sourceRoot":"","sources":["../../../../../../src/client/types/app/bsky/embed/external.ts"],"names":[],"mappings":";;AAwBA,wBAEC;AAED,oCAEC;AAYD,gCAEC;AAED,4CAEC;AASD,wBAEC;AAED,oCAEC;AAYD,wCAEC;AAED,oDAEC;AA5ED,mDAA4D;AAC5D,2CAIyB;AAEzB,MAAM,QAAQ,GAAG,eAAS,EACxB,QAAQ,GAAG,mBAAS,CAAA;AACtB,MAAM,EAAE,GAAG,yBAAyB,CAAA;AAQpC,MAAM,QAAQ,GAAG,MAAM,CAAA;AAEvB,SAAgB,MAAM,CAAI,CAAI;IAC5B,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAA;AAClC,CAAC;AAED,SAAgB,YAAY,CAAI,CAAI;IAClC,OAAO,QAAQ,CAAW,CAAC,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAA;AAC5C,CAAC;AAUD,MAAM,YAAY,GAAG,UAAU,CAAA;AAE/B,SAAgB,UAAU,CAAI,CAAI;IAChC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,YAAY,CAAC,CAAA;AACtC,CAAC;AAED,SAAgB,gBAAgB,CAAI,CAAI;IACtC,OAAO,QAAQ,CAAe,CAAC,EAAE,EAAE,EAAE,YAAY,CAAC,CAAA;AACpD,CAAC;AAOD,MAAM,QAAQ,GAAG,MAAM,CAAA;AAEvB,SAAgB,MAAM,CAAI,CAAI;IAC5B,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAA;AAClC,CAAC;AAED,SAAgB,YAAY,CAAI,CAAI;IAClC,OAAO,QAAQ,CAAW,CAAC,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAA;AAC5C,CAAC;AAUD,MAAM,gBAAgB,GAAG,cAAc,CAAA;AAEvC,SAAgB,cAAc,CAAI,CAAI;IACpC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,gBAAgB,CAAC,CAAA;AAC1C,CAAC;AAED,SAAgB,oBAAoB,CAAI,CAAI;IAC1C,OAAO,QAAQ,CAAmB,CAAC,EAAE,EAAE,EAAE,gBAAgB,CAAC,CAAA;AAC5D,CAAC","sourcesContent":["/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { type ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { CID } from 'multiformats/cid'\nimport { validate as _validate } from '../../../../lexicons'\nimport {\n  type $Typed,\n  is$typed as _is$typed,\n  type OmitKey,\n} from '../../../../util'\n\nconst is$typed = _is$typed,\n  validate = _validate\nconst id = 'app.bsky.embed.external'\n\n/** A representation of some externally linked content (eg, a URL and 'card'), embedded in a Bluesky record (eg, a post). */\nexport interface Main {\n  $type?: 'app.bsky.embed.external'\n  external: External\n}\n\nconst hashMain = 'main'\n\nexport function isMain<V>(v: V) {\n  return is$typed(v, id, hashMain)\n}\n\nexport function validateMain<V>(v: V) {\n  return validate<Main & V>(v, id, hashMain)\n}\n\nexport interface External {\n  $type?: 'app.bsky.embed.external#external'\n  uri: string\n  title: string\n  description: string\n  thumb?: BlobRef\n}\n\nconst hashExternal = 'external'\n\nexport function isExternal<V>(v: V) {\n  return is$typed(v, id, hashExternal)\n}\n\nexport function validateExternal<V>(v: V) {\n  return validate<External & V>(v, id, hashExternal)\n}\n\nexport interface View {\n  $type?: 'app.bsky.embed.external#view'\n  external: ViewExternal\n}\n\nconst hashView = 'view'\n\nexport function isView<V>(v: V) {\n  return is$typed(v, id, hashView)\n}\n\nexport function validateView<V>(v: V) {\n  return validate<View & V>(v, id, hashView)\n}\n\nexport interface ViewExternal {\n  $type?: 'app.bsky.embed.external#viewExternal'\n  uri: string\n  title: string\n  description: string\n  thumb?: string\n}\n\nconst hashViewExternal = 'viewExternal'\n\nexport function isViewExternal<V>(v: V) {\n  return is$typed(v, id, hashViewExternal)\n}\n\nexport function validateViewExternal<V>(v: V) {\n  return validate<ViewExternal & V>(v, id, hashViewExternal)\n}\n"]}