{"version":3,"file":"defs.js","sourceRoot":"","sources":["../../../../../../src/client/types/com/atproto/identity/defs.ts"],"names":[],"mappings":";;AA2BA,wCAEC;AAED,oDAEC;AA5BD,mDAA4D;AAC5D,2CAIyB;AAEzB,MAAM,QAAQ,GAAG,eAAS,EACxB,QAAQ,GAAG,mBAAS,CAAA;AACtB,MAAM,EAAE,GAAG,2BAA2B,CAAA;AAWtC,MAAM,gBAAgB,GAAG,cAAc,CAAA;AAEvC,SAAgB,cAAc,CAAI,CAAI;IACpC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,gBAAgB,CAAC,CAAA;AAC1C,CAAC;AAED,SAAgB,oBAAoB,CAAI,CAAI;IAC1C,OAAO,QAAQ,CAAmB,CAAC,EAAE,EAAE,EAAE,gBAAgB,CAAC,CAAA;AAC5D,CAAC","sourcesContent":["/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { type ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { CID } from 'multiformats/cid'\nimport { validate as _validate } from '../../../../lexicons'\nimport {\n  type $Typed,\n  is$typed as _is$typed,\n  type OmitKey,\n} from '../../../../util'\n\nconst is$typed = _is$typed,\n  validate = _validate\nconst id = 'com.atproto.identity.defs'\n\nexport interface IdentityInfo {\n  $type?: 'com.atproto.identity.defs#identityInfo'\n  did: string\n  /** The validated handle of the account; or 'handle.invalid' if the handle did not bi-directionally match the DID document. */\n  handle: string\n  /** The complete DID document for the identity. */\n  didDoc: { [_ in string]: unknown }\n}\n\nconst hashIdentityInfo = 'identityInfo'\n\nexport function isIdentityInfo<V>(v: V) {\n  return is$typed(v, id, hashIdentityInfo)\n}\n\nexport function validateIdentityInfo<V>(v: V) {\n  return validate<IdentityInfo & V>(v, id, hashIdentityInfo)\n}\n"]}