{"version":3,"file":"defs.js","sourceRoot":"","sources":["../../../../../../src/client/types/app/bsky/feed/defs.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { type ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { CID } from 'multiformats/cid'\nimport { validate as _validate } from '../../../../lexicons'\nimport {\n  type $Typed,\n  is$typed as _is$typed,\n  type OmitKey,\n} from '../../../../util'\nimport type * as AppBskyActorDefs from '../actor/defs.js'\nimport type * as AppBskyEmbedImages from '../embed/images.js'\nimport type * as AppBskyEmbedVideo from '../embed/video.js'\nimport type * as AppBskyEmbedExternal from '../embed/external.js'\nimport type * as AppBskyEmbedRecord from '../embed/record.js'\nimport type * as AppBskyEmbedRecordWithMedia from '../embed/recordWithMedia.js'\nimport type * as ComAtprotoLabelDefs from '../../../com/atproto/label/defs.js'\nimport type * as AppBskyRichtextFacet from '../richtext/facet.js'\nimport type * as AppBskyGraphDefs from '../graph/defs.js'\n\nconst is$typed = _is$typed,\n  validate = _validate\nconst id = 'app.bsky.feed.defs'\n\nexport interface PostView {\n  $type?: 'app.bsky.feed.defs#postView'\n  uri: string\n  cid: string\n  author: AppBskyActorDefs.ProfileViewBasic\n  record: { [_ in string]: unknown }\n  embed?:\n    | $Typed<AppBskyEmbedImages.View>\n    | $Typed<AppBskyEmbedVideo.View>\n    | $Typed<AppBskyEmbedExternal.View>\n    | $Typed<AppBskyEmbedRecord.View>\n    | $Typed<AppBskyEmbedRecordWithMedia.View>\n    | { $type: string }\n  bookmarkCount?: number\n  replyCount?: number\n  repostCount?: number\n  likeCount?: number\n  quoteCount?: number\n  indexedAt: string\n  viewer?: ViewerState\n  labels?: ComAtprotoLabelDefs.Label[]\n  threadgate?: ThreadgateView\n}\n\nconst hashPostView = 'postView'\n\nexport function isPostView<V>(v: V) {\n  return is$typed(v, id, hashPostView)\n}\n\nexport function validatePostView<V>(v: V) {\n  return validate<PostView & V>(v, id, hashPostView)\n}\n\n/** Metadata about the requesting account's relationship with the subject content. Only has meaningful content for authed requests. */\nexport interface ViewerState {\n  $type?: 'app.bsky.feed.defs#viewerState'\n  repost?: string\n  like?: string\n  bookmarked?: boolean\n  threadMuted?: boolean\n  replyDisabled?: boolean\n  embeddingDisabled?: boolean\n  pinned?: boolean\n}\n\nconst hashViewerState = 'viewerState'\n\nexport function isViewerState<V>(v: V) {\n  return is$typed(v, id, hashViewerState)\n}\n\nexport function validateViewerState<V>(v: V) {\n  return validate<ViewerState & V>(v, id, hashViewerState)\n}\n\n/** Metadata about this post within the context of the thread it is in. */\nexport interface ThreadContext {\n  $type?: 'app.bsky.feed.defs#threadContext'\n  rootAuthorLike?: string\n}\n\nconst hashThreadContext = 'threadContext'\n\nexport function isThreadContext<V>(v: V) {\n  return is$typed(v, id, hashThreadContext)\n}\n\nexport function validateThreadContext<V>(v: V) {\n  return validate<ThreadContext & V>(v, id, hashThreadContext)\n}\n\nexport interface FeedViewPost {\n  $type?: 'app.bsky.feed.defs#feedViewPost'\n  post: PostView\n  reply?: ReplyRef\n  reason?: $Typed<ReasonRepost> | $Typed<ReasonPin> | { $type: string }\n  /** Context provided by feed generator that may be passed back alongside interactions. */\n  feedContext?: string\n  /** Unique identifier per request that may be passed back alongside interactions. */\n  reqId?: string\n}\n\nconst hashFeedViewPost = 'feedViewPost'\n\nexport function isFeedViewPost<V>(v: V) {\n  return is$typed(v, id, hashFeedViewPost)\n}\n\nexport function validateFeedViewPost<V>(v: V) {\n  return validate<FeedViewPost & V>(v, id, hashFeedViewPost)\n}\n\nexport interface ReplyRef {\n  $type?: 'app.bsky.feed.defs#replyRef'\n  root:\n    | $Typed<PostView>\n    | $Typed<NotFoundPost>\n    | $Typed<BlockedPost>\n    | { $type: string }\n  parent:\n    | $Typed<PostView>\n    | $Typed<NotFoundPost>\n    | $Typed<BlockedPost>\n    | { $type: string }\n  grandparentAuthor?: AppBskyActorDefs.ProfileViewBasic\n}\n\nconst hashReplyRef = 'replyRef'\n\nexport function isReplyRef<V>(v: V) {\n  return is$typed(v, id, hashReplyRef)\n}\n\nexport function validateReplyRef<V>(v: V) {\n  return validate<ReplyRef & V>(v, id, hashReplyRef)\n}\n\nexport interface ReasonRepost {\n  $type?: 'app.bsky.feed.defs#reasonRepost'\n  by: AppBskyActorDefs.ProfileViewBasic\n  uri?: string\n  cid?: string\n  indexedAt: string\n}\n\nconst hashReasonRepost = 'reasonRepost'\n\nexport function isReasonRepost<V>(v: V) {\n  return is$typed(v, id, hashReasonRepost)\n}\n\nexport function validateReasonRepost<V>(v: V) {\n  return validate<ReasonRepost & V>(v, id, hashReasonRepost)\n}\n\nexport interface ReasonPin {\n  $type?: 'app.bsky.feed.defs#reasonPin'\n}\n\nconst hashReasonPin = 'reasonPin'\n\nexport function isReasonPin<V>(v: V) {\n  return is$typed(v, id, hashReasonPin)\n}\n\nexport function validateReasonPin<V>(v: V) {\n  return validate<ReasonPin & V>(v, id, hashReasonPin)\n}\n\nexport interface ThreadViewPost {\n  $type?: 'app.bsky.feed.defs#threadViewPost'\n  post: PostView\n  parent?:\n    | $Typed<ThreadViewPost>\n    | $Typed<NotFoundPost>\n    | $Typed<BlockedPost>\n    | { $type: string }\n  replies?: (\n    | $Typed<ThreadViewPost>\n    | $Typed<NotFoundPost>\n    | $Typed<BlockedPost>\n    | { $type: string }\n  )[]\n  threadContext?: ThreadContext\n}\n\nconst hashThreadViewPost = 'threadViewPost'\n\nexport function isThreadViewPost<V>(v: V) {\n  return is$typed(v, id, hashThreadViewPost)\n}\n\nexport function validateThreadViewPost<V>(v: V) {\n  return validate<ThreadViewPost & V>(v, id, hashThreadViewPost)\n}\n\nexport interface NotFoundPost {\n  $type?: 'app.bsky.feed.defs#notFoundPost'\n  uri: string\n  notFound: true\n}\n\nconst hashNotFoundPost = 'notFoundPost'\n\nexport function isNotFoundPost<V>(v: V) {\n  return is$typed(v, id, hashNotFoundPost)\n}\n\nexport function validateNotFoundPost<V>(v: V) {\n  return validate<NotFoundPost & V>(v, id, hashNotFoundPost)\n}\n\nexport interface BlockedPost {\n  $type?: 'app.bsky.feed.defs#blockedPost'\n  uri: string\n  blocked: true\n  author: BlockedAuthor\n}\n\nconst hashBlockedPost = 'blockedPost'\n\nexport function isBlockedPost<V>(v: V) {\n  return is$typed(v, id, hashBlockedPost)\n}\n\nexport function validateBlockedPost<V>(v: V) {\n  return validate<BlockedPost & V>(v, id, hashBlockedPost)\n}\n\nexport interface BlockedAuthor {\n  $type?: 'app.bsky.feed.defs#blockedAuthor'\n  did: string\n  viewer?: AppBskyActorDefs.ViewerState\n}\n\nconst hashBlockedAuthor = 'blockedAuthor'\n\nexport function isBlockedAuthor<V>(v: V) {\n  return is$typed(v, id, hashBlockedAuthor)\n}\n\nexport function validateBlockedAuthor<V>(v: V) {\n  return validate<BlockedAuthor & V>(v, id, hashBlockedAuthor)\n}\n\nexport interface GeneratorView {\n  $type?: 'app.bsky.feed.defs#generatorView'\n  uri: string\n  cid: string\n  did: string\n  creator: AppBskyActorDefs.ProfileView\n  displayName: string\n  description?: string\n  descriptionFacets?: AppBskyRichtextFacet.Main[]\n  avatar?: string\n  likeCount?: number\n  acceptsInteractions?: boolean\n  labels?: ComAtprotoLabelDefs.Label[]\n  viewer?: GeneratorViewerState\n  contentMode?:\n    | 'app.bsky.feed.defs#contentModeUnspecified'\n    | 'app.bsky.feed.defs#contentModeVideo'\n    | (string & {})\n  indexedAt: string\n}\n\nconst hashGeneratorView = 'generatorView'\n\nexport function isGeneratorView<V>(v: V) {\n  return is$typed(v, id, hashGeneratorView)\n}\n\nexport function validateGeneratorView<V>(v: V) {\n  return validate<GeneratorView & V>(v, id, hashGeneratorView)\n}\n\nexport interface GeneratorViewerState {\n  $type?: 'app.bsky.feed.defs#generatorViewerState'\n  like?: string\n}\n\nconst hashGeneratorViewerState = 'generatorViewerState'\n\nexport function isGeneratorViewerState<V>(v: V) {\n  return is$typed(v, id, hashGeneratorViewerState)\n}\n\nexport function validateGeneratorViewerState<V>(v: V) {\n  return validate<GeneratorViewerState & V>(v, id, hashGeneratorViewerState)\n}\n\nexport interface SkeletonFeedPost {\n  $type?: 'app.bsky.feed.defs#skeletonFeedPost'\n  post: string\n  reason?:\n    | $Typed<SkeletonReasonRepost>\n    | $Typed<SkeletonReasonPin>\n    | { $type: string }\n  /** Context that will be passed through to client and may be passed to feed generator back alongside interactions. */\n  feedContext?: string\n}\n\nconst hashSkeletonFeedPost = 'skeletonFeedPost'\n\nexport function isSkeletonFeedPost<V>(v: V) {\n  return is$typed(v, id, hashSkeletonFeedPost)\n}\n\nexport function validateSkeletonFeedPost<V>(v: V) {\n  return validate<SkeletonFeedPost & V>(v, id, hashSkeletonFeedPost)\n}\n\nexport interface SkeletonReasonRepost {\n  $type?: 'app.bsky.feed.defs#skeletonReasonRepost'\n  repost: string\n}\n\nconst hashSkeletonReasonRepost = 'skeletonReasonRepost'\n\nexport function isSkeletonReasonRepost<V>(v: V) {\n  return is$typed(v, id, hashSkeletonReasonRepost)\n}\n\nexport function validateSkeletonReasonRepost<V>(v: V) {\n  return validate<SkeletonReasonRepost & V>(v, id, hashSkeletonReasonRepost)\n}\n\nexport interface SkeletonReasonPin {\n  $type?: 'app.bsky.feed.defs#skeletonReasonPin'\n}\n\nconst hashSkeletonReasonPin = 'skeletonReasonPin'\n\nexport function isSkeletonReasonPin<V>(v: V) {\n  return is$typed(v, id, hashSkeletonReasonPin)\n}\n\nexport function validateSkeletonReasonPin<V>(v: V) {\n  return validate<SkeletonReasonPin & V>(v, id, hashSkeletonReasonPin)\n}\n\nexport interface ThreadgateView {\n  $type?: 'app.bsky.feed.defs#threadgateView'\n  uri?: string\n  cid?: string\n  record?: { [_ in string]: unknown }\n  lists?: AppBskyGraphDefs.ListViewBasic[]\n}\n\nconst hashThreadgateView = 'threadgateView'\n\nexport function isThreadgateView<V>(v: V) {\n  return is$typed(v, id, hashThreadgateView)\n}\n\nexport function validateThreadgateView<V>(v: V) {\n  return validate<ThreadgateView & V>(v, id, hashThreadgateView)\n}\n\nexport interface Interaction {\n  $type?: 'app.bsky.feed.defs#interaction'\n  item?: string\n  event?:\n    | 'app.bsky.feed.defs#requestLess'\n    | 'app.bsky.feed.defs#requestMore'\n    | 'app.bsky.feed.defs#clickthroughItem'\n    | 'app.bsky.feed.defs#clickthroughAuthor'\n    | 'app.bsky.feed.defs#clickthroughReposter'\n    | 'app.bsky.feed.defs#clickthroughEmbed'\n    | 'app.bsky.feed.defs#interactionSeen'\n    | 'app.bsky.feed.defs#interactionLike'\n    | 'app.bsky.feed.defs#interactionRepost'\n    | 'app.bsky.feed.defs#interactionReply'\n    | 'app.bsky.feed.defs#interactionQuote'\n    | 'app.bsky.feed.defs#interactionShare'\n    | (string & {})\n  /** Context on a feed item that was originally supplied by the feed generator on getFeedSkeleton. */\n  feedContext?: string\n  /** Unique identifier per request that may be passed back alongside interactions. */\n  reqId?: string\n}\n\nconst hashInteraction = 'interaction'\n\nexport function isInteraction<V>(v: V) {\n  return is$typed(v, id, hashInteraction)\n}\n\nexport function validateInteraction<V>(v: V) {\n  return validate<Interaction & V>(v, id, hashInteraction)\n}\n\n/** Request that less content like the given feed item be shown in the feed */\nexport const REQUESTLESS = `${id}#requestLess`\n/** Request that more content like the given feed item be shown in the feed */\nexport const REQUESTMORE = `${id}#requestMore`\n/** User clicked through to the feed item */\nexport const CLICKTHROUGHITEM = `${id}#clickthroughItem`\n/** User clicked through to the author of the feed item */\nexport const CLICKTHROUGHAUTHOR = `${id}#clickthroughAuthor`\n/** User clicked through to the reposter of the feed item */\nexport const CLICKTHROUGHREPOSTER = `${id}#clickthroughReposter`\n/** User clicked through to the embedded content of the feed item */\nexport const CLICKTHROUGHEMBED = `${id}#clickthroughEmbed`\n/** Declares the feed generator returns any types of posts. */\nexport const CONTENTMODEUNSPECIFIED = `${id}#contentModeUnspecified`\n/** Declares the feed generator returns posts containing app.bsky.embed.video embeds. */\nexport const CONTENTMODEVIDEO = `${id}#contentModeVideo`\n/** Feed item was seen by user */\nexport const INTERACTIONSEEN = `${id}#interactionSeen`\n/** User liked the feed item */\nexport const INTERACTIONLIKE = `${id}#interactionLike`\n/** User reposted the feed item */\nexport const INTERACTIONREPOST = `${id}#interactionRepost`\n/** User replied to the feed item */\nexport const INTERACTIONREPLY = `${id}#interactionReply`\n/** User quoted the feed item */\nexport const INTERACTIONQUOTE = `${id}#interactionQuote`\n/** User shared the feed item */\nexport const INTERACTIONSHARE = `${id}#interactionShare`\n"]}