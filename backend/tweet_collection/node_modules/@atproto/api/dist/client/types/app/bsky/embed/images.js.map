{"version":3,"file":"images.js","sourceRoot":"","sources":["../../../../../../src/client/types/app/bsky/embed/images.ts"],"names":[],"mappings":";;AAwBA,wBAEC;AAED,oCAEC;AAYD,0BAEC;AAED,sCAEC;AASD,wBAEC;AAED,oCAEC;AAeD,kCAEC;AAED,8CAEC;AA/ED,mDAA4D;AAC5D,2CAIyB;AAGzB,MAAM,QAAQ,GAAG,eAAS,EACxB,QAAQ,GAAG,mBAAS,CAAA;AACtB,MAAM,EAAE,GAAG,uBAAuB,CAAA;AAOlC,MAAM,QAAQ,GAAG,MAAM,CAAA;AAEvB,SAAgB,MAAM,CAAI,CAAI;IAC5B,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAA;AAClC,CAAC;AAED,SAAgB,YAAY,CAAI,CAAI;IAClC,OAAO,QAAQ,CAAW,CAAC,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAA;AAC5C,CAAC;AAUD,MAAM,SAAS,GAAG,OAAO,CAAA;AAEzB,SAAgB,OAAO,CAAI,CAAI;IAC7B,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,SAAS,CAAC,CAAA;AACnC,CAAC;AAED,SAAgB,aAAa,CAAI,CAAI;IACnC,OAAO,QAAQ,CAAY,CAAC,EAAE,EAAE,EAAE,SAAS,CAAC,CAAA;AAC9C,CAAC;AAOD,MAAM,QAAQ,GAAG,MAAM,CAAA;AAEvB,SAAgB,MAAM,CAAI,CAAI;IAC5B,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAA;AAClC,CAAC;AAED,SAAgB,YAAY,CAAI,CAAI;IAClC,OAAO,QAAQ,CAAW,CAAC,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAA;AAC5C,CAAC;AAaD,MAAM,aAAa,GAAG,WAAW,CAAA;AAEjC,SAAgB,WAAW,CAAI,CAAI;IACjC,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,aAAa,CAAC,CAAA;AACvC,CAAC;AAED,SAAgB,iBAAiB,CAAI,CAAI;IACvC,OAAO,QAAQ,CAAgB,CAAC,EAAE,EAAE,EAAE,aAAa,CAAC,CAAA;AACtD,CAAC","sourcesContent":["/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { type ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { CID } from 'multiformats/cid'\nimport { validate as _validate } from '../../../../lexicons'\nimport {\n  type $Typed,\n  is$typed as _is$typed,\n  type OmitKey,\n} from '../../../../util'\nimport type * as AppBskyEmbedDefs from './defs.js'\n\nconst is$typed = _is$typed,\n  validate = _validate\nconst id = 'app.bsky.embed.images'\n\nexport interface Main {\n  $type?: 'app.bsky.embed.images'\n  images: Image[]\n}\n\nconst hashMain = 'main'\n\nexport function isMain<V>(v: V) {\n  return is$typed(v, id, hashMain)\n}\n\nexport function validateMain<V>(v: V) {\n  return validate<Main & V>(v, id, hashMain)\n}\n\nexport interface Image {\n  $type?: 'app.bsky.embed.images#image'\n  image: BlobRef\n  /** Alt text description of the image, for accessibility. */\n  alt: string\n  aspectRatio?: AppBskyEmbedDefs.AspectRatio\n}\n\nconst hashImage = 'image'\n\nexport function isImage<V>(v: V) {\n  return is$typed(v, id, hashImage)\n}\n\nexport function validateImage<V>(v: V) {\n  return validate<Image & V>(v, id, hashImage)\n}\n\nexport interface View {\n  $type?: 'app.bsky.embed.images#view'\n  images: ViewImage[]\n}\n\nconst hashView = 'view'\n\nexport function isView<V>(v: V) {\n  return is$typed(v, id, hashView)\n}\n\nexport function validateView<V>(v: V) {\n  return validate<View & V>(v, id, hashView)\n}\n\nexport interface ViewImage {\n  $type?: 'app.bsky.embed.images#viewImage'\n  /** Fully-qualified URL where a thumbnail of the image can be fetched. For example, CDN location provided by the App View. */\n  thumb: string\n  /** Fully-qualified URL where a large version of the image can be fetched. May or may not be the exact original blob. For example, CDN location provided by the App View. */\n  fullsize: string\n  /** Alt text description of the image, for accessibility. */\n  alt: string\n  aspectRatio?: AppBskyEmbedDefs.AspectRatio\n}\n\nconst hashViewImage = 'viewImage'\n\nexport function isViewImage<V>(v: V) {\n  return is$typed(v, id, hashViewImage)\n}\n\nexport function validateViewImage<V>(v: V) {\n  return validate<ViewImage & V>(v, id, hashViewImage)\n}\n"]}