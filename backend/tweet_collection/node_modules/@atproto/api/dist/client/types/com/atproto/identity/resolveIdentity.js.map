{"version":3,"file":"resolveIdentity.js","sourceRoot":"","sources":["../../../../../../src/client/types/com/atproto/identity/resolveIdentity.ts"],"names":[],"mappings":";;;AAsDA,gCAQC;AA9DD;;GAEG;AACH,wCAAqD;AAGrD,mDAA4D;AAC5D,2CAIyB;AAGzB,MAAM,QAAQ,GAAG,eAAS,EACxB,QAAQ,GAAG,mBAAS,CAAA;AACtB,MAAM,EAAE,GAAG,sCAAsC,CAAA;AAoBjD,MAAa,mBAAoB,SAAQ,gBAAS;IAChD,YAAY,GAAc;QACxB,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAA;IACxE,CAAC;CACF;AAJD,kDAIC;AAED,MAAa,gBAAiB,SAAQ,gBAAS;IAC7C,YAAY,GAAc;QACxB,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAA;IACxE,CAAC;CACF;AAJD,4CAIC;AAED,MAAa,mBAAoB,SAAQ,gBAAS;IAChD,YAAY,GAAc;QACxB,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAA;IACxE,CAAC;CACF;AAJD,kDAIC;AAED,SAAgB,UAAU,CAAC,CAAM;IAC/B,IAAI,CAAC,YAAY,gBAAS,EAAE,CAAC;QAC3B,IAAI,CAAC,CAAC,KAAK,KAAK,gBAAgB;YAAE,OAAO,IAAI,mBAAmB,CAAC,CAAC,CAAC,CAAA;QACnE,IAAI,CAAC,CAAC,KAAK,KAAK,aAAa;YAAE,OAAO,IAAI,gBAAgB,CAAC,CAAC,CAAC,CAAA;QAC7D,IAAI,CAAC,CAAC,KAAK,KAAK,gBAAgB;YAAE,OAAO,IAAI,mBAAmB,CAAC,CAAC,CAAC,CAAA;IACrE,CAAC;IAED,OAAO,CAAC,CAAA;AACV,CAAC","sourcesContent":["/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { HeadersMap, XRPCError } from '@atproto/xrpc'\nimport { type ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { CID } from 'multiformats/cid'\nimport { validate as _validate } from '../../../../lexicons'\nimport {\n  type $Typed,\n  is$typed as _is$typed,\n  type OmitKey,\n} from '../../../../util'\nimport type * as ComAtprotoIdentityDefs from './defs.js'\n\nconst is$typed = _is$typed,\n  validate = _validate\nconst id = 'com.atproto.identity.resolveIdentity'\n\nexport type QueryParams = {\n  /** Handle or DID to resolve. */\n  identifier: string\n}\nexport type InputSchema = undefined\nexport type OutputSchema = ComAtprotoIdentityDefs.IdentityInfo\n\nexport interface CallOptions {\n  signal?: AbortSignal\n  headers?: HeadersMap\n}\n\nexport interface Response {\n  success: boolean\n  headers: HeadersMap\n  data: OutputSchema\n}\n\nexport class HandleNotFoundError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers, { cause: src })\n  }\n}\n\nexport class DidNotFoundError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers, { cause: src })\n  }\n}\n\nexport class DidDeactivatedError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers, { cause: src })\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'HandleNotFound') return new HandleNotFoundError(e)\n    if (e.error === 'DidNotFound') return new DidNotFoundError(e)\n    if (e.error === 'DidDeactivated') return new DidDeactivatedError(e)\n  }\n\n  return e\n}\n"]}