{"version":3,"file":"addRule.js","sourceRoot":"","sources":["../../../../../../src/client/types/tools/ozone/safelink/addRule.ts"],"names":[],"mappings":";;;AA2DA,gCAOC;AAlED;;GAEG;AACH,wCAAqD;AAGrD,mDAA4D;AAC5D,2CAIyB;AAGzB,MAAM,QAAQ,GAAG,eAAS,EACxB,QAAQ,GAAG,mBAAS,CAAA;AACtB,MAAM,EAAE,GAAG,8BAA8B,CAAA;AA+BzC,MAAa,eAAgB,SAAQ,gBAAS;IAC5C,YAAY,GAAc;QACxB,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAA;IACxE,CAAC;CACF;AAJD,0CAIC;AAED,MAAa,sBAAuB,SAAQ,gBAAS;IACnD,YAAY,GAAc;QACxB,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAA;IACxE,CAAC;CACF;AAJD,wDAIC;AAED,SAAgB,UAAU,CAAC,CAAM;IAC/B,IAAI,CAAC,YAAY,gBAAS,EAAE,CAAC;QAC3B,IAAI,CAAC,CAAC,KAAK,KAAK,YAAY;YAAE,OAAO,IAAI,eAAe,CAAC,CAAC,CAAC,CAAA;QAC3D,IAAI,CAAC,CAAC,KAAK,KAAK,mBAAmB;YAAE,OAAO,IAAI,sBAAsB,CAAC,CAAC,CAAC,CAAA;IAC3E,CAAC;IAED,OAAO,CAAC,CAAA;AACV,CAAC","sourcesContent":["/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { HeadersMap, XRPCError } from '@atproto/xrpc'\nimport { type ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { CID } from 'multiformats/cid'\nimport { validate as _validate } from '../../../../lexicons'\nimport {\n  type $Typed,\n  is$typed as _is$typed,\n  type OmitKey,\n} from '../../../../util'\nimport type * as ToolsOzoneSafelinkDefs from './defs.js'\n\nconst is$typed = _is$typed,\n  validate = _validate\nconst id = 'tools.ozone.safelink.addRule'\n\nexport type QueryParams = {}\n\nexport interface InputSchema {\n  /** The URL or domain to apply the rule to */\n  url: string\n  pattern: ToolsOzoneSafelinkDefs.PatternType\n  action: ToolsOzoneSafelinkDefs.ActionType\n  reason: ToolsOzoneSafelinkDefs.ReasonType\n  /** Optional comment about the decision */\n  comment?: string\n  /** Author DID. Only respected when using admin auth */\n  createdBy?: string\n}\n\nexport type OutputSchema = ToolsOzoneSafelinkDefs.Event\n\nexport interface CallOptions {\n  signal?: AbortSignal\n  headers?: HeadersMap\n  qp?: QueryParams\n  encoding?: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: HeadersMap\n  data: OutputSchema\n}\n\nexport class InvalidUrlError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers, { cause: src })\n  }\n}\n\nexport class RuleAlreadyExistsError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers, { cause: src })\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'InvalidUrl') return new InvalidUrlError(e)\n    if (e.error === 'RuleAlreadyExists') return new RuleAlreadyExistsError(e)\n  }\n\n  return e\n}\n"]}