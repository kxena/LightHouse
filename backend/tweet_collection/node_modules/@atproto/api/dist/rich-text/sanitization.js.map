{"version":3,"file":"sanitization.js","sourceRoot":"","sources":["../../src/rich-text/sanitization.ts"],"names":[],"mappings":";;AAQA,4CAQC;AAfD,uCAAyC;AAEzC,4EAA4E;AAC5E,yDAAyD;AACzD,MAAM,eAAe,GAAG,uDAAuD,CAAA;AAC/E,MAAM,eAAe,GAAG,MAAM,CAAA;AAE9B,SAAgB,gBAAgB,CAC9B,QAAkB,EAClB,IAAiC;IAEjC,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;QACvB,QAAQ,GAAG,KAAK,CAAC,QAAQ,EAAE,eAAe,EAAE,eAAe,CAAC,CAAA;IAC9D,CAAC;IACD,OAAO,QAAQ,CAAA;AACjB,CAAC;AAED,SAAS,KAAK,CACZ,QAAkB,EAClB,YAAoB,EACpB,iBAAyB;IAEzB,QAAQ,GAAG,QAAQ,CAAC,KAAK,EAAE,CAAA;IAE3B,IAAI,KAAK,GAAG,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,YAAY,CAAC,CAAA;IAC1D,OAAO,KAAK,IAAI,OAAO,KAAK,CAAC,KAAK,KAAK,WAAW,EAAE,CAAC;QACnD,MAAM,OAAO,GAAG,QAAQ,CAAC,WAAW,CAAA;QACpC,MAAM,gBAAgB,GAAG,QAAQ,CAAC,WAAW,CAAC,qBAAqB,CACjE,KAAK,CAAC,KAAK,CACZ,CAAA;QACD,MAAM,cAAc,GAAG,gBAAgB,GAAG,IAAI,uBAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAA;QAC5E,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,cAAc,CAAC,CAAA;QACjD,IAAI,QAAQ,CAAC,WAAW,CAAC,KAAK,KAAK,OAAO,CAAC,KAAK,EAAE,CAAC;YACjD,MAAK,CAAC,eAAe;QACvB,CAAC;QACD,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,iBAAiB,CAAC,CAAA;QACpD,KAAK,GAAG,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,YAAY,CAAC,CAAA;IACxD,CAAC;IAED,OAAO,QAAQ,CAAA;AACjB,CAAC","sourcesContent":["import { RichText } from './rich-text'\nimport { UnicodeString } from './unicode'\n\n// this regex is intentionally matching on the zero-with-separator codepoint\n// eslint-disable-next-line no-misleading-character-class\nconst EXCESS_SPACE_RE = /[\\r\\n]([\\u00AD\\u2060\\u200D\\u200C\\u200B\\s]*[\\r\\n]){2,}/\nconst REPLACEMENT_STR = '\\n\\n'\n\nexport function sanitizeRichText(\n  richText: RichText,\n  opts: { cleanNewlines?: boolean },\n) {\n  if (opts.cleanNewlines) {\n    richText = clean(richText, EXCESS_SPACE_RE, REPLACEMENT_STR)\n  }\n  return richText\n}\n\nfunction clean(\n  richText: RichText,\n  targetRegexp: RegExp,\n  replacementString: string,\n): RichText {\n  richText = richText.clone()\n\n  let match = richText.unicodeText.utf16.match(targetRegexp)\n  while (match && typeof match.index !== 'undefined') {\n    const oldText = richText.unicodeText\n    const removeStartIndex = richText.unicodeText.utf16IndexToUtf8Index(\n      match.index,\n    )\n    const removeEndIndex = removeStartIndex + new UnicodeString(match[0]).length\n    richText.delete(removeStartIndex, removeEndIndex)\n    if (richText.unicodeText.utf16 === oldText.utf16) {\n      break // sanity check\n    }\n    richText.insert(removeStartIndex, replacementString)\n    match = richText.unicodeText.utf16.match(targetRegexp)\n  }\n\n  return richText\n}\n"]}