{"version":3,"file":"util.js","sourceRoot":"","sources":["../src/util.ts"],"names":[],"mappings":";;;AAKA,wDAQC;AAED,sDAuBC;AAQD,4CAaC;AAED,8CAqBC;AAWD,kCAEC;AA/FD,6BAAuB;AACvB,4CAAuC;AAIvC,SAAgB,sBAAsB,CAAC,KAAa;IAClD,OAAO,CACL,KAAK;SACF,IAAI,EAAE;SACN,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC;QAC5B,yDAAyD;SACxD,OAAO,CAAC,uCAAuC,EAAE,EAAE,CAAC,CACxD,CAAA;AACH,CAAC;AAED,SAAgB,qBAAqB,CACnC,UAAwC;IAKxC,MAAM,MAAM,GAAa,EAAE,CAAA;IAC3B,MAAM,KAAK,GAAa,EAAE,CAAA;IAE1B,KAAK,MAAM,IAAI,IAAI,UAAU,EAAE,CAAC;QAC9B,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YAChB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;YACvB,8BAA8B;YAC9B,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QACxB,CAAC;aAAM,CAAC;YACN,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QACxB,CAAC;IACH,CAAC;IAED,OAAO;QACL,MAAM;QACN,KAAK;KACN,CAAA;AACH,CAAC;AAED;;;;;GAKG;AACH,SAAgB,gBAAgB,CAC9B,GAAW;IAEX,MAAM,IAAI,GAAG,IAAI,cAAK,CAAC,GAAG,CAAC,CAAA;IAE3B,QAAQ,IAAI,CAAC,UAAU,EAAE,CAAC;QACxB,KAAK,yBAAyB;YAC5B,OAAO,MAAM,CAAA;QACf,KAAK,qBAAqB;YACxB,OAAO,MAAM,CAAA;QACf;YACE,OAAO,SAAS,CAAA;IACpB,CAAC;AACH,CAAC;AAED,SAAgB,iBAAiB,CAAC,SAAqC;IACrE,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,CAAC;QAClB,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAA;IAC7D,CAAC;IAED,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC;QAC9C,MAAM,GAAG,GAAG,IAAI,cAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAA;QACtC,MAAM,MAAM,GAAG,GAAG,CAAC,UAAU,KAAK,yBAAyB,CAAA;QAC3D,MAAM,MAAM,GAAG,GAAG,CAAC,UAAU,KAAK,qBAAqB,CAAA;QAEvD,IAAI,SAAS,CAAC,IAAI,KAAK,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC;YACzC,MAAM,IAAI,KAAK,CACb,iDAAiD,GAAG,CAAC,UAAU,EAAE,CAClE,CAAA;QACH,CAAC;QACD,IAAI,SAAS,CAAC,IAAI,KAAK,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC;YACzC,MAAM,IAAI,KAAK,CACb,iDAAiD,GAAG,CAAC,UAAU,EAAE,CAClE,CAAA;QACH,CAAC;IACH,CAAC;AACH,CAAC;AAEY,QAAA,SAAS,GAAG,OAAC;KACvB,MAAM,CAAC;IACN,EAAE,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC;IACtB,SAAS,EAAE,OAAC,CAAC,OAAO,EAAE;IACtB,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE;IACpC,SAAS,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAE;CAC5C,CAAC;KACD,MAAM,EAAE,CAAA;AAEX,SAAgB,WAAW,CAAC,GAAQ;IAClC,iBAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;AACtB,CAAC","sourcesContent":["import { z } from 'zod'\nimport { AtUri } from '@atproto/syntax'\nimport { AppBskyActorDefs } from './client'\nimport { Nux } from './client/types/app/bsky/actor/defs'\n\nexport function sanitizeMutedWordValue(value: string) {\n  return (\n    value\n      .trim()\n      .replace(/^#(?!\\ufe0f)/, '')\n      // eslint-disable-next-line no-misleading-character-class\n      .replace(/[\\r\\n\\u00AD\\u2060\\u200D\\u200C\\u200B]+/, '')\n  )\n}\n\nexport function savedFeedsToUriArrays(\n  savedFeeds: AppBskyActorDefs.SavedFeed[],\n): {\n  pinned: string[]\n  saved: string[]\n} {\n  const pinned: string[] = []\n  const saved: string[] = []\n\n  for (const feed of savedFeeds) {\n    if (feed.pinned) {\n      pinned.push(feed.value)\n      // saved in v1 includes pinned\n      saved.push(feed.value)\n    } else {\n      saved.push(feed.value)\n    }\n  }\n\n  return {\n    pinned,\n    saved,\n  }\n}\n\n/**\n * Get the type of a saved feed, used by deprecated methods for backwards\n * compat. Should not be used moving forward. *Invalid URIs will throw.*\n *\n * @param uri - The AT URI of the saved feed\n */\nexport function getSavedFeedType(\n  uri: string,\n): AppBskyActorDefs.SavedFeed['type'] {\n  const urip = new AtUri(uri)\n\n  switch (urip.collection) {\n    case 'app.bsky.feed.generator':\n      return 'feed'\n    case 'app.bsky.graph.list':\n      return 'list'\n    default:\n      return 'unknown'\n  }\n}\n\nexport function validateSavedFeed(savedFeed: AppBskyActorDefs.SavedFeed) {\n  if (!savedFeed.id) {\n    throw new Error('Saved feed must have an `id` - use a TID')\n  }\n\n  if (['feed', 'list'].includes(savedFeed.type)) {\n    const uri = new AtUri(savedFeed.value)\n    const isFeed = uri.collection === 'app.bsky.feed.generator'\n    const isList = uri.collection === 'app.bsky.graph.list'\n\n    if (savedFeed.type === 'feed' && !isFeed) {\n      throw new Error(\n        `Saved feed of type 'feed' must be a feed, got ${uri.collection}`,\n      )\n    }\n    if (savedFeed.type === 'list' && !isList) {\n      throw new Error(\n        `Saved feed of type 'list' must be a list, got ${uri.collection}`,\n      )\n    }\n  }\n}\n\nexport const nuxSchema = z\n  .object({\n    id: z.string().max(64),\n    completed: z.boolean(),\n    data: z.string().max(300).optional(),\n    expiresAt: z.string().datetime().optional(),\n  })\n  .strict()\n\nexport function validateNux(nux: Nux) {\n  nuxSchema.parse(nux)\n}\n"]}